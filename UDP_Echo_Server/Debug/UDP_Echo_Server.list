
UDP_Echo_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e54  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08014054  08014054  00024054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080143f8  080143f8  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  080143f8  080143f8  000243f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014400  08014400  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014400  08014400  00024400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014404  08014404  00024404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08014408  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000f4  080144fc  000300f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000194  0801459c  00030194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000af78  20000234  0801463c  00030234  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000b1ac  0801463c  0003b1ac  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 14 .debug_info   000eafc3  00000000  00000000  00030262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00013273  00000000  00000000  0011b225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002938  00000000  00000000  0012e498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001da0  00000000  00000000  00130dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043844  00000000  00000000  00132b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000602c0  00000000  00000000  001763b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011dcb1  00000000  00000000  001d6674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002f4325  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008274  00000000  00000000  002f4378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000234 	.word	0x20000234
 800021c:	00000000 	.word	0x00000000
 8000220:	0801403c 	.word	0x0801403c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000238 	.word	0x20000238
 800023c:	0801403c 	.word	0x0801403c

08000240 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000240:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000242:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000246:	4919      	ldr	r1, [pc, #100]	; (80002ac <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000248:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800024c:	4818      	ldr	r0, [pc, #96]	; (80002b0 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800024e:	4917      	ldr	r1, [pc, #92]	; (80002ac <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000250:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000252:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000254:	4817      	ldr	r0, [pc, #92]	; (80002b4 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000256:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000258:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800025c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800025e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000262:	4915      	ldr	r1, [pc, #84]	; (80002b8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000264:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000266:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800026a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800026c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000270:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000274:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000278:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800027c:	490f      	ldr	r1, [pc, #60]	; (80002bc <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800027e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000282:	4770      	bx	lr

08000284 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_BadHandler>

08000288 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_HardfaultHandler>

0800028c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800028c:	f7ff bffe 	b.w	800028c <__tx_SVCallHandler>

08000290 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000290:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000292:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000296:	4770      	bx	lr

08000298 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000298:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800029a:	f000 f891 	bl	80003c0 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800029e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80002a2:	4770      	bx	lr

080002a4 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002a4:	f7ff bffe 	b.w	80002a4 <__tx_NMIHandler>

080002a8 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002a8:	f7ff bffe 	b.w	80002a8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ac:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002b0:	20008194 	.word	0x20008194
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002b4:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80002b8:	0020f57f 	.word	0x0020f57f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80002bc:	40ff0000 	.word	0x40ff0000

080002c0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002c0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002c4:	4a2a      	ldr	r2, [pc, #168]	; (8000370 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002c6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002c8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002cc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002d0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002d4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002d6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002da:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002de:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002e2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002e6:	f3bf 8f6f 	isb	sy

080002ea <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ea:	e7fe      	b.n	80002ea <__tx_wait_here>

080002ec <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002ec:	4821      	ldr	r0, [pc, #132]	; (8000374 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ee:	4a22      	ldr	r2, [pc, #136]	; (8000378 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002f0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002f4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002f6:	b191      	cbz	r1, 800031e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002f8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002fa:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002fe:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000302:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000306:	d101      	bne.n	800030c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000308:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800030c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030c:	4c1b      	ldr	r4, [pc, #108]	; (800037c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800030e:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000312:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000314:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000318:	b10d      	cbz	r5, 800031e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800031a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800031c:	6023      	str	r3, [r4, #0]

0800031e <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800031e:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000320:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000322:	b1b1      	cbz	r1, 8000352 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000324:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000326:	b662      	cpsie	i

08000328 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000328:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800032a:	4c14      	ldr	r4, [pc, #80]	; (800037c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800032c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800032e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000332:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000334:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000336:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800033a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800033e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000342:	d101      	bne.n	8000348 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000344:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000348 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000348:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800034c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000350:	4770      	bx	lr

08000352 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000352:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000354:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000356:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000358:	b909      	cbnz	r1, 800035e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800035a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800035c:	e7f9      	b.n	8000352 <__tx_ts_wait>

0800035e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800035e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000362:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000366:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800036c:	e7dc      	b.n	8000328 <__tx_ts_restore>

0800036e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800036e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000370:	20008230 	.word	0x20008230
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000374:	20008198 	.word	0x20008198
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000378:	2000819c 	.word	0x2000819c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800037c:	2000879c 	.word	0x2000879c

08000380 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000380:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000382:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000386:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800038a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800038e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000390:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000394:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000396:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000398:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800039a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800039c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800039e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003a0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003a2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003a4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003a6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003ac:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003b2:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003b4:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003ba:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003bc:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003be:	4770      	bx	lr

080003c0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003c0:	4922      	ldr	r1, [pc, #136]	; (800044c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003c2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003c4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003c8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003ca:	4b21      	ldr	r3, [pc, #132]	; (8000450 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003cc:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ce:	b13a      	cbz	r2, 80003e0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003d0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003d4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003d6:	b91a      	cbnz	r2, 80003e0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003d8:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003da:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003de:	6018      	str	r0, [r3, #0]

080003e0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003e0:	491d      	ldr	r1, [pc, #116]	; (8000458 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003e2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003e4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003e6:	b122      	cbz	r2, 80003f2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003e8:	4b1c      	ldr	r3, [pc, #112]	; (800045c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ea:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ee:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003f0:	e008      	b.n	8000404 <__tx_timer_done>

080003f2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003f2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003f6:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003f8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003fa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003fc:	d101      	bne.n	8000402 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003fe:	4b19      	ldr	r3, [pc, #100]	; (8000464 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000400:	6818      	ldr	r0, [r3, #0]

08000402 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000402:	6008      	str	r0, [r1, #0]

08000404 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000406:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000408:	b912      	cbnz	r2, 8000410 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800040a:	4914      	ldr	r1, [pc, #80]	; (800045c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800040c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800040e:	b1d0      	cbz	r0, 8000446 <__tx_timer_nothing_expired>

08000410 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 8000410:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000414:	4911      	ldr	r1, [pc, #68]	; (800045c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000416:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000418:	b108      	cbz	r0, 800041e <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800041a:	f011 f903 	bl	8011624 <_tx_timer_expiration_process>

0800041e <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000420:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000422:	b172      	cbz	r2, 8000442 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000424:	f010 feee 	bl	8011204 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000428:	480f      	ldr	r0, [pc, #60]	; (8000468 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800042a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800042c:	b949      	cbnz	r1, 8000442 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800042e:	480f      	ldr	r0, [pc, #60]	; (800046c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000430:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000432:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000434:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000436:	480f      	ldr	r0, [pc, #60]	; (8000474 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800043c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800043e:	d000      	beq.n	8000442 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000440:	6002      	str	r2, [r0, #0]

08000442 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000442:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000446 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000446:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800044a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800044c:	2000823c 	.word	0x2000823c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000450:	2000879c 	.word	0x2000879c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000454:	20008240 	.word	0x20008240
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000458:	200082cc 	.word	0x200082cc
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800045c:	200082d0 	.word	0x200082d0
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000460:	200082c8 	.word	0x200082c8
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000464:	200082c4 	.word	0x200082c4
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000468:	20008230 	.word	0x20008230
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800046c:	20008198 	.word	0x20008198
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000470:	2000819c 	.word	0x2000819c
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000474:	e000ed04 	.word	0xe000ed04
	...

08000480 <memchr>:
 8000480:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000484:	2a10      	cmp	r2, #16
 8000486:	db2b      	blt.n	80004e0 <memchr+0x60>
 8000488:	f010 0f07 	tst.w	r0, #7
 800048c:	d008      	beq.n	80004a0 <memchr+0x20>
 800048e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000492:	3a01      	subs	r2, #1
 8000494:	428b      	cmp	r3, r1
 8000496:	d02d      	beq.n	80004f4 <memchr+0x74>
 8000498:	f010 0f07 	tst.w	r0, #7
 800049c:	b342      	cbz	r2, 80004f0 <memchr+0x70>
 800049e:	d1f6      	bne.n	800048e <memchr+0xe>
 80004a0:	b4f0      	push	{r4, r5, r6, r7}
 80004a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80004a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80004aa:	f022 0407 	bic.w	r4, r2, #7
 80004ae:	f07f 0700 	mvns.w	r7, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004b8:	3c08      	subs	r4, #8
 80004ba:	ea85 0501 	eor.w	r5, r5, r1
 80004be:	ea86 0601 	eor.w	r6, r6, r1
 80004c2:	fa85 f547 	uadd8	r5, r5, r7
 80004c6:	faa3 f587 	sel	r5, r3, r7
 80004ca:	fa86 f647 	uadd8	r6, r6, r7
 80004ce:	faa5 f687 	sel	r6, r5, r7
 80004d2:	b98e      	cbnz	r6, 80004f8 <memchr+0x78>
 80004d4:	d1ee      	bne.n	80004b4 <memchr+0x34>
 80004d6:	bcf0      	pop	{r4, r5, r6, r7}
 80004d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004dc:	f002 0207 	and.w	r2, r2, #7
 80004e0:	b132      	cbz	r2, 80004f0 <memchr+0x70>
 80004e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004e6:	3a01      	subs	r2, #1
 80004e8:	ea83 0301 	eor.w	r3, r3, r1
 80004ec:	b113      	cbz	r3, 80004f4 <memchr+0x74>
 80004ee:	d1f8      	bne.n	80004e2 <memchr+0x62>
 80004f0:	2000      	movs	r0, #0
 80004f2:	4770      	bx	lr
 80004f4:	3801      	subs	r0, #1
 80004f6:	4770      	bx	lr
 80004f8:	2d00      	cmp	r5, #0
 80004fa:	bf06      	itte	eq
 80004fc:	4635      	moveq	r5, r6
 80004fe:	3803      	subeq	r0, #3
 8000500:	3807      	subne	r0, #7
 8000502:	f015 0f01 	tst.w	r5, #1
 8000506:	d107      	bne.n	8000518 <memchr+0x98>
 8000508:	3001      	adds	r0, #1
 800050a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800050e:	bf02      	ittt	eq
 8000510:	3001      	addeq	r0, #1
 8000512:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000516:	3001      	addeq	r0, #1
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	3801      	subs	r0, #1
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <__aeabi_uldivmod>:
 8000520:	b953      	cbnz	r3, 8000538 <__aeabi_uldivmod+0x18>
 8000522:	b94a      	cbnz	r2, 8000538 <__aeabi_uldivmod+0x18>
 8000524:	2900      	cmp	r1, #0
 8000526:	bf08      	it	eq
 8000528:	2800      	cmpeq	r0, #0
 800052a:	bf1c      	itt	ne
 800052c:	f04f 31ff 	movne.w	r1, #4294967295
 8000530:	f04f 30ff 	movne.w	r0, #4294967295
 8000534:	f000 b974 	b.w	8000820 <__aeabi_idiv0>
 8000538:	f1ad 0c08 	sub.w	ip, sp, #8
 800053c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000540:	f000 f806 	bl	8000550 <__udivmoddi4>
 8000544:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800054c:	b004      	add	sp, #16
 800054e:	4770      	bx	lr

08000550 <__udivmoddi4>:
 8000550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000554:	9d08      	ldr	r5, [sp, #32]
 8000556:	4604      	mov	r4, r0
 8000558:	468e      	mov	lr, r1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d14d      	bne.n	80005fa <__udivmoddi4+0xaa>
 800055e:	428a      	cmp	r2, r1
 8000560:	4694      	mov	ip, r2
 8000562:	d969      	bls.n	8000638 <__udivmoddi4+0xe8>
 8000564:	fab2 f282 	clz	r2, r2
 8000568:	b152      	cbz	r2, 8000580 <__udivmoddi4+0x30>
 800056a:	fa01 f302 	lsl.w	r3, r1, r2
 800056e:	f1c2 0120 	rsb	r1, r2, #32
 8000572:	fa20 f101 	lsr.w	r1, r0, r1
 8000576:	fa0c fc02 	lsl.w	ip, ip, r2
 800057a:	ea41 0e03 	orr.w	lr, r1, r3
 800057e:	4094      	lsls	r4, r2
 8000580:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000584:	0c21      	lsrs	r1, r4, #16
 8000586:	fbbe f6f8 	udiv	r6, lr, r8
 800058a:	fa1f f78c 	uxth.w	r7, ip
 800058e:	fb08 e316 	mls	r3, r8, r6, lr
 8000592:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000596:	fb06 f107 	mul.w	r1, r6, r7
 800059a:	4299      	cmp	r1, r3
 800059c:	d90a      	bls.n	80005b4 <__udivmoddi4+0x64>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80005a6:	f080 811f 	bcs.w	80007e8 <__udivmoddi4+0x298>
 80005aa:	4299      	cmp	r1, r3
 80005ac:	f240 811c 	bls.w	80007e8 <__udivmoddi4+0x298>
 80005b0:	3e02      	subs	r6, #2
 80005b2:	4463      	add	r3, ip
 80005b4:	1a5b      	subs	r3, r3, r1
 80005b6:	b2a4      	uxth	r4, r4
 80005b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80005bc:	fb08 3310 	mls	r3, r8, r0, r3
 80005c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005c4:	fb00 f707 	mul.w	r7, r0, r7
 80005c8:	42a7      	cmp	r7, r4
 80005ca:	d90a      	bls.n	80005e2 <__udivmoddi4+0x92>
 80005cc:	eb1c 0404 	adds.w	r4, ip, r4
 80005d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80005d4:	f080 810a 	bcs.w	80007ec <__udivmoddi4+0x29c>
 80005d8:	42a7      	cmp	r7, r4
 80005da:	f240 8107 	bls.w	80007ec <__udivmoddi4+0x29c>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005e6:	1be4      	subs	r4, r4, r7
 80005e8:	2600      	movs	r6, #0
 80005ea:	b11d      	cbz	r5, 80005f4 <__udivmoddi4+0xa4>
 80005ec:	40d4      	lsrs	r4, r2
 80005ee:	2300      	movs	r3, #0
 80005f0:	e9c5 4300 	strd	r4, r3, [r5]
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	428b      	cmp	r3, r1
 80005fc:	d909      	bls.n	8000612 <__udivmoddi4+0xc2>
 80005fe:	2d00      	cmp	r5, #0
 8000600:	f000 80ef 	beq.w	80007e2 <__udivmoddi4+0x292>
 8000604:	2600      	movs	r6, #0
 8000606:	e9c5 0100 	strd	r0, r1, [r5]
 800060a:	4630      	mov	r0, r6
 800060c:	4631      	mov	r1, r6
 800060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000612:	fab3 f683 	clz	r6, r3
 8000616:	2e00      	cmp	r6, #0
 8000618:	d14a      	bne.n	80006b0 <__udivmoddi4+0x160>
 800061a:	428b      	cmp	r3, r1
 800061c:	d302      	bcc.n	8000624 <__udivmoddi4+0xd4>
 800061e:	4282      	cmp	r2, r0
 8000620:	f200 80f9 	bhi.w	8000816 <__udivmoddi4+0x2c6>
 8000624:	1a84      	subs	r4, r0, r2
 8000626:	eb61 0303 	sbc.w	r3, r1, r3
 800062a:	2001      	movs	r0, #1
 800062c:	469e      	mov	lr, r3
 800062e:	2d00      	cmp	r5, #0
 8000630:	d0e0      	beq.n	80005f4 <__udivmoddi4+0xa4>
 8000632:	e9c5 4e00 	strd	r4, lr, [r5]
 8000636:	e7dd      	b.n	80005f4 <__udivmoddi4+0xa4>
 8000638:	b902      	cbnz	r2, 800063c <__udivmoddi4+0xec>
 800063a:	deff      	udf	#255	; 0xff
 800063c:	fab2 f282 	clz	r2, r2
 8000640:	2a00      	cmp	r2, #0
 8000642:	f040 8092 	bne.w	800076a <__udivmoddi4+0x21a>
 8000646:	eba1 010c 	sub.w	r1, r1, ip
 800064a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800064e:	fa1f fe8c 	uxth.w	lr, ip
 8000652:	2601      	movs	r6, #1
 8000654:	0c20      	lsrs	r0, r4, #16
 8000656:	fbb1 f3f7 	udiv	r3, r1, r7
 800065a:	fb07 1113 	mls	r1, r7, r3, r1
 800065e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000662:	fb0e f003 	mul.w	r0, lr, r3
 8000666:	4288      	cmp	r0, r1
 8000668:	d908      	bls.n	800067c <__udivmoddi4+0x12c>
 800066a:	eb1c 0101 	adds.w	r1, ip, r1
 800066e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000672:	d202      	bcs.n	800067a <__udivmoddi4+0x12a>
 8000674:	4288      	cmp	r0, r1
 8000676:	f200 80cb 	bhi.w	8000810 <__udivmoddi4+0x2c0>
 800067a:	4643      	mov	r3, r8
 800067c:	1a09      	subs	r1, r1, r0
 800067e:	b2a4      	uxth	r4, r4
 8000680:	fbb1 f0f7 	udiv	r0, r1, r7
 8000684:	fb07 1110 	mls	r1, r7, r0, r1
 8000688:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800068c:	fb0e fe00 	mul.w	lr, lr, r0
 8000690:	45a6      	cmp	lr, r4
 8000692:	d908      	bls.n	80006a6 <__udivmoddi4+0x156>
 8000694:	eb1c 0404 	adds.w	r4, ip, r4
 8000698:	f100 31ff 	add.w	r1, r0, #4294967295
 800069c:	d202      	bcs.n	80006a4 <__udivmoddi4+0x154>
 800069e:	45a6      	cmp	lr, r4
 80006a0:	f200 80bb 	bhi.w	800081a <__udivmoddi4+0x2ca>
 80006a4:	4608      	mov	r0, r1
 80006a6:	eba4 040e 	sub.w	r4, r4, lr
 80006aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80006ae:	e79c      	b.n	80005ea <__udivmoddi4+0x9a>
 80006b0:	f1c6 0720 	rsb	r7, r6, #32
 80006b4:	40b3      	lsls	r3, r6
 80006b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80006be:	fa20 f407 	lsr.w	r4, r0, r7
 80006c2:	fa01 f306 	lsl.w	r3, r1, r6
 80006c6:	431c      	orrs	r4, r3
 80006c8:	40f9      	lsrs	r1, r7
 80006ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006ce:	fa00 f306 	lsl.w	r3, r0, r6
 80006d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80006d6:	0c20      	lsrs	r0, r4, #16
 80006d8:	fa1f fe8c 	uxth.w	lr, ip
 80006dc:	fb09 1118 	mls	r1, r9, r8, r1
 80006e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006e4:	fb08 f00e 	mul.w	r0, r8, lr
 80006e8:	4288      	cmp	r0, r1
 80006ea:	fa02 f206 	lsl.w	r2, r2, r6
 80006ee:	d90b      	bls.n	8000708 <__udivmoddi4+0x1b8>
 80006f0:	eb1c 0101 	adds.w	r1, ip, r1
 80006f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006f8:	f080 8088 	bcs.w	800080c <__udivmoddi4+0x2bc>
 80006fc:	4288      	cmp	r0, r1
 80006fe:	f240 8085 	bls.w	800080c <__udivmoddi4+0x2bc>
 8000702:	f1a8 0802 	sub.w	r8, r8, #2
 8000706:	4461      	add	r1, ip
 8000708:	1a09      	subs	r1, r1, r0
 800070a:	b2a4      	uxth	r4, r4
 800070c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000710:	fb09 1110 	mls	r1, r9, r0, r1
 8000714:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000718:	fb00 fe0e 	mul.w	lr, r0, lr
 800071c:	458e      	cmp	lr, r1
 800071e:	d908      	bls.n	8000732 <__udivmoddi4+0x1e2>
 8000720:	eb1c 0101 	adds.w	r1, ip, r1
 8000724:	f100 34ff 	add.w	r4, r0, #4294967295
 8000728:	d26c      	bcs.n	8000804 <__udivmoddi4+0x2b4>
 800072a:	458e      	cmp	lr, r1
 800072c:	d96a      	bls.n	8000804 <__udivmoddi4+0x2b4>
 800072e:	3802      	subs	r0, #2
 8000730:	4461      	add	r1, ip
 8000732:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000736:	fba0 9402 	umull	r9, r4, r0, r2
 800073a:	eba1 010e 	sub.w	r1, r1, lr
 800073e:	42a1      	cmp	r1, r4
 8000740:	46c8      	mov	r8, r9
 8000742:	46a6      	mov	lr, r4
 8000744:	d356      	bcc.n	80007f4 <__udivmoddi4+0x2a4>
 8000746:	d053      	beq.n	80007f0 <__udivmoddi4+0x2a0>
 8000748:	b15d      	cbz	r5, 8000762 <__udivmoddi4+0x212>
 800074a:	ebb3 0208 	subs.w	r2, r3, r8
 800074e:	eb61 010e 	sbc.w	r1, r1, lr
 8000752:	fa01 f707 	lsl.w	r7, r1, r7
 8000756:	fa22 f306 	lsr.w	r3, r2, r6
 800075a:	40f1      	lsrs	r1, r6
 800075c:	431f      	orrs	r7, r3
 800075e:	e9c5 7100 	strd	r7, r1, [r5]
 8000762:	2600      	movs	r6, #0
 8000764:	4631      	mov	r1, r6
 8000766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076a:	f1c2 0320 	rsb	r3, r2, #32
 800076e:	40d8      	lsrs	r0, r3
 8000770:	fa0c fc02 	lsl.w	ip, ip, r2
 8000774:	fa21 f303 	lsr.w	r3, r1, r3
 8000778:	4091      	lsls	r1, r2
 800077a:	4301      	orrs	r1, r0
 800077c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000780:	fa1f fe8c 	uxth.w	lr, ip
 8000784:	fbb3 f0f7 	udiv	r0, r3, r7
 8000788:	fb07 3610 	mls	r6, r7, r0, r3
 800078c:	0c0b      	lsrs	r3, r1, #16
 800078e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000792:	fb00 f60e 	mul.w	r6, r0, lr
 8000796:	429e      	cmp	r6, r3
 8000798:	fa04 f402 	lsl.w	r4, r4, r2
 800079c:	d908      	bls.n	80007b0 <__udivmoddi4+0x260>
 800079e:	eb1c 0303 	adds.w	r3, ip, r3
 80007a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80007a6:	d22f      	bcs.n	8000808 <__udivmoddi4+0x2b8>
 80007a8:	429e      	cmp	r6, r3
 80007aa:	d92d      	bls.n	8000808 <__udivmoddi4+0x2b8>
 80007ac:	3802      	subs	r0, #2
 80007ae:	4463      	add	r3, ip
 80007b0:	1b9b      	subs	r3, r3, r6
 80007b2:	b289      	uxth	r1, r1
 80007b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80007b8:	fb07 3316 	mls	r3, r7, r6, r3
 80007bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007c0:	fb06 f30e 	mul.w	r3, r6, lr
 80007c4:	428b      	cmp	r3, r1
 80007c6:	d908      	bls.n	80007da <__udivmoddi4+0x28a>
 80007c8:	eb1c 0101 	adds.w	r1, ip, r1
 80007cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80007d0:	d216      	bcs.n	8000800 <__udivmoddi4+0x2b0>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d914      	bls.n	8000800 <__udivmoddi4+0x2b0>
 80007d6:	3e02      	subs	r6, #2
 80007d8:	4461      	add	r1, ip
 80007da:	1ac9      	subs	r1, r1, r3
 80007dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007e0:	e738      	b.n	8000654 <__udivmoddi4+0x104>
 80007e2:	462e      	mov	r6, r5
 80007e4:	4628      	mov	r0, r5
 80007e6:	e705      	b.n	80005f4 <__udivmoddi4+0xa4>
 80007e8:	4606      	mov	r6, r0
 80007ea:	e6e3      	b.n	80005b4 <__udivmoddi4+0x64>
 80007ec:	4618      	mov	r0, r3
 80007ee:	e6f8      	b.n	80005e2 <__udivmoddi4+0x92>
 80007f0:	454b      	cmp	r3, r9
 80007f2:	d2a9      	bcs.n	8000748 <__udivmoddi4+0x1f8>
 80007f4:	ebb9 0802 	subs.w	r8, r9, r2
 80007f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007fc:	3801      	subs	r0, #1
 80007fe:	e7a3      	b.n	8000748 <__udivmoddi4+0x1f8>
 8000800:	4646      	mov	r6, r8
 8000802:	e7ea      	b.n	80007da <__udivmoddi4+0x28a>
 8000804:	4620      	mov	r0, r4
 8000806:	e794      	b.n	8000732 <__udivmoddi4+0x1e2>
 8000808:	4640      	mov	r0, r8
 800080a:	e7d1      	b.n	80007b0 <__udivmoddi4+0x260>
 800080c:	46d0      	mov	r8, sl
 800080e:	e77b      	b.n	8000708 <__udivmoddi4+0x1b8>
 8000810:	3b02      	subs	r3, #2
 8000812:	4461      	add	r1, ip
 8000814:	e732      	b.n	800067c <__udivmoddi4+0x12c>
 8000816:	4630      	mov	r0, r6
 8000818:	e709      	b.n	800062e <__udivmoddi4+0xde>
 800081a:	4464      	add	r4, ip
 800081c:	3802      	subs	r0, #2
 800081e:	e742      	b.n	80006a6 <__udivmoddi4+0x156>

08000820 <__aeabi_idiv0>:
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af02      	add	r7, sp, #8
 800082a:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800082c:	2334      	movs	r3, #52	; 0x34
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000834:	4a10      	ldr	r2, [pc, #64]	; (8000878 <tx_application_define+0x54>)
 8000836:	4911      	ldr	r1, [pc, #68]	; (800087c <tx_application_define+0x58>)
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <tx_application_define+0x5c>)
 800083a:	f011 f99d 	bl	8011b78 <_txe_byte_pool_create>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d104      	bne.n	800084e <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <tx_application_define+0x5c>)
 8000846:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f000 f821 	bl	8000890 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800084e:	2334      	movs	r3, #52	; 0x34
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <tx_application_define+0x60>)
 8000858:	490b      	ldr	r1, [pc, #44]	; (8000888 <tx_application_define+0x64>)
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <tx_application_define+0x68>)
 800085c:	f011 f98c 	bl	8011b78 <_txe_byte_pool_create>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d104      	bne.n	8000870 <tx_application_define+0x4c>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <tx_application_define+0x68>)
 8000868:	60fb      	str	r3, [r7, #12]

    if (MX_NetXDuo_Init(memory_ptr) != NX_SUCCESS)
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f012 f83c 	bl	80128e8 <MX_NetXDuo_Init>

    /* USER CODE END MX_NetXDuo_Init_Success */

  }

}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000250 	.word	0x20000250
 800087c:	08014054 	.word	0x08014054
 8000880:	20000650 	.word	0x20000650
 8000884:	20000684 	.word	0x20000684
 8000888:	08014068 	.word	0x08014068
 800088c:	20007e84 	.word	0x20007e84

08000890 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008b2:	f00e fdf1 	bl	800f498 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008c0:	f3bf 8f4f 	dsb	sy
}
 80008c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008c6:	f3bf 8f6f 	isb	sy
}
 80008ca:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <SCB_EnableICache+0x48>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008d4:	f3bf 8f4f 	dsb	sy
}
 80008d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008da:	f3bf 8f6f 	isb	sy
}
 80008de:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <SCB_EnableICache+0x48>)
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <SCB_EnableICache+0x48>)
 80008e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ec:	f3bf 8f4f 	dsb	sy
}
 80008f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
}
 80008f6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <SCB_EnableDCache+0x84>)
 8000910:	2200      	movs	r2, #0
 8000912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000916:	f3bf 8f4f 	dsb	sy
}
 800091a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <SCB_EnableDCache+0x84>)
 800091e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000922:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	0b5b      	lsrs	r3, r3, #13
 8000928:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800092c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	08db      	lsrs	r3, r3, #3
 8000932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000936:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	015a      	lsls	r2, r3, #5
 800093c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000940:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000946:	4911      	ldr	r1, [pc, #68]	; (800098c <SCB_EnableDCache+0x84>)
 8000948:	4313      	orrs	r3, r2
 800094a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	60ba      	str	r2, [r7, #8]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1ef      	bne.n	8000938 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	60fa      	str	r2, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1e5      	bne.n	800092e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000962:	f3bf 8f4f 	dsb	sy
}
 8000966:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <SCB_EnableDCache+0x84>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <SCB_EnableDCache+0x84>)
 800096e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000972:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000974:	f3bf 8f4f 	dsb	sy
}
 8000978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800097a:	f3bf 8f6f 	isb	sy
}
 800097e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000994:	f000 f980 	bl	8000c98 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000998:	f7ff ff90 	bl	80008bc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800099c:	f7ff ffb4 	bl	8000908 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f000 fe2e 	bl	8001600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f80a 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f000 f8f4 	bl	8000b94 <MX_GPIO_Init>
  MX_ETH_Init();
 80009ac:	f000 f874 	bl	8000a98 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009b0:	f000 f8c0 	bl	8000b34 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80009b4:	f7ff ff7b 	bl	80008ae <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <main+0x28>
	...

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	; 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2234      	movs	r2, #52	; 0x34
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f012 fa68 	bl	8012ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <SystemClock_Config+0xd4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a2a      	ldr	r2, [pc, #168]	; (8000a90 <SystemClock_Config+0xd4>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <SystemClock_Config+0xd4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <SystemClock_Config+0xd8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a25      	ldr	r2, [pc, #148]	; (8000a94 <SystemClock_Config+0xd8>)
 80009fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <SystemClock_Config+0xd8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a24:	2304      	movs	r3, #4
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a28:	23d8      	movs	r3, #216	; 0xd8
 8000a2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 fc53 	bl	80032e8 <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a48:	f000 f97e 	bl	8000d48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a4c:	f002 fbfc 	bl	8003248 <HAL_PWREx_EnableOverDrive>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a56:	f000 f977 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a70:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	2107      	movs	r1, #7
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 fee3 	bl	8003844 <HAL_RCC_ClockConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a84:	f000 f960 	bl	8000d48 <Error_Handler>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3750      	adds	r7, #80	; 0x50
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_ETH_Init+0x84>)
 8000a9e:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <MX_ETH_Init+0x88>)
 8000aa0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <MX_ETH_Init+0x8c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <MX_ETH_Init+0x8c>)
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_ETH_Init+0x8c>)
 8000ab0:	22e1      	movs	r2, #225	; 0xe1
 8000ab2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_ETH_Init+0x8c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_ETH_Init+0x8c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_ETH_Init+0x8c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_ETH_Init+0x84>)
 8000ac8:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <MX_ETH_Init+0x8c>)
 8000aca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_ETH_Init+0x84>)
 8000ace:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ad2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_ETH_Init+0x84>)
 8000ad6:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <MX_ETH_Init+0x90>)
 8000ad8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_ETH_Init+0x84>)
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <MX_ETH_Init+0x94>)
 8000ade:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_ETH_Init+0x84>)
 8000ae2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000ae6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_ETH_Init+0x84>)
 8000aea:	f000 ff39 	bl	8001960 <HAL_ETH_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000af4:	f000 f928 	bl	8000d48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000af8:	2238      	movs	r2, #56	; 0x38
 8000afa:	2100      	movs	r1, #0
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <MX_ETH_Init+0x98>)
 8000afe:	f012 f9cf 	bl	8012ea0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_ETH_Init+0x98>)
 8000b04:	2221      	movs	r2, #33	; 0x21
 8000b06:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_ETH_Init+0x98>)
 8000b0a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000b0e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_ETH_Init+0x98>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20007ef0 	.word	0x20007ef0
 8000b20:	40028000 	.word	0x40028000
 8000b24:	20008028 	.word	0x20008028
 8000b28:	20000194 	.word	0x20000194
 8000b2c:	200000f4 	.word	0x200000f4
 8000b30:	20007eb8 	.word	0x20007eb8

08000b34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <MX_USART3_UART_Init+0x5c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b78:	f003 ffc4 	bl	8004b04 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b82:	f000 f8e1 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20007fa0 	.word	0x20007fa0
 8000b90:	40004800 	.word	0x40004800

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000baa:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a2f      	ldr	r2, [pc, #188]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a29      	ldr	r2, [pc, #164]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <MX_GPIO_Init+0xdc>)
 8000c42:	f002 facd 	bl	80031e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8000c46:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_GPIO_Init+0xdc>)
 8000c60:	f002 f912 	bl	8002e88 <HAL_GPIO_Init>

}
 8000c64:	bf00      	nop
 8000c66:	3730      	adds	r7, #48	; 0x30
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020400 	.word	0x40020400

08000c74 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000c7c:	1d39      	adds	r1, r7, #4
 8000c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c82:	2201      	movs	r2, #1
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <__io_putchar+0x20>)
 8000c86:	f003 ff8b 	bl	8004ba0 <HAL_UART_Transmit>

  return ch;
 8000c8a:	687b      	ldr	r3, [r7, #4]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20007fa0 	.word	0x20007fa0

08000c98 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000caa:	f000 fddd 	bl	8001868 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cba:	231f      	movs	r3, #31
 8000cbc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000cbe:	2387      	movs	r3, #135	; 0x87
 8000cc0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fdfb 	bl	80018d8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20060000;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MPU_Config+0x88>)
 8000ce8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000cea:	230e      	movs	r3, #14
 8000cec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fdeb 	bl	80018d8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d02:	2302      	movs	r3, #2
 8000d04:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000d06:	2308      	movs	r3, #8
 8000d08:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fde3 	bl	80018d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d12:	2004      	movs	r0, #4
 8000d14:	f000 fdc0 	bl	8001898 <HAL_MPU_Enable>

}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20060000 	.word	0x20060000

08000d24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d101      	bne.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d36:	f000 fc71 	bl	800161c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40001000 	.word	0x40001000

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <Error_Handler+0x20>)
 8000d52:	f002 fa45 	bl	80031e0 <HAL_GPIO_WritePin>
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000d56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5a:	4803      	ldr	r0, [pc, #12]	; (8000d68 <Error_Handler+0x20>)
 8000d5c:	f002 fa59 	bl	8003212 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000d60:	20c8      	movs	r0, #200	; 0xc8
 8000d62:	f000 fc7b 	bl	800165c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000d66:	e7f6      	b.n	8000d56 <Error_Handler+0xe>
 8000d68:	40020400 	.word	0x40020400

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x44>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_MspInit+0x44>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_MspInit+0x44>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_MspInit+0x44>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_MspInit+0x44>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MspInit+0x44>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	; 0x38
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a52      	ldr	r2, [pc, #328]	; (8000f1c <HAL_ETH_MspInit+0x168>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f040 809e 	bne.w	8000f14 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000dd8:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a50      	ldr	r2, [pc, #320]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
 8000de4:	4b4e      	ldr	r3, [pc, #312]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dec:	623b      	str	r3, [r7, #32]
 8000dee:	6a3b      	ldr	r3, [r7, #32]
 8000df0:	4b4b      	ldr	r3, [pc, #300]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	4a4a      	ldr	r2, [pc, #296]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000df6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfc:	4b48      	ldr	r3, [pc, #288]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	4a44      	ldr	r2, [pc, #272]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e12:	6313      	str	r3, [r2, #48]	; 0x30
 8000e14:	4b42      	ldr	r3, [pc, #264]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	4b3f      	ldr	r3, [pc, #252]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	4a3e      	ldr	r2, [pc, #248]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	4a38      	ldr	r2, [pc, #224]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6313      	str	r3, [r2, #48]	; 0x30
 8000e44:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	4a32      	ldr	r2, [pc, #200]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e68:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a2c      	ldr	r2, [pc, #176]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <HAL_ETH_MspInit+0x16c>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e80:	2332      	movs	r3, #50	; 0x32
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e90:	230b      	movs	r3, #11
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4822      	ldr	r0, [pc, #136]	; (8000f24 <HAL_ETH_MspInit+0x170>)
 8000e9c:	f001 fff4 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ea0:	2386      	movs	r3, #134	; 0x86
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb0:	230b      	movs	r3, #11
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	481b      	ldr	r0, [pc, #108]	; (8000f28 <HAL_ETH_MspInit+0x174>)
 8000ebc:	f001 ffe4 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed2:	230b      	movs	r3, #11
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	4813      	ldr	r0, [pc, #76]	; (8000f2c <HAL_ETH_MspInit+0x178>)
 8000ede:	f001 ffd3 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ee2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef4:	230b      	movs	r3, #11
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	480c      	ldr	r0, [pc, #48]	; (8000f30 <HAL_ETH_MspInit+0x17c>)
 8000f00:	f001 ffc2 	bl	8002e88 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2107      	movs	r1, #7
 8000f08:	203d      	movs	r0, #61	; 0x3d
 8000f0a:	f000 fc83 	bl	8001814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000f0e:	203d      	movs	r0, #61	; 0x3d
 8000f10:	f000 fc9c 	bl	800184c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	3738      	adds	r7, #56	; 0x38
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40028000 	.word	0x40028000
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020800 	.word	0x40020800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40021800 	.word	0x40021800

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0ae      	sub	sp, #184	; 0xb8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2290      	movs	r2, #144	; 0x90
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f011 ffa3 	bl	8012ea0 <memset>
  if(huart->Instance==USART3)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d13c      	bne.n	8000fde <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f68:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 febe 	bl	8003cf4 <HAL_RCCEx_PeriphCLKConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f7e:	f7ff fee3 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a13      	ldr	r2, [pc, #76]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_UART_MspInit+0xbc>)
 8000fda:	f001 ff55 	bl	8002e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	37b8      	adds	r7, #184	; 0xb8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001004:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_InitTick+0xe0>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <HAL_InitTick+0xe0>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <HAL_InitTick+0xe0>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800101c:	f107 0210 	add.w	r2, r7, #16
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fe32 	bl	8003c90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	2b00      	cmp	r3, #0
 8001034:	d103      	bne.n	800103e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001036:	f002 fe03 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 800103a:	6378      	str	r0, [r7, #52]	; 0x34
 800103c:	e004      	b.n	8001048 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800103e:	f002 fdff 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8001042:	4603      	mov	r3, r0
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <HAL_InitTick+0xe4>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	0c9b      	lsrs	r3, r3, #18
 8001052:	3b01      	subs	r3, #1
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_InitTick+0xe8>)
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <HAL_InitTick+0xec>)
 800105a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_InitTick+0xe8>)
 800105e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001062:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <HAL_InitTick+0xe8>)
 8001066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001068:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_InitTick+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_InitTick+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_InitTick+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800107c:	4817      	ldr	r0, [pc, #92]	; (80010dc <HAL_InitTick+0xe8>)
 800107e:	f003 fa61 	bl	8004544 <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001088:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800108c:	2b00      	cmp	r3, #0
 800108e:	d11b      	bne.n	80010c8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001090:	4812      	ldr	r0, [pc, #72]	; (80010dc <HAL_InitTick+0xe8>)
 8001092:	f003 fab9 	bl	8004608 <HAL_TIM_Base_Start_IT>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800109c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d111      	bne.n	80010c8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010a4:	2036      	movs	r0, #54	; 0x36
 80010a6:	f000 fbd1 	bl	800184c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d808      	bhi.n	80010c2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	2036      	movs	r0, #54	; 0x36
 80010b6:	f000 fbad 	bl	8001814 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_InitTick+0xf0>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e002      	b.n	80010c8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3738      	adds	r7, #56	; 0x38
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	431bde83 	.word	0x431bde83
 80010dc:	20008030 	.word	0x20008030
 80010e0:	40001000 	.word	0x40001000
 80010e4:	20000004 	.word	0x20000004

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <TIM6_DAC_IRQHandler+0x10>)
 800111a:	f003 faed 	bl	80046f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20008030 	.word	0x20008030

08001128 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <ETH_IRQHandler+0x10>)
 800112e:	f000 ff69 	bl	8002004 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20007ef0 	.word	0x20007ef0

0800113c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
	return 1;
 8001140:	2301      	movs	r3, #1
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <_kill>:

int _kill(int pid, int sig)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001156:	f011 fe6b 	bl	8012e30 <__errno>
 800115a:	4603      	mov	r3, r0
 800115c:	2216      	movs	r2, #22
 800115e:	601a      	str	r2, [r3, #0]
	return -1;
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_exit>:

void _exit (int status)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ffe7 	bl	800114c <_kill>
	while (1) {}		/* Make sure we hang here */
 800117e:	e7fe      	b.n	800117e <_exit+0x12>

08001180 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	e00a      	b.n	80011a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001192:	f3af 8000 	nop.w
 8001196:	4601      	mov	r1, r0
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	60ba      	str	r2, [r7, #8]
 800119e:	b2ca      	uxtb	r2, r1
 80011a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3301      	adds	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	dbf0      	blt.n	8001192 <_read+0x12>
	}

return len;
 80011b0:	687b      	ldr	r3, [r7, #4]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e009      	b.n	80011e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	60ba      	str	r2, [r7, #8]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd4d 	bl	8000c74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dbf1      	blt.n	80011cc <_write+0x12>
	}
	return len;
 80011e8:	687b      	ldr	r3, [r7, #4]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <_close>:

int _close(int file)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
	return -1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800121a:	605a      	str	r2, [r3, #4]
	return 0;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <_isatty>:

int _isatty(int file)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
	return 1;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
	return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001264:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <_sbrk+0x5c>)
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <_sbrk+0x60>)
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <_sbrk+0x64>)
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <_sbrk+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800128c:	f011 fdd0 	bl	8012e30 <__errno>
 8001290:	4603      	mov	r3, r0
 8001292:	220c      	movs	r2, #12
 8001294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	e009      	b.n	80012b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <_sbrk+0x64>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20080000 	.word	0x20080000
 80012bc:	00000400 	.word	0x00000400
 80012c0:	2000807c 	.word	0x2000807c
 80012c4:	2000b1b0 	.word	0x2000b1b0

080012c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <SystemInit+0x20>)
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <SystemInit+0x20>)
 80012d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001324 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012f2:	490e      	ldr	r1, [pc, #56]	; (800132c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001308:	4c0b      	ldr	r4, [pc, #44]	; (8001338 <LoopFillZerobss+0x26>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001316:	f7ff ffd7 	bl	80012c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131a:	f011 fd8f 	bl	8012e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff fb37 	bl	8000990 <main>
  bx  lr    
 8001322:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001324:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001330:	08014408 	.word	0x08014408
  ldr r2, =_sbss
 8001334:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8001338:	2000b1ac 	.word	0x2000b1ac

0800133c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC_IRQHandler>

0800133e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <LAN8742_RegisterBusIO+0x28>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <LAN8742_RegisterBusIO+0x28>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <LAN8742_RegisterBusIO+0x28>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d102      	bne.n	800136c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e014      	b.n	8001396 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d17c      	bne.n	80014bc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2220      	movs	r2, #32
 80013d4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e01c      	b.n	8001416 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f107 0208 	add.w	r2, r7, #8
 80013e4:	2112      	movs	r1, #18
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	4798      	blx	r3
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da03      	bge.n	80013f8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80013f0:	f06f 0304 	mvn.w	r3, #4
 80013f4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80013f6:	e00b      	b.n	8001410 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	d105      	bne.n	8001410 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
         break;
 800140e:	e005      	b.n	800141c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b1f      	cmp	r3, #31
 800141a:	d9df      	bls.n	80013dc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b1f      	cmp	r3, #31
 8001422:	d902      	bls.n	800142a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001424:	f06f 0302 	mvn.w	r3, #2
 8001428:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d145      	bne.n	80014bc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6810      	ldr	r0, [r2, #0]
 8001438:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800143c:	2100      	movs	r1, #0
 800143e:	4798      	blx	r3
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	db37      	blt.n	80014b6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6810      	ldr	r0, [r2, #0]
 800144e:	f107 0208 	add.w	r2, r7, #8
 8001452:	2100      	movs	r1, #0
 8001454:	4798      	blx	r3
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	db28      	blt.n	80014ae <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4798      	blx	r3
 8001462:	4603      	mov	r3, r0
 8001464:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001466:	e01c      	b.n	80014a2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4798      	blx	r3
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800147a:	d80e      	bhi.n	800149a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6810      	ldr	r0, [r2, #0]
 8001484:	f107 0208 	add.w	r2, r7, #8
 8001488:	2100      	movs	r1, #0
 800148a:	4798      	blx	r3
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	da07      	bge.n	80014a2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001492:	f06f 0304 	mvn.w	r3, #4
 8001496:	613b      	str	r3, [r7, #16]
                 break;
 8001498:	e010      	b.n	80014bc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800149a:	f06f 0301 	mvn.w	r3, #1
 800149e:	613b      	str	r3, [r7, #16]
               break;
 80014a0:	e00c      	b.n	80014bc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1dd      	bne.n	8001468 <LAN8742_Init+0xc6>
 80014ac:	e006      	b.n	80014bc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80014ae:	f06f 0304 	mvn.w	r3, #4
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	e002      	b.n	80014bc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80014b6:	f06f 0303 	mvn.w	r3, #3
 80014ba:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d112      	bne.n	80014e8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	4798      	blx	r3
 80014c8:	4603      	mov	r3, r0
 80014ca:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80014cc:	bf00      	nop
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	4798      	blx	r3
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014e0:	d9f5      	bls.n	80014ce <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80014e8:	693b      	ldr	r3, [r7, #16]
 }
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6810      	ldr	r0, [r2, #0]
 8001506:	f107 020c 	add.w	r2, r7, #12
 800150a:	2101      	movs	r1, #1
 800150c:	4798      	blx	r3
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	da02      	bge.n	800151a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001514:	f06f 0304 	mvn.w	r3, #4
 8001518:	e06e      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6810      	ldr	r0, [r2, #0]
 8001522:	f107 020c 	add.w	r2, r7, #12
 8001526:	2101      	movs	r1, #1
 8001528:	4798      	blx	r3
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	da02      	bge.n	8001536 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001530:	f06f 0304 	mvn.w	r3, #4
 8001534:	e060      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001540:	2301      	movs	r3, #1
 8001542:	e059      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6810      	ldr	r0, [r2, #0]
 800154c:	f107 020c 	add.w	r2, r7, #12
 8001550:	2100      	movs	r1, #0
 8001552:	4798      	blx	r3
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	da02      	bge.n	8001560 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800155a:	f06f 0304 	mvn.w	r3, #4
 800155e:	e04b      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11b      	bne.n	80015a2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <LAN8742_GetLinkState+0x90>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800157e:	2302      	movs	r3, #2
 8001580:	e03a      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800158c:	2303      	movs	r3, #3
 800158e:	e033      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800159a:	2304      	movs	r3, #4
 800159c:	e02c      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800159e:	2305      	movs	r3, #5
 80015a0:	e02a      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6810      	ldr	r0, [r2, #0]
 80015aa:	f107 020c 	add.w	r2, r7, #12
 80015ae:	211f      	movs	r1, #31
 80015b0:	4798      	blx	r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da02      	bge.n	80015be <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80015b8:	f06f 0304 	mvn.w	r3, #4
 80015bc:	e01c      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80015c8:	2306      	movs	r3, #6
 80015ca:	e015      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 031c 	and.w	r3, r3, #28
 80015d2:	2b18      	cmp	r3, #24
 80015d4:	d101      	bne.n	80015da <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80015d6:	2302      	movs	r3, #2
 80015d8:	e00e      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f003 031c 	and.w	r3, r3, #28
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d101      	bne.n	80015e8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e007      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 031c 	and.w	r3, r3, #28
 80015ee:	2b14      	cmp	r3, #20
 80015f0:	d101      	bne.n	80015f6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015f2:	2304      	movs	r3, #4
 80015f4:	e000      	b.n	80015f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015f6:	2305      	movs	r3, #5
    }				
  }
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001604:	2003      	movs	r0, #3
 8001606:	f000 f8fa 	bl	80017fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160a:	200f      	movs	r0, #15
 800160c:	f7ff fcf2 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001610:	f7ff fbac 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x20>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x24>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_IncTick+0x24>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000008 	.word	0x20000008
 8001640:	20008080 	.word	0x20008080

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_GetTick+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20008080 	.word	0x20008080

0800165c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff ffee 	bl	8001644 <HAL_GetTick>
 8001668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001674:	d005      	beq.n	8001682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_Delay+0x44>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001682:	bf00      	nop
 8001684:	f7ff ffde 	bl	8001644 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	429a      	cmp	r2, r3
 8001692:	d8f7      	bhi.n	8001684 <HAL_Delay+0x28>
  {
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000008 	.word	0x20000008

080016a4 <__NVIC_SetPriorityGrouping>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <__NVIC_SetPriorityGrouping+0x40>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x40>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00
 80016e8:	05fa0000 	.word	0x05fa0000

080016ec <__NVIC_GetPriorityGrouping>:
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <__NVIC_EnableIRQ+0x38>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ff4c 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001826:	f7ff ff61 	bl	80016ec <__NVIC_GetPriorityGrouping>
 800182a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	68b9      	ldr	r1, [r7, #8]
 8001830:	6978      	ldr	r0, [r7, #20]
 8001832:	f7ff ffb1 	bl	8001798 <NVIC_EncodePriority>
 8001836:	4602      	mov	r2, r0
 8001838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff80 	bl	8001744 <__NVIC_SetPriority>
}
 8001844:	bf00      	nop
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff54 	bl	8001708 <__NVIC_EnableIRQ>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800186c:	f3bf 8f5f 	dmb	sy
}
 8001870:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <HAL_MPU_Disable+0x28>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	4a06      	ldr	r2, [pc, #24]	; (8001890 <HAL_MPU_Disable+0x28>)
 8001878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_MPU_Disable+0x2c>)
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	e000ed90 	.word	0xe000ed90

08001898 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80018a0:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <HAL_MPU_Enable+0x38>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_MPU_Enable+0x3c>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_MPU_Enable+0x3c>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80018b6:	f3bf 8f4f 	dsb	sy
}
 80018ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018bc:	f3bf 8f6f 	isb	sy
}
 80018c0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed90 	.word	0xe000ed90
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	785a      	ldrb	r2, [r3, #1]
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HAL_MPU_ConfigRegion+0x84>)
 80018e6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d029      	beq.n	8001944 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <HAL_MPU_ConfigRegion+0x84>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7b1b      	ldrb	r3, [r3, #12]
 80018fc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7adb      	ldrb	r3, [r3, #11]
 8001902:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001904:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7a9b      	ldrb	r3, [r3, #10]
 800190a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800190c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7b5b      	ldrb	r3, [r3, #13]
 8001912:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001914:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7b9b      	ldrb	r3, [r3, #14]
 800191a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800191c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7bdb      	ldrb	r3, [r3, #15]
 8001922:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001924:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7a5b      	ldrb	r3, [r3, #9]
 800192a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800192c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7a1b      	ldrb	r3, [r3, #8]
 8001932:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001934:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800193c:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800193e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001940:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001942:	e005      	b.n	8001950 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_MPU_ConfigRegion+0x84>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <HAL_MPU_ConfigRegion+0x84>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed90 	.word	0xe000ed90

08001960 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e06a      	b.n	8001a48 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001978:	2b00      	cmp	r3, #0
 800197a:	d106      	bne.n	800198a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2223      	movs	r2, #35	; 0x23
 8001980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fa15 	bl	8000db4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <HAL_ETH_Init+0xf0>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a30      	ldr	r2, [pc, #192]	; (8001a50 <HAL_ETH_Init+0xf0>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_ETH_Init+0xf0>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <HAL_ETH_Init+0xf4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4a2b      	ldr	r2, [pc, #172]	; (8001a54 <HAL_ETH_Init+0xf4>)
 80019a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019ae:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_ETH_Init+0xf4>)
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	4927      	ldr	r1, [pc, #156]	; (8001a54 <HAL_ETH_Init+0xf4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_ETH_Init+0xf4>)
 80019be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019d8:	f7ff fe34 	bl	8001644 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019de:	e011      	b.n	8001a04 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019e0:	f7ff fe30 	bl	8001644 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019ee:	d909      	bls.n	8001a04 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2204      	movs	r2, #4
 80019f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	22e0      	movs	r2, #224	; 0xe0
 80019fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e021      	b.n	8001a48 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1e4      	bne.n	80019e0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 ff92 	bl	8002940 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f001 f839 	bl	8002a94 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f001 f88f 	bl	8002b46 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2100      	movs	r1, #0
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fff7 	bl	8002a24 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2210      	movs	r2, #16
 8001a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40013800 	.word	0x40013800

08001a58 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d17b      	bne.n	8001b62 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2223      	movs	r2, #35	; 0x23
 8001a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001a86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <HAL_ETH_Start_IT+0x114>)
 8001a96:	430b      	orrs	r3, r1
 8001a98:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001aac:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f9d4 	bl	8001e64 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0208 	orr.w	r2, r2, #8
 8001aca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7ff fdc1 	bl	800165c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0204 	orr.w	r2, r2, #4
 8001af0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f7ff fdae 	bl	800165c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fdb9 	bl	8002680 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b24:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b3c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b46:	69d9      	ldr	r1, [r3, #28]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_ETH_Start_IT+0x118>)
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b54:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2223      	movs	r2, #35	; 0x23
 8001b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e000      	b.n	8001b64 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
  }
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	00020060 	.word	0x00020060
 8001b70:	0001a0c1 	.word	0x0001a0c1

08001b74 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b82:	2b23      	cmp	r3, #35	; 0x23
 8001b84:	d14a      	bne.n	8001c1c <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2223      	movs	r2, #35	; 0x23
 8001b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ba4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	f023 0302 	bic.w	r3, r3, #2
 8001bb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bbc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0204 	bic.w	r2, r2, #4
 8001bcc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f7ff fd40 	bl	800165c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fd4b 	bl	8002680 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0208 	bic.w	r2, r2, #8
 8001bf8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff fd2a 	bl	800165c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2210      	movs	r2, #16
 8001c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e000      	b.n	8001c1e <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
  }
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e045      	b.n	8001cd6 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c50:	2b23      	cmp	r3, #35	; 0x23
 8001c52:	d13f      	bne.n	8001cd4 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 ffdd 	bl	8002c20 <ETH_Prepare_Tx_Descriptors>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c72:	f043 0202 	orr.w	r2, r3, #2
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e02a      	b.n	8001cd6 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c80:	f3bf 8f4f 	dsb	sy
}
 8001c84:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d904      	bls.n	8001ca2 <HAL_ETH_Transmit_IT+0x7c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	1f1a      	subs	r2, r3, #4
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e000      	b.n	8001cd6 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
  }
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b088      	sub	sp, #32
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0a8      	b.n	8001e5c <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d10:	2b23      	cmp	r3, #35	; 0x23
 8001d12:	d001      	beq.n	8001d18 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0a1      	b.n	8001e5c <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	3212      	adds	r2, #18
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d2e:	f1c3 0304 	rsb	r3, r3, #4
 8001d32:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d34:	e06a      	b.n	8001e0c <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <HAL_ETH_ReadData+0x88>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d040      	beq.n	8001de8 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00c      	beq.n	8001daa <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0c1b      	lsrs	r3, r3, #16
 8001d96:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	f006 faf6 	bl	80083b8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	441a      	add	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3301      	adds	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d902      	bls.n	8001dfa <HAL_ETH_ReadData+0x11c>
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	3b04      	subs	r3, #4
 8001df8:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	3212      	adds	r2, #18
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db06      	blt.n	8001e22 <HAL_ETH_ReadData+0x144>
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d202      	bcs.n	8001e22 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d089      	beq.n	8001d36 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	441a      	add	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f814 	bl	8001e64 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d108      	bne.n	8001e5a <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001e70:	2301      	movs	r3, #1
 8001e72:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e78:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	3212      	adds	r2, #18
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e8a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001e8c:	e040      	b.n	8001f10 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d112      	bne.n	8001ebc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f006 fa60 	bl	8008360 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	74fb      	strb	r3, [r7, #19]
 8001eaa:	e007      	b.n	8001ebc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001ebc:	7cfb      	ldrb	r3, [r7, #19]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d026      	beq.n	8001f10 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	4a1e      	ldr	r2, [pc, #120]	; (8001f48 <ETH_UpdateDescriptor+0xe4>)
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	e003      	b.n	8001eda <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001ed8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8001eda:	f3bf 8f5f 	dmb	sy
}
 8001ede:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d902      	bls.n	8001efe <ETH_UpdateDescriptor+0x9a>
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	3b04      	subs	r3, #4
 8001efc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	3212      	adds	r2, #18
 8001f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f08:	617b      	str	r3, [r7, #20]
      desccount--;
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <ETH_UpdateDescriptor+0xb8>
 8001f16:	7cfb      	ldrb	r3, [r7, #19]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1b8      	bne.n	8001e8e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d00c      	beq.n	8001f40 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2300      	movs	r3, #0
 8001f32:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001f40:	bf00      	nop
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	800045f8 	.word	0x800045f8

08001f4c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3318      	adds	r3, #24
 8001f58:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f6a:	e03f      	b.n	8001fec <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d106      	bne.n	8001f94 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001f94:	7bbb      	ldrb	r3, [r7, #14]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d028      	beq.n	8001fec <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68d9      	ldr	r1, [r3, #12]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db1b      	blt.n	8001fe8 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f006 f999 	bl	80082f4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fe6:	e001      	b.n	8001fec <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_ETH_ReleaseTxPacket+0xac>
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1b9      	bne.n	8001f6c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b40      	cmp	r3, #64	; 0x40
 800201c:	d112      	bne.n	8002044 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202c:	2b40      	cmp	r3, #64	; 0x40
 800202e:	d109      	bne.n	8002044 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002038:	461a      	mov	r2, r3
 800203a:	4b50      	ldr	r3, [pc, #320]	; (800217c <HAL_ETH_IRQHandler+0x178>)
 800203c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f006 f9e8 	bl	8008414 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d113      	bne.n	800207e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d10a      	bne.n	800207e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002070:	461a      	mov	r2, r3
 8002072:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002076:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f006 f9e7 	bl	800844c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002090:	d14c      	bne.n	800212c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020a4:	d142      	bne.n	800212c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ac:	f043 0208 	orr.w	r2, r3, #8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c8:	d11a      	bne.n	8002100 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <HAL_ETH_IRQHandler+0x17c>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80020f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020f4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	22e0      	movs	r2, #224	; 0xe0
 80020fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80020fe:	e012      	b.n	8002126 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	f248 6380 	movw	r3, #34432	; 0x8680
 800210e:	4013      	ands	r3, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211e:	461a      	mov	r2, r3
 8002120:	f248 6380 	movw	r3, #34432	; 0x8680
 8002124:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f82e 	bl	8002188 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b08      	cmp	r3, #8
 8002138:	d10e      	bne.n	8002158 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f826 	bl	800219c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_ETH_IRQHandler+0x180>)
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002164:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_ETH_IRQHandler+0x180>)
 8002166:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800216a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f81f 	bl	80021b0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	00010040 	.word	0x00010040
 8002180:	007e2000 	.word	0x007e2000
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 031c 	and.w	r3, r3, #28
 80021e0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	02db      	lsls	r3, r3, #11
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f023 0302 	bic.w	r3, r3, #2
 8002202:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002214:	f7ff fa16 	bl	8001644 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800221a:	e00d      	b.n	8002238 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800221c:	f7ff fa12 	bl	8001644 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222a:	d301      	bcc.n	8002230 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e010      	b.n	8002252 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1ec      	bne.n	800221c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	b29b      	uxth	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 031c 	and.w	r3, r3, #28
 8002276:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	02db      	lsls	r3, r3, #11
 800227c:	b29b      	uxth	r3, r3
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	019b      	lsls	r3, r3, #6
 8002288:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b4:	f7ff f9c6 	bl	8001644 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022ba:	e00d      	b.n	80022d8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80022bc:	f7ff f9c2 	bl	8001644 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ca:	d301      	bcc.n	80022d0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e009      	b.n	80022e4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1ec      	bne.n	80022bc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0d9      	b.n	80024b4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf0c      	ite	eq
 800236e:	2301      	moveq	r3, #1
 8002370:	2300      	movne	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf14      	ite	ne
 8002388:	2301      	movne	r3, #1
 800238a:	2300      	moveq	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	bf0c      	ite	eq
 80023be:	2301      	moveq	r3, #1
 80023c0:	2300      	movne	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	b29a      	uxth	r2, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf14      	ite	ne
 8002488:	2301      	movne	r3, #1
 800248a:	2300      	moveq	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e00b      	b.n	80024ec <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d105      	bne.n	80024ea <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80024de:	6839      	ldr	r1, [r7, #0]
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f8f3 	bl	80026cc <ETH_SetMACConfig>

    return HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e000      	b.n	80024ec <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
  }
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e00b      	b.n	8002520 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250e:	2b10      	cmp	r3, #16
 8002510:	d105      	bne.n	800251e <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f989 	bl	800282c <ETH_SetDMAConfig>

    return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
  }
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 031c 	bic.w	r3, r3, #28
 800253e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002540:	f001 fb72 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8002544:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d908      	bls.n	8002560 <HAL_ETH_SetMDIOClockRange+0x38>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d804      	bhi.n	8002560 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f043 0308 	orr.w	r3, r3, #8
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e027      	b.n	80025b0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d908      	bls.n	800257a <HAL_ETH_SetMDIOClockRange+0x52>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d204      	bcs.n	800257a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f043 030c 	orr.w	r3, r3, #12
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e01a      	b.n	80025b0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d303      	bcc.n	800258a <HAL_ETH_SetMDIOClockRange+0x62>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4a11      	ldr	r2, [pc, #68]	; (80025cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d911      	bls.n	80025ae <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4a0f      	ldr	r2, [pc, #60]	; (80025cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d908      	bls.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d804      	bhi.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e005      	b.n	80025b0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e000      	b.n	80025b0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80025ae:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	611a      	str	r2, [r3, #16]
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	01312cff 	.word	0x01312cff
 80025c4:	02160ebf 	.word	0x02160ebf
 80025c8:	03938700 	.word	0x03938700
 80025cc:	05f5e0ff 	.word	0x05f5e0ff
 80025d0:	08f0d17f 	.word	0x08f0d17f

080025d4 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;
  uint32_t tmpreg1;

  if (pFilterConfig == NULL)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e044      	b.n	8002672 <HAL_ETH_SetMACFilterConfig+0x9e>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	78db      	ldrb	r3, [r3, #3]
 80025f2:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80025f4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	791b      	ldrb	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80025fc:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	7a1b      	ldrb	r3, [r3, #8]
 8002602:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8002604:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	795b      	ldrb	r3, [r3, #5]
 800260a:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 800260c:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	7a52      	ldrb	r2, [r2, #9]
 8002612:	2a00      	cmp	r2, #0
 8002614:	d101      	bne.n	800261a <HAL_ETH_SetMACFilterConfig+0x46>
 8002616:	2220      	movs	r2, #32
 8002618:	e000      	b.n	800261c <HAL_ETH_SetMACFilterConfig+0x48>
 800261a:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 800261c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	79db      	ldrb	r3, [r3, #7]
 8002622:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8002624:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	799b      	ldrb	r3, [r3, #6]
 800262a:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 800262c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	789b      	ldrb	r3, [r3, #2]
 8002632:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002634:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 800263c:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACFFR, ETH_MACFFR_MASK, filterconfig);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_ETH_SetMACFilterConfig+0xa8>)
 800264e:	4013      	ands	r3, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	68f9      	ldr	r1, [r7, #12]
 8002656:	430b      	orrs	r3, r1
 8002658:	6053      	str	r3, [r2, #4]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	60bb      	str	r3, [r7, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002662:	2001      	movs	r0, #1
 8002664:	f7fe fffa 	bl	800165c <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	7ffff800 	.word	0x7ffff800

08002680 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800269e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026a2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7fe ffd3 	bl	800165c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026c0:	6193      	str	r3, [r2, #24]
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4b51      	ldr	r3, [pc, #324]	; (8002828 <ETH_SetMACConfig+0x15c>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	7c1b      	ldrb	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <ETH_SetMACConfig+0x28>
 80026ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026f2:	e000      	b.n	80026f6 <ETH_SetMACConfig+0x2a>
 80026f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	7c5b      	ldrb	r3, [r3, #17]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <ETH_SetMACConfig+0x38>
 80026fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002702:	e000      	b.n	8002706 <ETH_SetMACConfig+0x3a>
 8002704:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002706:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800270c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	7fdb      	ldrb	r3, [r3, #31]
 8002712:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002714:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800271a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	7f92      	ldrb	r2, [r2, #30]
 8002720:	2a00      	cmp	r2, #0
 8002722:	d102      	bne.n	800272a <ETH_SetMACConfig+0x5e>
 8002724:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002728:	e000      	b.n	800272c <ETH_SetMACConfig+0x60>
 800272a:	2200      	movs	r2, #0
                        macconf->Speed |
 800272c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	7f1b      	ldrb	r3, [r3, #28]
 8002732:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002734:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800273a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	791b      	ldrb	r3, [r3, #4]
 8002740:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002742:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	f892 2020 	ldrb.w	r2, [r2, #32]
 800274a:	2a00      	cmp	r2, #0
 800274c:	d102      	bne.n	8002754 <ETH_SetMACConfig+0x88>
 800274e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002752:	e000      	b.n	8002756 <ETH_SetMACConfig+0x8a>
 8002754:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002756:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	7bdb      	ldrb	r3, [r3, #15]
 800275c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800275e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002764:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800276c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800276e:	4313      	orrs	r3, r2
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002786:	2001      	movs	r0, #1
 8002788:	f7fe ff68 	bl	800165c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80027a2:	4013      	ands	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80027b2:	2a00      	cmp	r2, #0
 80027b4:	d101      	bne.n	80027ba <ETH_SetMACConfig+0xee>
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	e000      	b.n	80027bc <ETH_SetMACConfig+0xf0>
 80027ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80027ca:	2a01      	cmp	r2, #1
 80027cc:	d101      	bne.n	80027d2 <ETH_SetMACConfig+0x106>
 80027ce:	2208      	movs	r2, #8
 80027d0:	e000      	b.n	80027d4 <ETH_SetMACConfig+0x108>
 80027d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80027d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80027dc:	2a01      	cmp	r2, #1
 80027de:	d101      	bne.n	80027e4 <ETH_SetMACConfig+0x118>
 80027e0:	2204      	movs	r2, #4
 80027e2:	e000      	b.n	80027e6 <ETH_SetMACConfig+0x11a>
 80027e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80027ee:	2a01      	cmp	r2, #1
 80027f0:	d101      	bne.n	80027f6 <ETH_SetMACConfig+0x12a>
 80027f2:	2202      	movs	r2, #2
 80027f4:	e000      	b.n	80027f8 <ETH_SetMACConfig+0x12c>
 80027f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027f8:	4313      	orrs	r3, r2
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002810:	2001      	movs	r0, #1
 8002812:	f7fe ff23 	bl	800165c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	ff20810f 	.word	0xff20810f

0800282c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4b3d      	ldr	r3, [pc, #244]	; (800293c <ETH_SetDMAConfig+0x110>)
 8002846:	4013      	ands	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	7b1b      	ldrb	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <ETH_SetDMAConfig+0x2c>
 8002852:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002856:	e000      	b.n	800285a <ETH_SetDMAConfig+0x2e>
 8002858:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	7b5b      	ldrb	r3, [r3, #13]
 800285e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002860:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	7f52      	ldrb	r2, [r2, #29]
 8002866:	2a00      	cmp	r2, #0
 8002868:	d102      	bne.n	8002870 <ETH_SetDMAConfig+0x44>
 800286a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800286e:	e000      	b.n	8002872 <ETH_SetDMAConfig+0x46>
 8002870:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002872:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	7b9b      	ldrb	r3, [r3, #14]
 8002878:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800287a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002880:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	7f1b      	ldrb	r3, [r3, #28]
 8002886:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002888:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	7f9b      	ldrb	r3, [r3, #30]
 800288e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002890:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002896:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800289e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028a0:	4313      	orrs	r3, r2
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b0:	461a      	mov	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028c2:	2001      	movs	r0, #1
 80028c4:	f7fe feca 	bl	800165c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d0:	461a      	mov	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	791b      	ldrb	r3, [r3, #4]
 80028da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80028e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80028f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002904:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800290e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002912:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002920:	2001      	movs	r0, #1
 8002922:	f7fe fe9b 	bl	800165c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	f8de3f23 	.word	0xf8de3f23

08002940 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0a6      	sub	sp, #152	; 0x98
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002954:	2300      	movs	r3, #0
 8002956:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800296a:	2301      	movs	r3, #1
 800296c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800297c:	2300      	movs	r3, #0
 800297e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002986:	2300      	movs	r3, #0
 8002988:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029a6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff fe86 	bl	80026cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80029c0:	2301      	movs	r3, #1
 80029c2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80029c4:	2301      	movs	r3, #1
 80029c6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80029c8:	2301      	movs	r3, #1
 80029ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80029ce:	2301      	movs	r3, #1
 80029d0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80029e2:	2300      	movs	r3, #0
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029ec:	2301      	movs	r3, #1
 80029ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029f4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a00:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a10:	f107 0308 	add.w	r3, r7, #8
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff08 	bl	800282c <ETH_SetDMAConfig>
}
 8002a1c:	bf00      	nop
 8002a1e:	3798      	adds	r7, #152	; 0x98
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3305      	adds	r3, #5
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	3204      	adds	r2, #4
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <ETH_MACAddressConfig+0x68>)
 8002a46:	4413      	add	r3, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3303      	adds	r3, #3
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	061a      	lsls	r2, r3, #24
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3302      	adds	r3, #2
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	041b      	lsls	r3, r3, #16
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3301      	adds	r3, #1
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	7812      	ldrb	r2, [r2, #0]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <ETH_MACAddressConfig+0x6c>)
 8002a76:	4413      	add	r3, r2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	6013      	str	r3, [r2, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40028040 	.word	0x40028040
 8002a90:	40028044 	.word	0x40028044

08002a94 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e03e      	b.n	8002b20 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68d9      	ldr	r1, [r3, #12]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	3206      	adds	r2, #6
 8002ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d80c      	bhi.n	8002b04 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68d9      	ldr	r1, [r3, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	461a      	mov	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	e004      	b.n	8002b0e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d9bd      	bls.n	8002aa2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b38:	611a      	str	r2, [r3, #16]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	e046      	b.n	8002be2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6919      	ldr	r1, [r3, #16]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2200      	movs	r2, #0
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b90:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002b98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	3212      	adds	r2, #18
 8002bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d80c      	bhi.n	8002bd2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6919      	ldr	r1, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	e004      	b.n	8002bdc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3301      	adds	r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d9b5      	bls.n	8002b54 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c12:	60da      	str	r2, [r3, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b08d      	sub	sp, #52	; 0x34
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3318      	adds	r3, #24
 8002c30:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c62:	d007      	beq.n	8002c74 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	3304      	adds	r3, #4
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002c74:	2302      	movs	r3, #2
 8002c76:	e0ff      	b.n	8002e78 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	4b7d      	ldr	r3, [pc, #500]	; (8002e84 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	6852      	ldr	r2, [r2, #4]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cfa:	f3bf 8f5f 	dmb	sy
}
 8002cfe:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d0c:	e082      	b.n	8002e14 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e005      	b.n	8002d3a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d902      	bls.n	8002d4c <ETH_Prepare_Tx_Descriptors+0x12c>
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	3b04      	subs	r3, #4
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d54:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d6e:	d007      	beq.n	8002d80 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	3304      	adds	r3, #4
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d029      	beq.n	8002dd4 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d8c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d92:	e019      	b.n	8002dc8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d94:	f3bf 8f5f 	dmb	sy
}
 8002d98:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	3301      	adds	r3, #1
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d902      	bls.n	8002db8 <ETH_Prepare_Tx_Descriptors+0x198>
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	3b04      	subs	r3, #4
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3e1      	bcc.n	8002d94 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e051      	b.n	8002e78 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	6852      	ldr	r2, [r2, #4]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e02:	f3bf 8f5f 	dmb	sy
}
 8002e06:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f47f af78 	bne.w	8002d0e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d006      	beq.n	8002e32 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e005      	b.n	8002e3e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e4e:	6979      	ldr	r1, [r7, #20]
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	3304      	adds	r3, #4
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e5e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e60:	b672      	cpsid	i
}
 8002e62:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002e72:	b662      	cpsie	i
}
 8002e74:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3734      	adds	r7, #52	; 0x34
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	ffffe000 	.word	0xffffe000

08002e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	e175      	b.n	8003194 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	f040 8164 	bne.w	800318e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d005      	beq.n	8002ede <HAL_GPIO_Init+0x56>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d130      	bne.n	8002f40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	2203      	movs	r2, #3
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f14:	2201      	movs	r2, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 0201 	and.w	r2, r3, #1
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d017      	beq.n	8002f7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	2203      	movs	r2, #3
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d123      	bne.n	8002fd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	08da      	lsrs	r2, r3, #3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3208      	adds	r2, #8
 8002f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	220f      	movs	r2, #15
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	08da      	lsrs	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3208      	adds	r2, #8
 8002fca:	69b9      	ldr	r1, [r7, #24]
 8002fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 0203 	and.w	r2, r3, #3
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 80be 	beq.w	800318e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003012:	4b66      	ldr	r3, [pc, #408]	; (80031ac <HAL_GPIO_Init+0x324>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4a65      	ldr	r2, [pc, #404]	; (80031ac <HAL_GPIO_Init+0x324>)
 8003018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800301c:	6453      	str	r3, [r2, #68]	; 0x44
 800301e:	4b63      	ldr	r3, [pc, #396]	; (80031ac <HAL_GPIO_Init+0x324>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800302a:	4a61      	ldr	r2, [pc, #388]	; (80031b0 <HAL_GPIO_Init+0x328>)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	3302      	adds	r3, #2
 8003032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	220f      	movs	r2, #15
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a58      	ldr	r2, [pc, #352]	; (80031b4 <HAL_GPIO_Init+0x32c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d037      	beq.n	80030c6 <HAL_GPIO_Init+0x23e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a57      	ldr	r2, [pc, #348]	; (80031b8 <HAL_GPIO_Init+0x330>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d031      	beq.n	80030c2 <HAL_GPIO_Init+0x23a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a56      	ldr	r2, [pc, #344]	; (80031bc <HAL_GPIO_Init+0x334>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d02b      	beq.n	80030be <HAL_GPIO_Init+0x236>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a55      	ldr	r2, [pc, #340]	; (80031c0 <HAL_GPIO_Init+0x338>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d025      	beq.n	80030ba <HAL_GPIO_Init+0x232>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a54      	ldr	r2, [pc, #336]	; (80031c4 <HAL_GPIO_Init+0x33c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01f      	beq.n	80030b6 <HAL_GPIO_Init+0x22e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a53      	ldr	r2, [pc, #332]	; (80031c8 <HAL_GPIO_Init+0x340>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d019      	beq.n	80030b2 <HAL_GPIO_Init+0x22a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a52      	ldr	r2, [pc, #328]	; (80031cc <HAL_GPIO_Init+0x344>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <HAL_GPIO_Init+0x226>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a51      	ldr	r2, [pc, #324]	; (80031d0 <HAL_GPIO_Init+0x348>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00d      	beq.n	80030aa <HAL_GPIO_Init+0x222>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a50      	ldr	r2, [pc, #320]	; (80031d4 <HAL_GPIO_Init+0x34c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d007      	beq.n	80030a6 <HAL_GPIO_Init+0x21e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4f      	ldr	r2, [pc, #316]	; (80031d8 <HAL_GPIO_Init+0x350>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <HAL_GPIO_Init+0x21a>
 800309e:	2309      	movs	r3, #9
 80030a0:	e012      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030a2:	230a      	movs	r3, #10
 80030a4:	e010      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030a6:	2308      	movs	r3, #8
 80030a8:	e00e      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030aa:	2307      	movs	r3, #7
 80030ac:	e00c      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030ae:	2306      	movs	r3, #6
 80030b0:	e00a      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030b2:	2305      	movs	r3, #5
 80030b4:	e008      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030b6:	2304      	movs	r3, #4
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030ba:	2303      	movs	r3, #3
 80030bc:	e004      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030be:	2302      	movs	r3, #2
 80030c0:	e002      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030c6:	2300      	movs	r3, #0
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	f002 0203 	and.w	r2, r2, #3
 80030ce:	0092      	lsls	r2, r2, #2
 80030d0:	4093      	lsls	r3, r2
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030d8:	4935      	ldr	r1, [pc, #212]	; (80031b0 <HAL_GPIO_Init+0x328>)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030e6:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <HAL_GPIO_Init+0x354>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800310a:	4a34      	ldr	r2, [pc, #208]	; (80031dc <HAL_GPIO_Init+0x354>)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003110:	4b32      	ldr	r3, [pc, #200]	; (80031dc <HAL_GPIO_Init+0x354>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003134:	4a29      	ldr	r2, [pc, #164]	; (80031dc <HAL_GPIO_Init+0x354>)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800313a:	4b28      	ldr	r3, [pc, #160]	; (80031dc <HAL_GPIO_Init+0x354>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800315e:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <HAL_GPIO_Init+0x354>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_GPIO_Init+0x354>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003188:	4a14      	ldr	r2, [pc, #80]	; (80031dc <HAL_GPIO_Init+0x354>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3301      	adds	r3, #1
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	2b0f      	cmp	r3, #15
 8003198:	f67f ae86 	bls.w	8002ea8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	3724      	adds	r7, #36	; 0x24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40013800 	.word	0x40013800
 80031b4:	40020000 	.word	0x40020000
 80031b8:	40020400 	.word	0x40020400
 80031bc:	40020800 	.word	0x40020800
 80031c0:	40020c00 	.word	0x40020c00
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40021400 	.word	0x40021400
 80031cc:	40021800 	.word	0x40021800
 80031d0:	40021c00 	.word	0x40021c00
 80031d4:	40022000 	.word	0x40022000
 80031d8:	40022400 	.word	0x40022400
 80031dc:	40013c00 	.word	0x40013c00

080031e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
 80031ec:	4613      	mov	r3, r2
 80031ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f0:	787b      	ldrb	r3, [r7, #1]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031fc:	e003      	b.n	8003206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	041a      	lsls	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	619a      	str	r2, [r3, #24]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003224:	887a      	ldrh	r2, [r7, #2]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4013      	ands	r3, r2
 800322a:	041a      	lsls	r2, r3, #16
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43d9      	mvns	r1, r3
 8003230:	887b      	ldrh	r3, [r7, #2]
 8003232:	400b      	ands	r3, r1
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	619a      	str	r2, [r3, #24]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003252:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	4a22      	ldr	r2, [pc, #136]	; (80032e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325c:	6413      	str	r3, [r2, #64]	; 0x40
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800326a:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1d      	ldr	r2, [pc, #116]	; (80032e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003276:	f7fe f9e5 	bl	8001644 <HAL_GetTick>
 800327a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800327c:	e009      	b.n	8003292 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800327e:	f7fe f9e1 	bl	8001644 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800328c:	d901      	bls.n	8003292 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e022      	b.n	80032d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329e:	d1ee      	bne.n	800327e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032ac:	f7fe f9ca 	bl	8001644 <HAL_GetTick>
 80032b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032b2:	e009      	b.n	80032c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032b4:	f7fe f9c6 	bl	8001644 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032c2:	d901      	bls.n	80032c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e007      	b.n	80032d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032d4:	d1ee      	bne.n	80032b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40007000 	.word	0x40007000

080032e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032f0:	2300      	movs	r3, #0
 80032f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e29b      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8087 	beq.w	800341a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800330c:	4b96      	ldr	r3, [pc, #600]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b04      	cmp	r3, #4
 8003316:	d00c      	beq.n	8003332 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003318:	4b93      	ldr	r3, [pc, #588]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b08      	cmp	r3, #8
 8003322:	d112      	bne.n	800334a <HAL_RCC_OscConfig+0x62>
 8003324:	4b90      	ldr	r3, [pc, #576]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003330:	d10b      	bne.n	800334a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003332:	4b8d      	ldr	r3, [pc, #564]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d06c      	beq.n	8003418 <HAL_RCC_OscConfig+0x130>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d168      	bne.n	8003418 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e275      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003352:	d106      	bne.n	8003362 <HAL_RCC_OscConfig+0x7a>
 8003354:	4b84      	ldr	r3, [pc, #528]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a83      	ldr	r2, [pc, #524]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 800335a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	e02e      	b.n	80033c0 <HAL_RCC_OscConfig+0xd8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0x9c>
 800336a:	4b7f      	ldr	r3, [pc, #508]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a7e      	ldr	r2, [pc, #504]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b7c      	ldr	r3, [pc, #496]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7b      	ldr	r2, [pc, #492]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 800337c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e01d      	b.n	80033c0 <HAL_RCC_OscConfig+0xd8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0xc0>
 800338e:	4b76      	ldr	r3, [pc, #472]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a75      	ldr	r2, [pc, #468]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b73      	ldr	r3, [pc, #460]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a72      	ldr	r2, [pc, #456]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0xd8>
 80033a8:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a6e      	ldr	r2, [pc, #440]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 80033ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a6b      	ldr	r2, [pc, #428]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 80033ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe f93c 	bl	8001644 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fe f938 	bl	8001644 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e229      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b61      	ldr	r3, [pc, #388]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0xe8>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fe f928 	bl	8001644 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f8:	f7fe f924 	bl	8001644 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e215      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	4b57      	ldr	r3, [pc, #348]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x110>
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d069      	beq.n	80034fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003426:	4b50      	ldr	r3, [pc, #320]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00b      	beq.n	800344a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003432:	4b4d      	ldr	r3, [pc, #308]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b08      	cmp	r3, #8
 800343c:	d11c      	bne.n	8003478 <HAL_RCC_OscConfig+0x190>
 800343e:	4b4a      	ldr	r3, [pc, #296]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d116      	bne.n	8003478 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_RCC_OscConfig+0x17a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d001      	beq.n	8003462 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e1e9      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003462:	4b41      	ldr	r3, [pc, #260]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	493d      	ldr	r1, [pc, #244]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	e040      	b.n	80034fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d023      	beq.n	80034c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003480:	4b39      	ldr	r3, [pc, #228]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a38      	ldr	r2, [pc, #224]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe f8da 	bl	8001644 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003494:	f7fe f8d6 	bl	8001644 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e1c7      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a6:	4b30      	ldr	r3, [pc, #192]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b2:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4929      	ldr	r1, [pc, #164]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
 80034c6:	e018      	b.n	80034fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c8:	4b27      	ldr	r3, [pc, #156]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a26      	ldr	r2, [pc, #152]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe f8b6 	bl	8001644 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034dc:	f7fe f8b2 	bl	8001644 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e1a3      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d038      	beq.n	8003578 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d019      	beq.n	8003542 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350e:	4b16      	ldr	r3, [pc, #88]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003512:	4a15      	ldr	r2, [pc, #84]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351a:	f7fe f893 	bl	8001644 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003522:	f7fe f88f 	bl	8001644 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e180      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x23a>
 8003540:	e01a      	b.n	8003578 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003546:	4a08      	ldr	r2, [pc, #32]	; (8003568 <HAL_RCC_OscConfig+0x280>)
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fe f879 	bl	8001644 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	e00a      	b.n	800356c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003556:	f7fe f875 	bl	8001644 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d903      	bls.n	800356c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e166      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
 8003568:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356c:	4b92      	ldr	r3, [pc, #584]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 800356e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ee      	bne.n	8003556 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80a4 	beq.w	80036ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003586:	4b8c      	ldr	r3, [pc, #560]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10d      	bne.n	80035ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003592:	4b89      	ldr	r3, [pc, #548]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a88      	ldr	r2, [pc, #544]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b86      	ldr	r3, [pc, #536]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ae:	4b83      	ldr	r3, [pc, #524]	; (80037bc <HAL_RCC_OscConfig+0x4d4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d118      	bne.n	80035ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035ba:	4b80      	ldr	r3, [pc, #512]	; (80037bc <HAL_RCC_OscConfig+0x4d4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7f      	ldr	r2, [pc, #508]	; (80037bc <HAL_RCC_OscConfig+0x4d4>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c6:	f7fe f83d 	bl	8001644 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ce:	f7fe f839 	bl	8001644 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b64      	cmp	r3, #100	; 0x64
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e12a      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e0:	4b76      	ldr	r3, [pc, #472]	; (80037bc <HAL_RCC_OscConfig+0x4d4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x31a>
 80035f4:	4b70      	ldr	r3, [pc, #448]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	4a6f      	ldr	r2, [pc, #444]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003600:	e02d      	b.n	800365e <HAL_RCC_OscConfig+0x376>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x33c>
 800360a:	4b6b      	ldr	r3, [pc, #428]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a6a      	ldr	r2, [pc, #424]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
 8003616:	4b68      	ldr	r3, [pc, #416]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	4a67      	ldr	r2, [pc, #412]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 800361c:	f023 0304 	bic.w	r3, r3, #4
 8003620:	6713      	str	r3, [r2, #112]	; 0x70
 8003622:	e01c      	b.n	800365e <HAL_RCC_OscConfig+0x376>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b05      	cmp	r3, #5
 800362a:	d10c      	bne.n	8003646 <HAL_RCC_OscConfig+0x35e>
 800362c:	4b62      	ldr	r3, [pc, #392]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	4a61      	ldr	r2, [pc, #388]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003632:	f043 0304 	orr.w	r3, r3, #4
 8003636:	6713      	str	r3, [r2, #112]	; 0x70
 8003638:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	4a5e      	ldr	r2, [pc, #376]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6713      	str	r3, [r2, #112]	; 0x70
 8003644:	e00b      	b.n	800365e <HAL_RCC_OscConfig+0x376>
 8003646:	4b5c      	ldr	r3, [pc, #368]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4a5b      	ldr	r2, [pc, #364]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	6713      	str	r3, [r2, #112]	; 0x70
 8003652:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	4a58      	ldr	r2, [pc, #352]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003658:	f023 0304 	bic.w	r3, r3, #4
 800365c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d015      	beq.n	8003692 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fd ffed 	bl	8001644 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fd ffe9 	bl	8001644 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e0d8      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	4b4c      	ldr	r3, [pc, #304]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ee      	beq.n	800366e <HAL_RCC_OscConfig+0x386>
 8003690:	e014      	b.n	80036bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fd ffd7 	bl	8001644 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fd ffd3 	bl	8001644 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0c2      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ee      	bne.n	800369a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d105      	bne.n	80036ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c2:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 80036c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80ae 	beq.w	8003834 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d8:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d06d      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d14b      	bne.n	8003784 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ec:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a31      	ldr	r2, [pc, #196]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fd ffa4 	bl	8001644 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003700:	f7fd ffa0 	bl	8001644 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e091      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	019b      	lsls	r3, r3, #6
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	3b01      	subs	r3, #1
 8003738:	041b      	lsls	r3, r3, #16
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	061b      	lsls	r3, r3, #24
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	071b      	lsls	r3, r3, #28
 800374a:	491b      	ldr	r1, [pc, #108]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fd ff72 	bl	8001644 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003764:	f7fd ff6e 	bl	8001644 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e05f      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x47c>
 8003782:	e057      	b.n	8003834 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 800378a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fd ff58 	bl	8001644 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003798:	f7fd ff54 	bl	8001644 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e045      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <HAL_RCC_OscConfig+0x4d0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x4b0>
 80037b6:	e03d      	b.n	8003834 <HAL_RCC_OscConfig+0x54c>
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037c0:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <HAL_RCC_OscConfig+0x558>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d030      	beq.n	8003830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d129      	bne.n	8003830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d122      	bne.n	8003830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037f0:	4013      	ands	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d119      	bne.n	8003830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	3b01      	subs	r3, #1
 800380a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d10f      	bne.n	8003830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d107      	bne.n	8003830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800

08003844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0d0      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800385c:	4b6a      	ldr	r3, [pc, #424]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d910      	bls.n	800388c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b67      	ldr	r3, [pc, #412]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 020f 	bic.w	r2, r3, #15
 8003872:	4965      	ldr	r1, [pc, #404]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b63      	ldr	r3, [pc, #396]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0b8      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a4:	4b59      	ldr	r3, [pc, #356]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4a58      	ldr	r2, [pc, #352]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80038aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038bc:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a52      	ldr	r2, [pc, #328]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c8:	4b50      	ldr	r3, [pc, #320]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	494d      	ldr	r1, [pc, #308]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d040      	beq.n	8003968 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d115      	bne.n	8003926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e07f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003906:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e073      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003916:	4b3d      	ldr	r3, [pc, #244]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e06b      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003926:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f023 0203 	bic.w	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4936      	ldr	r1, [pc, #216]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	4313      	orrs	r3, r2
 8003936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003938:	f7fd fe84 	bl	8001644 <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	e00a      	b.n	8003956 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003940:	f7fd fe80 	bl	8001644 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	; 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e053      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	4b2d      	ldr	r3, [pc, #180]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 020c 	and.w	r2, r3, #12
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	429a      	cmp	r2, r3
 8003966:	d1eb      	bne.n	8003940 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003968:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d210      	bcs.n	8003998 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 020f 	bic.w	r2, r3, #15
 800397e:	4922      	ldr	r1, [pc, #136]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e032      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4916      	ldr	r1, [pc, #88]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	490e      	ldr	r1, [pc, #56]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039d6:	f000 f821 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	490a      	ldr	r1, [pc, #40]	; (8003a10 <HAL_RCC_ClockConfig+0x1cc>)
 80039e8:	5ccb      	ldrb	r3, [r1, r3]
 80039ea:	fa22 f303 	lsr.w	r3, r2, r3
 80039ee:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <HAL_RCC_ClockConfig+0x1d0>)
 80039f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1d4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd fafc 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023c00 	.word	0x40023c00
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	08014298 	.word	0x08014298
 8003a14:	20000000 	.word	0x20000000
 8003a18:	20000004 	.word	0x20000004

08003a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a20:	b094      	sub	sp, #80	; 0x50
 8003a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	647b      	str	r3, [r7, #68]	; 0x44
 8003a28:	2300      	movs	r3, #0
 8003a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a34:	4b79      	ldr	r3, [pc, #484]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 030c 	and.w	r3, r3, #12
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d00d      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x40>
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	f200 80e1 	bhi.w	8003c08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x34>
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a4e:	e0db      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4b73      	ldr	r3, [pc, #460]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a54:	e0db      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a56:	4b73      	ldr	r3, [pc, #460]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a5a:	e0d8      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a5c:	4b6f      	ldr	r3, [pc, #444]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a64:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a66:	4b6d      	ldr	r3, [pc, #436]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d063      	beq.n	8003b3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a72:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	2200      	movs	r2, #0
 8003a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a84:	633b      	str	r3, [r7, #48]	; 0x30
 8003a86:	2300      	movs	r3, #0
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
 8003a8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a8e:	4622      	mov	r2, r4
 8003a90:	462b      	mov	r3, r5
 8003a92:	f04f 0000 	mov.w	r0, #0
 8003a96:	f04f 0100 	mov.w	r1, #0
 8003a9a:	0159      	lsls	r1, r3, #5
 8003a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa0:	0150      	lsls	r0, r2, #5
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	1a51      	subs	r1, r2, r1
 8003aaa:	6139      	str	r1, [r7, #16]
 8003aac:	4629      	mov	r1, r5
 8003aae:	eb63 0301 	sbc.w	r3, r3, r1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac0:	4659      	mov	r1, fp
 8003ac2:	018b      	lsls	r3, r1, #6
 8003ac4:	4651      	mov	r1, sl
 8003ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aca:	4651      	mov	r1, sl
 8003acc:	018a      	lsls	r2, r1, #6
 8003ace:	4651      	mov	r1, sl
 8003ad0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ad4:	4659      	mov	r1, fp
 8003ad6:	eb63 0901 	sbc.w	r9, r3, r1
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aee:	4690      	mov	r8, r2
 8003af0:	4699      	mov	r9, r3
 8003af2:	4623      	mov	r3, r4
 8003af4:	eb18 0303 	adds.w	r3, r8, r3
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	462b      	mov	r3, r5
 8003afc:	eb49 0303 	adc.w	r3, r9, r3
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b0e:	4629      	mov	r1, r5
 8003b10:	024b      	lsls	r3, r1, #9
 8003b12:	4621      	mov	r1, r4
 8003b14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b18:	4621      	mov	r1, r4
 8003b1a:	024a      	lsls	r2, r1, #9
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b22:	2200      	movs	r2, #0
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b2c:	f7fc fcf8 	bl	8000520 <__aeabi_uldivmod>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4613      	mov	r3, r2
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b38:	e058      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3a:	4b38      	ldr	r3, [pc, #224]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	099b      	lsrs	r3, r3, #6
 8003b40:	2200      	movs	r2, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	4611      	mov	r1, r2
 8003b46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	f04f 0000 	mov.w	r0, #0
 8003b5c:	f04f 0100 	mov.w	r1, #0
 8003b60:	0159      	lsls	r1, r3, #5
 8003b62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b66:	0150      	lsls	r0, r2, #5
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b72:	4649      	mov	r1, r9
 8003b74:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b8c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b90:	eb63 050b 	sbc.w	r5, r3, fp
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	00eb      	lsls	r3, r5, #3
 8003b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba2:	00e2      	lsls	r2, r4, #3
 8003ba4:	4614      	mov	r4, r2
 8003ba6:	461d      	mov	r5, r3
 8003ba8:	4643      	mov	r3, r8
 8003baa:	18e3      	adds	r3, r4, r3
 8003bac:	603b      	str	r3, [r7, #0]
 8003bae:	464b      	mov	r3, r9
 8003bb0:	eb45 0303 	adc.w	r3, r5, r3
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	028b      	lsls	r3, r1, #10
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bcc:	4621      	mov	r1, r4
 8003bce:	028a      	lsls	r2, r1, #10
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	61fa      	str	r2, [r7, #28]
 8003bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be0:	f7fc fc9e 	bl	8000520 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c06:	e002      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3750      	adds	r7, #80	; 0x50
 8003c14:	46bd      	mov	sp, r7
 8003c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	00f42400 	.word	0x00f42400
 8003c24:	007a1200 	.word	0x007a1200

08003c28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000000 	.word	0x20000000

08003c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c44:	f7ff fff0 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	0a9b      	lsrs	r3, r3, #10
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4903      	ldr	r1, [pc, #12]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40023800 	.word	0x40023800
 8003c64:	080142a8 	.word	0x080142a8

08003c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c6c:	f7ff ffdc 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	0b5b      	lsrs	r3, r3, #13
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	4903      	ldr	r1, [pc, #12]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	080142a8 	.word	0x080142a8

08003c90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ca0:	4b12      	ldr	r3, [pc, #72]	; (8003cec <HAL_RCC_GetClockConfig+0x5c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0203 	and.w	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_RCC_GetClockConfig+0x5c>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <HAL_RCC_GetClockConfig+0x5c>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <HAL_RCC_GetClockConfig+0x5c>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cd2:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <HAL_RCC_GetClockConfig+0x60>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 020f 	and.w	r2, r3, #15
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	601a      	str	r2, [r3, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40023c00 	.word	0x40023c00

08003cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d012      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d1c:	4b69      	ldr	r3, [pc, #420]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a68      	ldr	r2, [pc, #416]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d26:	6093      	str	r3, [r2, #8]
 8003d28:	4b66      	ldr	r3, [pc, #408]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d30:	4964      	ldr	r1, [pc, #400]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d017      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d4e:	4b5d      	ldr	r3, [pc, #372]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	4959      	ldr	r1, [pc, #356]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d017      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d8a:	4b4e      	ldr	r3, [pc, #312]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	494a      	ldr	r1, [pc, #296]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da8:	d101      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003db6:	2301      	movs	r3, #1
 8003db8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 808b 	beq.w	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dd8:	4b3a      	ldr	r3, [pc, #232]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	4a39      	ldr	r2, [pc, #228]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de2:	6413      	str	r3, [r2, #64]	; 0x40
 8003de4:	4b37      	ldr	r3, [pc, #220]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003df0:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a34      	ldr	r2, [pc, #208]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfc:	f7fd fc22 	bl	8001644 <HAL_GetTick>
 8003e00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e04:	f7fd fc1e 	bl	8001644 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e38f      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e16:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e22:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d035      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d02e      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e40:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e56:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	4a1a      	ldr	r2, [pc, #104]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e62:	4a18      	ldr	r2, [pc, #96]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e68:	4b16      	ldr	r3, [pc, #88]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d114      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd fbe6 	bl	8001644 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fd fbe2 	bl	8001644 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e351      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ee      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eaa:	d111      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003eba:	400b      	ands	r3, r1
 8003ebc:	4901      	ldr	r1, [pc, #4]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]
 8003ec2:	e00b      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	0ffffcff 	.word	0x0ffffcff
 8003ed0:	4bac      	ldr	r3, [pc, #688]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4aab      	ldr	r2, [pc, #684]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003eda:	6093      	str	r3, [r2, #8]
 8003edc:	4ba9      	ldr	r3, [pc, #676]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee8:	49a6      	ldr	r1, [pc, #664]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d010      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003efa:	4ba2      	ldr	r3, [pc, #648]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f00:	4aa0      	ldr	r2, [pc, #640]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f0a:	4b9e      	ldr	r3, [pc, #632]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	499b      	ldr	r1, [pc, #620]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f28:	4b96      	ldr	r3, [pc, #600]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f36:	4993      	ldr	r1, [pc, #588]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f4a:	4b8e      	ldr	r3, [pc, #568]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f58:	498a      	ldr	r1, [pc, #552]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f6c:	4b85      	ldr	r3, [pc, #532]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f7a:	4982      	ldr	r1, [pc, #520]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f8e:	4b7d      	ldr	r3, [pc, #500]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	4979      	ldr	r1, [pc, #484]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fb0:	4b74      	ldr	r3, [pc, #464]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	4971      	ldr	r1, [pc, #452]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fd2:	4b6c      	ldr	r3, [pc, #432]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	f023 020c 	bic.w	r2, r3, #12
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe0:	4968      	ldr	r1, [pc, #416]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ff4:	4b63      	ldr	r3, [pc, #396]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004002:	4960      	ldr	r1, [pc, #384]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004016:	4b5b      	ldr	r3, [pc, #364]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004024:	4957      	ldr	r1, [pc, #348]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004038:	4b52      	ldr	r3, [pc, #328]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	494f      	ldr	r1, [pc, #316]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800405a:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	4946      	ldr	r1, [pc, #280]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800407c:	4b41      	ldr	r3, [pc, #260]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408a:	493e      	ldr	r1, [pc, #248]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800409e:	4b39      	ldr	r3, [pc, #228]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ac:	4935      	ldr	r1, [pc, #212]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040c0:	4b30      	ldr	r3, [pc, #192]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ce:	492d      	ldr	r1, [pc, #180]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d011      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040e2:	4b28      	ldr	r3, [pc, #160]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f0:	4924      	ldr	r1, [pc, #144]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004100:	d101      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004102:	2301      	movs	r3, #1
 8004104:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004112:	2301      	movs	r3, #1
 8004114:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004122:	4b18      	ldr	r3, [pc, #96]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004130:	4914      	ldr	r1, [pc, #80]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00b      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004154:	490b      	ldr	r1, [pc, #44]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00f      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004178:	4902      	ldr	r1, [pc, #8]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004180:	e002      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004182:	bf00      	nop
 8004184:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004194:	4b8a      	ldr	r3, [pc, #552]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800419a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	4986      	ldr	r1, [pc, #536]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041b8:	4b81      	ldr	r3, [pc, #516]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c8:	497d      	ldr	r1, [pc, #500]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d006      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80d6 	beq.w	8004390 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041e4:	4b76      	ldr	r3, [pc, #472]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a75      	ldr	r2, [pc, #468]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f0:	f7fd fa28 	bl	8001644 <HAL_GetTick>
 80041f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041f8:	f7fd fa24 	bl	8001644 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b64      	cmp	r3, #100	; 0x64
 8004204:	d901      	bls.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e195      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800420a:	4b6d      	ldr	r3, [pc, #436]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d021      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004226:	2b00      	cmp	r3, #0
 8004228:	d11d      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800422a:	4b65      	ldr	r3, [pc, #404]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004238:	4b61      	ldr	r3, [pc, #388]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800423a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423e:	0e1b      	lsrs	r3, r3, #24
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	019a      	lsls	r2, r3, #6
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	041b      	lsls	r3, r3, #16
 8004250:	431a      	orrs	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	061b      	lsls	r3, r3, #24
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	071b      	lsls	r3, r3, #28
 800425e:	4958      	ldr	r1, [pc, #352]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004284:	2b00      	cmp	r3, #0
 8004286:	d02e      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004290:	d129      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004292:	4b4b      	ldr	r3, [pc, #300]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042a0:	4b47      	ldr	r3, [pc, #284]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a6:	0f1b      	lsrs	r3, r3, #28
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	019a      	lsls	r2, r3, #6
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	061b      	lsls	r3, r3, #24
 80042c0:	431a      	orrs	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	071b      	lsls	r3, r3, #28
 80042c6:	493e      	ldr	r1, [pc, #248]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042ce:	4b3c      	ldr	r3, [pc, #240]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d4:	f023 021f 	bic.w	r2, r3, #31
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	3b01      	subs	r3, #1
 80042de:	4938      	ldr	r1, [pc, #224]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01d      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042f2:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f8:	0e1b      	lsrs	r3, r3, #24
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004300:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004306:	0f1b      	lsrs	r3, r3, #28
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	019a      	lsls	r2, r3, #6
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	041b      	lsls	r3, r3, #16
 800431a:	431a      	orrs	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	061b      	lsls	r3, r3, #24
 8004320:	431a      	orrs	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	071b      	lsls	r3, r3, #28
 8004326:	4926      	ldr	r1, [pc, #152]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d011      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	019a      	lsls	r2, r3, #6
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	071b      	lsls	r3, r3, #28
 8004356:	491a      	ldr	r1, [pc, #104]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800435e:	4b18      	ldr	r3, [pc, #96]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004364:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436a:	f7fd f96b 	bl	8001644 <HAL_GetTick>
 800436e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004372:	f7fd f967 	bl	8001644 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b64      	cmp	r3, #100	; 0x64
 800437e:	d901      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e0d8      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b01      	cmp	r3, #1
 8004394:	f040 80ce 	bne.w	8004534 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a4:	f7fd f94e 	bl	8001644 <HAL_GetTick>
 80043a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043aa:	e00b      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043ac:	f7fd f94a 	bl	8001644 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d904      	bls.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e0bb      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043c4:	4b5e      	ldr	r3, [pc, #376]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043d0:	d0ec      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d02e      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d12a      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043fa:	4b51      	ldr	r3, [pc, #324]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004408:	4b4d      	ldr	r3, [pc, #308]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	0f1b      	lsrs	r3, r3, #28
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	019a      	lsls	r2, r3, #6
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	041b      	lsls	r3, r3, #16
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	061b      	lsls	r3, r3, #24
 8004428:	431a      	orrs	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	071b      	lsls	r3, r3, #28
 800442e:	4944      	ldr	r1, [pc, #272]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004436:	4b42      	ldr	r3, [pc, #264]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800443c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	3b01      	subs	r3, #1
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	493d      	ldr	r1, [pc, #244]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d022      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004464:	d11d      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004466:	4b36      	ldr	r3, [pc, #216]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	0e1b      	lsrs	r3, r3, #24
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004474:	4b32      	ldr	r3, [pc, #200]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	0f1b      	lsrs	r3, r3, #28
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	019a      	lsls	r2, r3, #6
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	041b      	lsls	r3, r3, #16
 800448e:	431a      	orrs	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	431a      	orrs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	071b      	lsls	r3, r3, #28
 800449a:	4929      	ldr	r1, [pc, #164]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d028      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044ae:	4b24      	ldr	r3, [pc, #144]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	0e1b      	lsrs	r3, r3, #24
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044bc:	4b20      	ldr	r3, [pc, #128]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	0c1b      	lsrs	r3, r3, #16
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	019a      	lsls	r2, r3, #6
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	041b      	lsls	r3, r3, #16
 80044d4:	431a      	orrs	r2, r3
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	071b      	lsls	r3, r3, #28
 80044e2:	4917      	ldr	r1, [pc, #92]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044ea:	4b15      	ldr	r3, [pc, #84]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	4911      	ldr	r1, [pc, #68]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0e      	ldr	r2, [pc, #56]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450c:	f7fd f89a 	bl	8001644 <HAL_GetTick>
 8004510:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004514:	f7fd f896 	bl	8001644 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e007      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800452e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004532:	d1ef      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800

08004544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e049      	b.n	80045ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f841 	bl	80045f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f000 fa00 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d001      	beq.n	8004620 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e054      	b.n	80046ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a26      	ldr	r2, [pc, #152]	; (80046d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464a:	d01d      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <HAL_TIM_Base_Start_IT+0xd4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a21      	ldr	r2, [pc, #132]	; (80046e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1f      	ldr	r2, [pc, #124]	; (80046e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <HAL_TIM_Base_Start_IT+0xe4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x80>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d115      	bne.n	80046b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <HAL_TIM_Base_Start_IT+0xec>)
 8004690:	4013      	ands	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d015      	beq.n	80046c6 <HAL_TIM_Base_Start_IT+0xbe>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a0:	d011      	beq.n	80046c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	e008      	b.n	80046c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	e000      	b.n	80046c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00
 80046e8:	40010400 	.word	0x40010400
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40001800 	.word	0x40001800
 80046f4:	00010007 	.word	0x00010007

080046f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d122      	bne.n	8004754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d11b      	bne.n	8004754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0202 	mvn.w	r2, #2
 8004724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f905 	bl	800494a <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8f7 	bl	8004936 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f908 	bl	800495e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b04      	cmp	r3, #4
 8004760:	d122      	bne.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d11b      	bne.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0204 	mvn.w	r2, #4
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8db 	bl	800494a <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f8cd 	bl	8004936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f8de 	bl	800495e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d122      	bne.n	80047fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d11b      	bne.n	80047fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0208 	mvn.w	r2, #8
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2204      	movs	r2, #4
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f8b1 	bl	800494a <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f8a3 	bl	8004936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f8b4 	bl	800495e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b10      	cmp	r3, #16
 8004808:	d122      	bne.n	8004850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b10      	cmp	r3, #16
 8004816:	d11b      	bne.n	8004850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0210 	mvn.w	r2, #16
 8004820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2208      	movs	r2, #8
 8004826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f887 	bl	800494a <HAL_TIM_IC_CaptureCallback>
 800483c:	e005      	b.n	800484a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f879 	bl	8004936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f88a 	bl	800495e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d10e      	bne.n	800487c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b01      	cmp	r3, #1
 800486a:	d107      	bne.n	800487c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0201 	mvn.w	r2, #1
 8004874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fa54 	bl	8000d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	2b80      	cmp	r3, #128	; 0x80
 8004888:	d10e      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d107      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f91a 	bl	8004adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	d10e      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c2:	2b80      	cmp	r3, #128	; 0x80
 80048c4:	d107      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f90d 	bl	8004af0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	d10e      	bne.n	8004902 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d107      	bne.n	8004902 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f838 	bl	8004972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b20      	cmp	r3, #32
 800490e:	d10e      	bne.n	800492e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b20      	cmp	r3, #32
 800491c:	d107      	bne.n	800492e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f06f 0220 	mvn.w	r2, #32
 8004926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f8cd 	bl	8004ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a40      	ldr	r2, [pc, #256]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3d      	ldr	r2, [pc, #244]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3c      	ldr	r2, [pc, #240]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3b      	ldr	r2, [pc, #236]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3a      	ldr	r2, [pc, #232]	; (8004aac <TIM_Base_SetConfig+0x124>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d027      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2c      	ldr	r2, [pc, #176]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d023      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2a      	ldr	r2, [pc, #168]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a29      	ldr	r2, [pc, #164]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d017      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a28      	ldr	r2, [pc, #160]	; (8004ab0 <TIM_Base_SetConfig+0x128>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <TIM_Base_SetConfig+0x12c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <TIM_Base_SetConfig+0x130>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a25      	ldr	r2, [pc, #148]	; (8004abc <TIM_Base_SetConfig+0x134>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <TIM_Base_SetConfig+0x138>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <TIM_Base_SetConfig+0x13c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0xf8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800
 8004abc:	40001800 	.word	0x40001800
 8004ac0:	40001c00 	.word	0x40001c00
 8004ac4:	40002000 	.word	0x40002000

08004ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e040      	b.n	8004b98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc fa04 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2224      	movs	r2, #36	; 0x24
 8004b30:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8b0 	bl	8004ca8 <UART_SetConfig>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e022      	b.n	8004b98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fb08 	bl	8005170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fb8f 	bl	80052b4 <UART_CheckIdleState>
 8004b96:	4603      	mov	r3, r0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08a      	sub	sp, #40	; 0x28
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	4613      	mov	r3, r2
 8004bae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d171      	bne.n	8004c9c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_UART_Transmit+0x24>
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e06a      	b.n	8004c9e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2221      	movs	r2, #33	; 0x21
 8004bd4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bd6:	f7fc fd35 	bl	8001644 <HAL_GetTick>
 8004bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf4:	d108      	bne.n	8004c08 <HAL_UART_Transmit+0x68>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d104      	bne.n	8004c08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	e003      	b.n	8004c10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c10:	e02c      	b.n	8004c6c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2180      	movs	r1, #128	; 0x80
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 fb96 	bl	800534e <UART_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e038      	b.n	8004c9e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	3302      	adds	r3, #2
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	e007      	b.n	8004c5a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	781a      	ldrb	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	3301      	adds	r3, #1
 8004c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1cc      	bne.n	8004c12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2140      	movs	r1, #64	; 0x40
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fb63 	bl	800534e <UART_WaitOnFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e005      	b.n	8004c9e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4ba6      	ldr	r3, [pc, #664]	; (8004f6c <UART_SetConfig+0x2c4>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	6979      	ldr	r1, [r7, #20]
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a94      	ldr	r2, [pc, #592]	; (8004f70 <UART_SetConfig+0x2c8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d120      	bne.n	8004d66 <UART_SetConfig+0xbe>
 8004d24:	4b93      	ldr	r3, [pc, #588]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d816      	bhi.n	8004d60 <UART_SetConfig+0xb8>
 8004d32:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <UART_SetConfig+0x90>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004d55 	.word	0x08004d55
 8004d40:	08004d4f 	.word	0x08004d4f
 8004d44:	08004d5b 	.word	0x08004d5b
 8004d48:	2301      	movs	r3, #1
 8004d4a:	77fb      	strb	r3, [r7, #31]
 8004d4c:	e150      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	77fb      	strb	r3, [r7, #31]
 8004d52:	e14d      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004d54:	2304      	movs	r3, #4
 8004d56:	77fb      	strb	r3, [r7, #31]
 8004d58:	e14a      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004d5a:	2308      	movs	r3, #8
 8004d5c:	77fb      	strb	r3, [r7, #31]
 8004d5e:	e147      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004d60:	2310      	movs	r3, #16
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e144      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a83      	ldr	r2, [pc, #524]	; (8004f78 <UART_SetConfig+0x2d0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d132      	bne.n	8004dd6 <UART_SetConfig+0x12e>
 8004d70:	4b80      	ldr	r3, [pc, #512]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	2b0c      	cmp	r3, #12
 8004d7c:	d828      	bhi.n	8004dd0 <UART_SetConfig+0x128>
 8004d7e:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0xdc>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004db9 	.word	0x08004db9
 8004d88:	08004dd1 	.word	0x08004dd1
 8004d8c:	08004dd1 	.word	0x08004dd1
 8004d90:	08004dd1 	.word	0x08004dd1
 8004d94:	08004dc5 	.word	0x08004dc5
 8004d98:	08004dd1 	.word	0x08004dd1
 8004d9c:	08004dd1 	.word	0x08004dd1
 8004da0:	08004dd1 	.word	0x08004dd1
 8004da4:	08004dbf 	.word	0x08004dbf
 8004da8:	08004dd1 	.word	0x08004dd1
 8004dac:	08004dd1 	.word	0x08004dd1
 8004db0:	08004dd1 	.word	0x08004dd1
 8004db4:	08004dcb 	.word	0x08004dcb
 8004db8:	2300      	movs	r3, #0
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e118      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	77fb      	strb	r3, [r7, #31]
 8004dc2:	e115      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	77fb      	strb	r3, [r7, #31]
 8004dc8:	e112      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004dca:	2308      	movs	r3, #8
 8004dcc:	77fb      	strb	r3, [r7, #31]
 8004dce:	e10f      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e10c      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a68      	ldr	r2, [pc, #416]	; (8004f7c <UART_SetConfig+0x2d4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d120      	bne.n	8004e22 <UART_SetConfig+0x17a>
 8004de0:	4b64      	ldr	r3, [pc, #400]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dea:	2b30      	cmp	r3, #48	; 0x30
 8004dec:	d013      	beq.n	8004e16 <UART_SetConfig+0x16e>
 8004dee:	2b30      	cmp	r3, #48	; 0x30
 8004df0:	d814      	bhi.n	8004e1c <UART_SetConfig+0x174>
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d009      	beq.n	8004e0a <UART_SetConfig+0x162>
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	d810      	bhi.n	8004e1c <UART_SetConfig+0x174>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <UART_SetConfig+0x15c>
 8004dfe:	2b10      	cmp	r3, #16
 8004e00:	d006      	beq.n	8004e10 <UART_SetConfig+0x168>
 8004e02:	e00b      	b.n	8004e1c <UART_SetConfig+0x174>
 8004e04:	2300      	movs	r3, #0
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e0f2      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e0ef      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004e10:	2304      	movs	r3, #4
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e0ec      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004e16:	2308      	movs	r3, #8
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e0e9      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e0e6      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a56      	ldr	r2, [pc, #344]	; (8004f80 <UART_SetConfig+0x2d8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d120      	bne.n	8004e6e <UART_SetConfig+0x1c6>
 8004e2c:	4b51      	ldr	r3, [pc, #324]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e36:	2bc0      	cmp	r3, #192	; 0xc0
 8004e38:	d013      	beq.n	8004e62 <UART_SetConfig+0x1ba>
 8004e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e3c:	d814      	bhi.n	8004e68 <UART_SetConfig+0x1c0>
 8004e3e:	2b80      	cmp	r3, #128	; 0x80
 8004e40:	d009      	beq.n	8004e56 <UART_SetConfig+0x1ae>
 8004e42:	2b80      	cmp	r3, #128	; 0x80
 8004e44:	d810      	bhi.n	8004e68 <UART_SetConfig+0x1c0>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <UART_SetConfig+0x1a8>
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	d006      	beq.n	8004e5c <UART_SetConfig+0x1b4>
 8004e4e:	e00b      	b.n	8004e68 <UART_SetConfig+0x1c0>
 8004e50:	2300      	movs	r3, #0
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	e0cc      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004e56:	2302      	movs	r3, #2
 8004e58:	77fb      	strb	r3, [r7, #31]
 8004e5a:	e0c9      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	e0c6      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004e62:	2308      	movs	r3, #8
 8004e64:	77fb      	strb	r3, [r7, #31]
 8004e66:	e0c3      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004e68:	2310      	movs	r3, #16
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e0c0      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a44      	ldr	r2, [pc, #272]	; (8004f84 <UART_SetConfig+0x2dc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d125      	bne.n	8004ec4 <UART_SetConfig+0x21c>
 8004e78:	4b3e      	ldr	r3, [pc, #248]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e86:	d017      	beq.n	8004eb8 <UART_SetConfig+0x210>
 8004e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e8c:	d817      	bhi.n	8004ebe <UART_SetConfig+0x216>
 8004e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e92:	d00b      	beq.n	8004eac <UART_SetConfig+0x204>
 8004e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e98:	d811      	bhi.n	8004ebe <UART_SetConfig+0x216>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <UART_SetConfig+0x1fe>
 8004e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea2:	d006      	beq.n	8004eb2 <UART_SetConfig+0x20a>
 8004ea4:	e00b      	b.n	8004ebe <UART_SetConfig+0x216>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e0a1      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004eac:	2302      	movs	r3, #2
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e09e      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	77fb      	strb	r3, [r7, #31]
 8004eb6:	e09b      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004eb8:	2308      	movs	r3, #8
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e098      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e095      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2f      	ldr	r2, [pc, #188]	; (8004f88 <UART_SetConfig+0x2e0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d125      	bne.n	8004f1a <UART_SetConfig+0x272>
 8004ece:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004edc:	d017      	beq.n	8004f0e <UART_SetConfig+0x266>
 8004ede:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee2:	d817      	bhi.n	8004f14 <UART_SetConfig+0x26c>
 8004ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee8:	d00b      	beq.n	8004f02 <UART_SetConfig+0x25a>
 8004eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eee:	d811      	bhi.n	8004f14 <UART_SetConfig+0x26c>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <UART_SetConfig+0x254>
 8004ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef8:	d006      	beq.n	8004f08 <UART_SetConfig+0x260>
 8004efa:	e00b      	b.n	8004f14 <UART_SetConfig+0x26c>
 8004efc:	2301      	movs	r3, #1
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e076      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004f02:	2302      	movs	r3, #2
 8004f04:	77fb      	strb	r3, [r7, #31]
 8004f06:	e073      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e070      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004f0e:	2308      	movs	r3, #8
 8004f10:	77fb      	strb	r3, [r7, #31]
 8004f12:	e06d      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004f14:	2310      	movs	r3, #16
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e06a      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1b      	ldr	r2, [pc, #108]	; (8004f8c <UART_SetConfig+0x2e4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d138      	bne.n	8004f96 <UART_SetConfig+0x2ee>
 8004f24:	4b13      	ldr	r3, [pc, #76]	; (8004f74 <UART_SetConfig+0x2cc>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f32:	d017      	beq.n	8004f64 <UART_SetConfig+0x2bc>
 8004f34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f38:	d82a      	bhi.n	8004f90 <UART_SetConfig+0x2e8>
 8004f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3e:	d00b      	beq.n	8004f58 <UART_SetConfig+0x2b0>
 8004f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f44:	d824      	bhi.n	8004f90 <UART_SetConfig+0x2e8>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <UART_SetConfig+0x2aa>
 8004f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4e:	d006      	beq.n	8004f5e <UART_SetConfig+0x2b6>
 8004f50:	e01e      	b.n	8004f90 <UART_SetConfig+0x2e8>
 8004f52:	2300      	movs	r3, #0
 8004f54:	77fb      	strb	r3, [r7, #31]
 8004f56:	e04b      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	77fb      	strb	r3, [r7, #31]
 8004f5c:	e048      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004f5e:	2304      	movs	r3, #4
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	e045      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004f64:	2308      	movs	r3, #8
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e042      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004f6a:	bf00      	nop
 8004f6c:	efff69f3 	.word	0xefff69f3
 8004f70:	40011000 	.word	0x40011000
 8004f74:	40023800 	.word	0x40023800
 8004f78:	40004400 	.word	0x40004400
 8004f7c:	40004800 	.word	0x40004800
 8004f80:	40004c00 	.word	0x40004c00
 8004f84:	40005000 	.word	0x40005000
 8004f88:	40011400 	.word	0x40011400
 8004f8c:	40007800 	.word	0x40007800
 8004f90:	2310      	movs	r3, #16
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e02c      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a72      	ldr	r2, [pc, #456]	; (8005164 <UART_SetConfig+0x4bc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d125      	bne.n	8004fec <UART_SetConfig+0x344>
 8004fa0:	4b71      	ldr	r3, [pc, #452]	; (8005168 <UART_SetConfig+0x4c0>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004faa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fae:	d017      	beq.n	8004fe0 <UART_SetConfig+0x338>
 8004fb0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fb4:	d817      	bhi.n	8004fe6 <UART_SetConfig+0x33e>
 8004fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fba:	d00b      	beq.n	8004fd4 <UART_SetConfig+0x32c>
 8004fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc0:	d811      	bhi.n	8004fe6 <UART_SetConfig+0x33e>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <UART_SetConfig+0x326>
 8004fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fca:	d006      	beq.n	8004fda <UART_SetConfig+0x332>
 8004fcc:	e00b      	b.n	8004fe6 <UART_SetConfig+0x33e>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e00d      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e00a      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004fda:	2304      	movs	r3, #4
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e007      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e004      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004fe6:	2310      	movs	r3, #16
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e001      	b.n	8004ff0 <UART_SetConfig+0x348>
 8004fec:	2310      	movs	r3, #16
 8004fee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff8:	d15b      	bne.n	80050b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004ffa:	7ffb      	ldrb	r3, [r7, #31]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d828      	bhi.n	8005052 <UART_SetConfig+0x3aa>
 8005000:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0x360>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	0800502d 	.word	0x0800502d
 800500c:	08005035 	.word	0x08005035
 8005010:	0800503d 	.word	0x0800503d
 8005014:	08005053 	.word	0x08005053
 8005018:	08005043 	.word	0x08005043
 800501c:	08005053 	.word	0x08005053
 8005020:	08005053 	.word	0x08005053
 8005024:	08005053 	.word	0x08005053
 8005028:	0800504b 	.word	0x0800504b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800502c:	f7fe fe08 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8005030:	61b8      	str	r0, [r7, #24]
        break;
 8005032:	e013      	b.n	800505c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005034:	f7fe fe18 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 8005038:	61b8      	str	r0, [r7, #24]
        break;
 800503a:	e00f      	b.n	800505c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800503c:	4b4b      	ldr	r3, [pc, #300]	; (800516c <UART_SetConfig+0x4c4>)
 800503e:	61bb      	str	r3, [r7, #24]
        break;
 8005040:	e00c      	b.n	800505c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005042:	f7fe fceb 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 8005046:	61b8      	str	r0, [r7, #24]
        break;
 8005048:	e008      	b.n	800505c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800504a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504e:	61bb      	str	r3, [r7, #24]
        break;
 8005050:	e004      	b.n	800505c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	77bb      	strb	r3, [r7, #30]
        break;
 800505a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d074      	beq.n	800514c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	005a      	lsls	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	441a      	add	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	fbb2 f3f3 	udiv	r3, r2, r3
 8005076:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b0f      	cmp	r3, #15
 800507c:	d916      	bls.n	80050ac <UART_SetConfig+0x404>
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005084:	d212      	bcs.n	80050ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f023 030f 	bic.w	r3, r3, #15
 800508e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	b29b      	uxth	r3, r3
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	b29a      	uxth	r2, r3
 800509c:	89fb      	ldrh	r3, [r7, #14]
 800509e:	4313      	orrs	r3, r2
 80050a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	89fa      	ldrh	r2, [r7, #14]
 80050a8:	60da      	str	r2, [r3, #12]
 80050aa:	e04f      	b.n	800514c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	77bb      	strb	r3, [r7, #30]
 80050b0:	e04c      	b.n	800514c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050b2:	7ffb      	ldrb	r3, [r7, #31]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d828      	bhi.n	800510a <UART_SetConfig+0x462>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x418>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	0800510b 	.word	0x0800510b
 80050d0:	080050fb 	.word	0x080050fb
 80050d4:	0800510b 	.word	0x0800510b
 80050d8:	0800510b 	.word	0x0800510b
 80050dc:	0800510b 	.word	0x0800510b
 80050e0:	08005103 	.word	0x08005103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7fe fdac 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 80050e8:	61b8      	str	r0, [r7, #24]
        break;
 80050ea:	e013      	b.n	8005114 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ec:	f7fe fdbc 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 80050f0:	61b8      	str	r0, [r7, #24]
        break;
 80050f2:	e00f      	b.n	8005114 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f4:	4b1d      	ldr	r3, [pc, #116]	; (800516c <UART_SetConfig+0x4c4>)
 80050f6:	61bb      	str	r3, [r7, #24]
        break;
 80050f8:	e00c      	b.n	8005114 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fa:	f7fe fc8f 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80050fe:	61b8      	str	r0, [r7, #24]
        break;
 8005100:	e008      	b.n	8005114 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005106:	61bb      	str	r3, [r7, #24]
        break;
 8005108:	e004      	b.n	8005114 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	77bb      	strb	r3, [r7, #30]
        break;
 8005112:	bf00      	nop
    }

    if (pclk != 0U)
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d018      	beq.n	800514c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	085a      	lsrs	r2, r3, #1
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	441a      	add	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b0f      	cmp	r3, #15
 8005132:	d909      	bls.n	8005148 <UART_SetConfig+0x4a0>
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513a:	d205      	bcs.n	8005148 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	b29a      	uxth	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60da      	str	r2, [r3, #12]
 8005146:	e001      	b.n	800514c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005158:	7fbb      	ldrb	r3, [r7, #30]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3720      	adds	r7, #32
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40007c00 	.word	0x40007c00
 8005168:	40023800 	.word	0x40023800
 800516c:	00f42400 	.word	0x00f42400

08005170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01a      	beq.n	8005286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526e:	d10a      	bne.n	8005286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]
  }
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c4:	f7fc f9be 	bl	8001644 <HAL_GetTick>
 80052c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d10e      	bne.n	80052f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f831 	bl	800534e <UART_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e027      	b.n	8005346 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b04      	cmp	r3, #4
 8005302:	d10e      	bne.n	8005322 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f81b 	bl	800534e <UART_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e011      	b.n	8005346 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b09c      	sub	sp, #112	; 0x70
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	603b      	str	r3, [r7, #0]
 800535a:	4613      	mov	r3, r2
 800535c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535e:	e0a7      	b.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	f000 80a3 	beq.w	80054b0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fc f96b 	bl	8001644 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <UART_WaitOnFlagUntilTimeout+0x32>
 800537a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800537c:	2b00      	cmp	r3, #0
 800537e:	d13f      	bne.n	8005400 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800538e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005394:	667b      	str	r3, [r7, #100]	; 0x64
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800539e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e6      	bne.n	8005380 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3308      	adds	r3, #8
 80053b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80053d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e5      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e068      	b.n	80054d2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d050      	beq.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541c:	d148      	bne.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005426:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800543c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005446:	637b      	str	r3, [r7, #52]	; 0x34
 8005448:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800544c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e6      	bne.n	8005428 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3308      	adds	r3, #8
 8005460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	613b      	str	r3, [r7, #16]
   return(result);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	66bb      	str	r3, [r7, #104]	; 0x68
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3308      	adds	r3, #8
 8005478:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800547a:	623a      	str	r2, [r7, #32]
 800547c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	69f9      	ldr	r1, [r7, #28]
 8005480:	6a3a      	ldr	r2, [r7, #32]
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	61bb      	str	r3, [r7, #24]
   return(result);
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e010      	b.n	80054d2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4013      	ands	r3, r2
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	429a      	cmp	r2, r3
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	f43f af48 	beq.w	8005360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3770      	adds	r7, #112	; 0x70
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <_nxe_dhcp_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_create(NX_DHCP *dhcp_ptr, NX_IP *ip_ptr, CHAR *name_ptr)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (dhcp_ptr == NX_NULL))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <_nxe_dhcp_create+0x22>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a09      	ldr	r2, [pc, #36]	; (8005518 <_nxe_dhcp_create+0x3c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d102      	bne.n	80054fe <_nxe_dhcp_create+0x22>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <_nxe_dhcp_create+0x26>
    {
    
        return(NX_PTR_ERROR);
 80054fe:	2307      	movs	r3, #7
 8005500:	e006      	b.n	8005510 <_nxe_dhcp_create+0x34>
    }

    /* Call actual DHCP create service.  */
    status =  _nx_dhcp_create(dhcp_ptr, ip_ptr, name_ptr);
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f808 	bl	800551c <_nx_dhcp_create>
 800550c:	6178      	str	r0, [r7, #20]

    /* Return status.  */
    return(status);
 800550e:	697b      	ldr	r3, [r7, #20]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	49502020 	.word	0x49502020

0800551c <_nx_dhcp_create>:
/*                                            multiple client instances,  */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_create(NX_DHCP *dhcp_ptr, NX_IP *ip_ptr, CHAR *name_ptr)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b092      	sub	sp, #72	; 0x48
 8005520:	af08      	add	r7, sp, #32
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
            return (NX_DHCP_INVALID_NAME);
    }
#endif /* NX_DHCP_CLIENT_ENABLE_HOST_NAME_CHECK  */

    /* Initialize the DHCP control block to zero.  */
    memset((void *) dhcp_ptr, 0, sizeof(NX_DHCP));
 8005528:	f641 7254 	movw	r2, #8020	; 0x1f54
 800552c:	2100      	movs	r1, #0
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f00d fcb6 	bl	8012ea0 <memset>
    
    /* Save the IP pointer.  */
    dhcp_ptr -> nx_dhcp_ip_ptr =  ip_ptr;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	609a      	str	r2, [r3, #8]

    /* Save the DHCP name.  */
    dhcp_ptr -> nx_dhcp_name =  name_ptr;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	605a      	str	r2, [r3, #4]
        /* Invalid payload, return error status.  */
        return(NX_DHCP_INVALID_PAYLOAD);
    }

    /* Create the pool and check the status */
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f103 000c 	add.w	r0, r3, #12
                                    dhcp_ptr -> nx_dhcp_pool_area, NX_DHCP_PACKET_POOL_SIZE);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3348      	adds	r3, #72	; 0x48
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 800554a:	f44f 6239 	mov.w	r2, #2960	; 0xb90
 800554e:	9200      	str	r2, [sp, #0]
 8005550:	f44f 7214 	mov.w	r2, #592	; 0x250
 8005554:	498b      	ldr	r1, [pc, #556]	; (8005784 <_nx_dhcp_create+0x268>)
 8005556:	f006 fde1 	bl	800c11c <_nx_packet_pool_create>
 800555a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Determine if it was successful.  */
    if (status != NX_SUCCESS)
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <_nx_dhcp_create+0x4a>
    {

        /* No, return error status.  */
        return(status);
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	e109      	b.n	800577a <_nx_dhcp_create+0x25e>
    }

    /* Set an internal packet pool pointer to the newly created packet pool. */
    dhcp_ptr -> nx_dhcp_packet_pool_ptr = &dhcp_ptr -> nx_dhcp_pool;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f103 020c 	add.w	r2, r3, #12
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f8c3 2bd8 	str.w	r2, [r3, #3032]	; 0xbd8
#endif /* NX_DHCP_CLIENT_SEND_MAX_DHCP_MESSAGE_OPTION  */

#endif /* NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL  */

    /* Create the Socket and check the status */
    status = nx_udp_socket_create(ip_ptr, &(dhcp_ptr -> nx_dhcp_socket), "NetX DHCP Client",
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f603 31dc 	addw	r1, r3, #3036	; 0xbdc
 8005578:	2304      	movs	r3, #4
 800557a:	9302      	str	r3, [sp, #8]
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	2300      	movs	r3, #0
 8005588:	4a7e      	ldr	r2, [pc, #504]	; (8005784 <_nx_dhcp_create+0x268>)
 800558a:	68b8      	ldr	r0, [r7, #8]
 800558c:	f007 fcec 	bl	800cf68 <_nx_udp_socket_create>
 8005590:	6278      	str	r0, [r7, #36]	; 0x24
                                  NX_DHCP_TYPE_OF_SERVICE, NX_DHCP_FRAGMENT_OPTION, NX_DHCP_TIME_TO_LIVE, NX_DHCP_QUEUE_DEPTH);

    /* Was the socket creation successful?  */
    if (status != NX_SUCCESS)
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	d007      	beq.n	80055a8 <_nx_dhcp_create+0x8c>
    {

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 800559e:	4618      	mov	r0, r3
 80055a0:	f006 fe8c 	bl	800c2bc <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	e0e8      	b.n	800577a <_nx_dhcp_create+0x25e>
    }


    /* Set the UDP socket receive callback function.  */
    status = nx_udp_socket_receive_notify(&(dhcp_ptr -> nx_dhcp_socket), _nx_dhcp_udp_receive_notify);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80055ae:	4976      	ldr	r1, [pc, #472]	; (8005788 <_nx_dhcp_create+0x26c>)
 80055b0:	4618      	mov	r0, r3
 80055b2:	f007 ff1b 	bl	800d3ec <_nx_udp_socket_receive_notify>
 80055b6:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check status.  */
    if (status != NX_SUCCESS) 
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <_nx_dhcp_create+0xba>
    {


#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 80055c4:	4618      	mov	r0, r3
 80055c6:	f006 fe79 	bl	800c2bc <_nx_packet_pool_delete>
#endif

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80055d0:	4618      	mov	r0, r3
 80055d2:	f007 fd59 	bl	800d088 <_nx_udp_socket_delete>
    }

    dhcp_ptr -> nx_dhcp_socket.nx_udp_socket_reserved_ptr = (VOID*)dhcp_ptr;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50

    /* Create the ThreadX activity timeout timer.  This will be used to periodically check to see if
       a client connection has gone silent and needs to be terminated.  */
    status =  tx_timer_create(&(dhcp_ptr -> nx_dhcp_timer), "DHCP Client Timer", _nx_dhcp_timeout_entry,
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f641 505c 	movw	r0, #7516	; 0x1d5c
 80055e4:	4418      	add	r0, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	222c      	movs	r2, #44	; 0x2c
 80055ea:	9203      	str	r2, [sp, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	9202      	str	r2, [sp, #8]
 80055f0:	2264      	movs	r2, #100	; 0x64
 80055f2:	9201      	str	r2, [sp, #4]
 80055f4:	2264      	movs	r2, #100	; 0x64
 80055f6:	9200      	str	r2, [sp, #0]
 80055f8:	4a64      	ldr	r2, [pc, #400]	; (800578c <_nx_dhcp_create+0x270>)
 80055fa:	4965      	ldr	r1, [pc, #404]	; (8005790 <_nx_dhcp_create+0x274>)
 80055fc:	f00d f86c 	bl	80126d8 <_txe_timer_create>
 8005600:	6278      	str	r0, [r7, #36]	; 0x24
                              (NX_DHCP_TIME_INTERVAL), TX_NO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(dhcp_ptr -> nx_dhcp_timer), dhcp_ptr)

    /* Determine if the semaphore creation was successful.  */
    if (status != TX_SUCCESS)
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00d      	beq.n	8005624 <_nx_dhcp_create+0x108>
    {

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 800560e:	4618      	mov	r0, r3
 8005610:	f007 fd3a 	bl	800d088 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 800561a:	4618      	mov	r0, r3
 800561c:	f006 fe4e 	bl	800c2bc <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	e0aa      	b.n	800577a <_nx_dhcp_create+0x25e>
    }

    /* Create the DHCP mutex.  */
    status =  tx_mutex_create(&(dhcp_ptr -> nx_dhcp_mutex), "NetX DHCP Client", TX_NO_INHERIT);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f641 5004 	movw	r0, #7428	; 0x1d04
 800562a:	4418      	add	r0, r3
 800562c:	2334      	movs	r3, #52	; 0x34
 800562e:	2200      	movs	r2, #0
 8005630:	4954      	ldr	r1, [pc, #336]	; (8005784 <_nx_dhcp_create+0x268>)
 8005632:	f00c fc57 	bl	8011ee4 <_txe_mutex_create>
 8005636:	6278      	str	r0, [r7, #36]	; 0x24

    /* Determine if the semaphore creation was successful.  */
    if (status != TX_SUCCESS)
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d014      	beq.n	8005668 <_nx_dhcp_create+0x14c>
    {

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005644:	4618      	mov	r0, r3
 8005646:	f007 fd1f 	bl	800d088 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 8005650:	4618      	mov	r0, r3
 8005652:	f006 fe33 	bl	800c2bc <_nx_packet_pool_delete>
#endif

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800565c:	4413      	add	r3, r2
 800565e:	4618      	mov	r0, r3
 8005660:	f00d f904 	bl	801286c <_txe_timer_delete>

        /* No, return error status.  */
        return(status);
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	e088      	b.n	800577a <_nx_dhcp_create+0x25e>
    }

    /* Create the DHCP processing thread.  */
    status =  tx_thread_create(&(dhcp_ptr -> nx_dhcp_thread), "NetX DHCP Client", _nx_dhcp_thread_entry, (ULONG)(ALIGN_TYPE)dhcp_ptr,
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f603 4054 	addw	r0, r3, #3156	; 0xc54
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f603 5304 	addw	r3, r3, #3332	; 0xd04
 8005676:	21b0      	movs	r1, #176	; 0xb0
 8005678:	9106      	str	r1, [sp, #24]
 800567a:	2100      	movs	r1, #0
 800567c:	9105      	str	r1, [sp, #20]
 800567e:	2101      	movs	r1, #1
 8005680:	9104      	str	r1, [sp, #16]
 8005682:	2103      	movs	r1, #3
 8005684:	9103      	str	r1, [sp, #12]
 8005686:	2103      	movs	r1, #3
 8005688:	9102      	str	r1, [sp, #8]
 800568a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800568e:	9101      	str	r1, [sp, #4]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	4613      	mov	r3, r2
 8005694:	4a3f      	ldr	r2, [pc, #252]	; (8005794 <_nx_dhcp_create+0x278>)
 8005696:	493b      	ldr	r1, [pc, #236]	; (8005784 <_nx_dhcp_create+0x268>)
 8005698:	f00c fe8a 	bl	80123b0 <_txe_thread_create>
 800569c:	6278      	str	r0, [r7, #36]	; 0x24
                                NX_DHCP_THREAD_PRIORITY, NX_DHCP_THREAD_PRIORITY, 1, TX_DONT_START);

    NX_THREAD_EXTENSION_PTR_SET(&(dhcp_ptr -> nx_dhcp_thread), dhcp_ptr)

    /* Determine if the thread creation was successful.  */
    if (status != TX_SUCCESS)
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01b      	beq.n	80056dc <_nx_dhcp_create+0x1c0>
    {

        /* Delete the mutex.  */
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	f641 5304 	movw	r3, #7428	; 0x1d04
 80056aa:	4413      	add	r3, r2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f00c fcb7 	bl	8012020 <_txe_mutex_delete>

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80056b8:	4618      	mov	r0, r3
 80056ba:	f007 fce5 	bl	800d088 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 80056c4:	4618      	mov	r0, r3
 80056c6:	f006 fdf9 	bl	800c2bc <_nx_packet_pool_delete>
#endif

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80056d0:	4413      	add	r3, r2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f00d f8ca 	bl	801286c <_txe_timer_delete>

        /* No, return error status.  */
        return(status);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	e04e      	b.n	800577a <_nx_dhcp_create+0x25e>
    }

    /* Create a DHCP event flag group. .  */
    status = tx_event_flags_create(&(dhcp_ptr -> nx_dhcp_events), (CHAR *)"DHCP Client Events");
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	f641 5338 	movw	r3, #7480	; 0x1d38
 80056e2:	4413      	add	r3, r2
 80056e4:	2224      	movs	r2, #36	; 0x24
 80056e6:	492c      	ldr	r1, [pc, #176]	; (8005798 <_nx_dhcp_create+0x27c>)
 80056e8:	4618      	mov	r0, r3
 80056ea:	f00c fae5 	bl	8011cb8 <_txe_event_flags_create>
 80056ee:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check for error. */
    if (status != TX_SUCCESS)
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d021      	beq.n	800573a <_nx_dhcp_create+0x21e>
    {

        /* Delete the thread.  */
        tx_thread_delete(&(dhcp_ptr -> nx_dhcp_thread));
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 80056fc:	4618      	mov	r0, r3
 80056fe:	f00c ff49 	bl	8012594 <_txe_thread_delete>

        /* Delete the mutex.  */
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005708:	4413      	add	r3, r2
 800570a:	4618      	mov	r0, r3
 800570c:	f00c fc88 	bl	8012020 <_txe_mutex_delete>

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8005716:	4413      	add	r3, r2
 8005718:	4618      	mov	r0, r3
 800571a:	f00d f8a7 	bl	801286c <_txe_timer_delete>

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005724:	4618      	mov	r0, r3
 8005726:	f007 fcaf 	bl	800d088 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	; 0xbd8
 8005730:	4618      	mov	r0, r3
 8005732:	f006 fdc3 	bl	800c2bc <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	e01f      	b.n	800577a <_nx_dhcp_create+0x25e>
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800573a:	f3ef 8310 	mrs	r3, PRIMASK
 800573e:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8005740:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8005742:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8005744:	b672      	cpsid	i
#endif
    return(int_posture);
 8005746:	697b      	ldr	r3, [r7, #20]
    }

    /* Otherwise, the DHCP initialization was successful.  Place the
       DHCP control block on the list of created DHCP instances.  */
    TX_DISABLE
 8005748:	623b      	str	r3, [r7, #32]

    /* Update the dhcp structure ID.  */
    dhcp_ptr -> nx_dhcp_id =  NX_DHCP_ID;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a13      	ldr	r2, [pc, #76]	; (800579c <_nx_dhcp_create+0x280>)
 800574e:	601a      	str	r2, [r3, #0]

    /* Setup this DHCP's created links.  */
    dhcp_ptr -> nx_dhcp_created_next = _nx_dhcp_created_ptr;
 8005750:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <_nx_dhcp_create+0x284>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800575a:	f8c2 3f4c 	str.w	r3, [r2, #3916]	; 0xf4c

    /* Place the new DHCP control block on the head of created DHCPs.  */
    _nx_dhcp_created_ptr = dhcp_ptr;
 800575e:	4a10      	ldr	r2, [pc, #64]	; (80057a0 <_nx_dhcp_create+0x284>)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f383 8810 	msr	PRIMASK, r3
}
 800576e:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Default enable DHCP on the primary interface (0).  */
    _nx_dhcp_interface_enable(dhcp_ptr, 0);
 8005770:	2100      	movs	r1, #0
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fa09 	bl	8005b8a <_nx_dhcp_interface_enable>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3728      	adds	r7, #40	; 0x28
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	0801407c 	.word	0x0801407c
 8005788:	08005f45 	.word	0x08005f45
 800578c:	08005f6d 	.word	0x08005f6d
 8005790:	08014090 	.word	0x08014090
 8005794:	08005f93 	.word	0x08005f93
 8005798:	080140a4 	.word	0x080140a4
 800579c:	44484350 	.word	0x44484350
 80057a0:	20008084 	.word	0x20008084

080057a4 <_nx_dhcp_interface_reinitialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_dhcp_interface_reinitialize(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]

UINT                      status;
ULONG                     ip_address;
ULONG                     network_mask;
ULONG                     gateway_address;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]

  
    /* Obtain DHCP Client protection mutex. */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	f641 5304 	movw	r3, #7428	; 0x1d04
 80057b8:	4413      	add	r3, r2
 80057ba:	f04f 31ff 	mov.w	r1, #4294967295
 80057be:	4618      	mov	r0, r3
 80057c0:	f00c fc6c 	bl	801209c <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 80057c4:	f107 030c 	add.w	r3, r7, #12
 80057c8:	461a      	mov	r2, r3
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 ffd6 	bl	800777e <_nx_dhcp_interface_record_find>
 80057d2:	61f8      	str	r0, [r7, #28]

    /* Check status.  */
    if (status)
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <_nx_dhcp_interface_reinitialize+0x48>
    {

        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	f641 5304 	movw	r3, #7428	; 0x1d04
 80057e0:	4413      	add	r3, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f00c fcb4 	bl	8012150 <_txe_mutex_put>
        return(status);
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	e063      	b.n	80058b4 <_nx_dhcp_interface_reinitialize+0x110>
    }

    /* Check if have IP address.  */
    if (interface_record -> nx_dhcp_ip_address)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d018      	beq.n	8005826 <_nx_dhcp_interface_reinitialize+0x82>
    {

        /* Get the IP address.  */
        status = nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, &ip_address, &network_mask);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6898      	ldr	r0, [r3, #8]
 80057f8:	f107 0314 	add.w	r3, r7, #20
 80057fc:	f107 0218 	add.w	r2, r7, #24
 8005800:	6839      	ldr	r1, [r7, #0]
 8005802:	f004 ffc3 	bl	800a78c <_nx_ip_interface_address_get>
 8005806:	61f8      	str	r0, [r7, #28]

        /* Check if the IP address is set by DHCP.  */
        if ((status == NX_SUCCESS) && (ip_address == interface_record -> nx_dhcp_ip_address))
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10b      	bne.n	8005826 <_nx_dhcp_interface_reinitialize+0x82>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	429a      	cmp	r2, r3
 8005816:	d106      	bne.n	8005826 <_nx_dhcp_interface_reinitialize+0x82>
        {

            /* Clear the IP address.  */
            nx_ip_interface_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, 0, 0);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6898      	ldr	r0, [r3, #8]
 800581c:	2300      	movs	r3, #0
 800581e:	2200      	movs	r2, #0
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	f004 fff1 	bl	800a808 <_nx_ip_interface_address_set>
        }
    }

    /* Check if have gateway address.  */
    if (interface_record -> nx_dhcp_gateway_address)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d015      	beq.n	800585a <_nx_dhcp_interface_reinitialize+0xb6>
    {

        /* Get the gateway address.  */
        status = nx_ip_gateway_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, &gateway_address);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f107 0210 	add.w	r2, r7, #16
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f004 fe4d 	bl	800a4d8 <_nx_ip_gateway_address_get>
 800583e:	61f8      	str	r0, [r7, #28]

        /* Check status.  */
        if ((status == NX_SUCCESS) && (gateway_address == interface_record -> nx_dhcp_gateway_address))
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <_nx_dhcp_interface_reinitialize+0xb6>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	429a      	cmp	r2, r3
 800584e:	d104      	bne.n	800585a <_nx_dhcp_interface_reinitialize+0xb6>
        {

            /* Clear the Gateway/Router IP address.  */
            nx_ip_gateway_address_clear(dhcp_ptr -> nx_dhcp_ip_ptr);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	4618      	mov	r0, r3
 8005856:	f004 fe14 	bl	800a482 <_nx_ip_gateway_address_clear>
        }
    }

    /* Initialize the client DHCP IP address with the NULL IP address.  */
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS; 
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	60da      	str	r2, [r3, #12]

    /* Initialize the client DHCP server IP address.  */
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS; 
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	615a      	str	r2, [r3, #20]

    /* Clear these DHCP Client network values too.*/
    interface_record -> nx_dhcp_gateway_address = NX_BOOTP_NO_ADDRESS; 
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	611a      	str	r2, [r3, #16]
    interface_record -> nx_dhcp_network_mask = NX_BOOTP_NO_ADDRESS;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	619a      	str	r2, [r3, #24]

    /* Clear the flag to skip the discovery step. The host application must
       call the nx_dhcp_request_ip_address to reset the flag and the requested IP address. */
    interface_record -> nx_dhcp_skip_discovery = NX_FALSE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	645a      	str	r2, [r3, #68]	; 0x44
                                                             
    /* Initialize renew and rebind timeout values to zero.  */
    interface_record -> nx_dhcp_rebind_time = 0;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	635a      	str	r2, [r3, #52]	; 0x34
    interface_record -> nx_dhcp_renewal_time =  0;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup for infinite lease time request.  */
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f04f 32ff 	mov.w	r2, #4294967295
 800588a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset the seconds field for starting the DHCP request process. */
    interface_record -> nx_dhcp_seconds = 0;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	609a      	str	r2, [r3, #8]

    /* Reset the timeout and retransmission interval.  */
    interface_record -> nx_dhcp_timeout = 0;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	621a      	str	r2, [r3, #32]
    interface_record -> nx_dhcp_rtr_interval = 0;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DHCP state to the initial state.  */
    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_NOT_STARTED;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	705a      	strb	r2, [r3, #1]

    /* Release the mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	f641 5304 	movw	r3, #7428	; 0x1d04
 80058aa:	4413      	add	r3, r2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f00c fc4f 	bl	8012150 <_txe_mutex_put>
    return NX_SUCCESS;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <_nxe_dhcp_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_start(NX_DHCP *dhcp_ptr)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for invalid input pointer.  */
    if ((dhcp_ptr == NX_NULL) || (dhcp_ptr -> nx_dhcp_id != NX_DHCP_ID))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <_nxe_dhcp_start+0x18>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a11      	ldr	r2, [pc, #68]	; (8005914 <_nxe_dhcp_start+0x58>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d001      	beq.n	80058d8 <_nxe_dhcp_start+0x1c>
        return(NX_PTR_ERROR);
 80058d4:	2307      	movs	r3, #7
 80058d6:	e018      	b.n	800590a <_nxe_dhcp_start+0x4e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80058d8:	f3ef 8305 	mrs	r3, IPSR
 80058dc:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80058de:	68ba      	ldr	r2, [r7, #8]
    
    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 80058e0:	4b0d      	ldr	r3, [pc, #52]	; (8005918 <_nxe_dhcp_start+0x5c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d108      	bne.n	80058fc <_nxe_dhcp_start+0x40>
 80058ea:	4b0c      	ldr	r3, [pc, #48]	; (800591c <_nxe_dhcp_start+0x60>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d004      	beq.n	80058fc <_nxe_dhcp_start+0x40>
 80058f2:	4b0a      	ldr	r3, [pc, #40]	; (800591c <_nxe_dhcp_start+0x60>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <_nxe_dhcp_start+0x64>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d101      	bne.n	8005900 <_nxe_dhcp_start+0x44>
 80058fc:	2311      	movs	r3, #17
 80058fe:	e004      	b.n	800590a <_nxe_dhcp_start+0x4e>

    /* Call actual DHCP start service.  */
    status =  _nx_dhcp_start(dhcp_ptr);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f80f 	bl	8005924 <_nx_dhcp_start>
 8005906:	60f8      	str	r0, [r7, #12]

    /* Return status.  */
    return(status);
 8005908:	68fb      	ldr	r3, [r7, #12]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	44484350 	.word	0x44484350
 8005918:	2000008c 	.word	0x2000008c
 800591c:	20008198 	.word	0x20008198
 8005920:	200082e0 	.word	0x200082e0

08005924 <_nx_dhcp_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_start(NX_DHCP *dhcp_ptr)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]

UINT    status;
UINT    interfaces_started = 0;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
UINT    i;


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005936:	4413      	add	r3, r2
 8005938:	f04f 31ff 	mov.w	r1, #4294967295
 800593c:	4618      	mov	r0, r3
 800593e:	f00c fbad 	bl	801209c <_txe_mutex_get>

    /* Check all interfaces to find out which need to start the DHCP protocol.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005942:	2300      	movs	r3, #0
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	e028      	b.n	800599a <_nx_dhcp_start+0x76>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	441a      	add	r2, r3
 8005956:	f641 5388 	movw	r3, #7560	; 0x1d88
 800595a:	4413      	add	r3, r2
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d118      	bne.n	8005994 <_nx_dhcp_start+0x70>
        {

            /* Start DHCP on this interface.   */
             status = _nx_dhcp_interface_start(dhcp_ptr, dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index);
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800596a:	fb01 f303 	mul.w	r3, r1, r3
 800596e:	441a      	add	r2, r3
 8005970:	f641 53a4 	movw	r3, #7588	; 0x1da4
 8005974:	4413      	add	r3, r2
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f828 	bl	80059d0 <_nx_dhcp_interface_start>
 8005980:	60f8      	str	r0, [r7, #12]
             /* Note, not all interfaces are enabled to run, so
                status may not be successful. Skip to the next
                interface. */

             /* Check status.  */
             if ((status == NX_SUCCESS) || (status == NX_DHCP_ALREADY_STARTED))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <_nx_dhcp_start+0x6a>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b93      	cmp	r3, #147	; 0x93
 800598c:	d102      	bne.n	8005994 <_nx_dhcp_start+0x70>
             {
                 interfaces_started++;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	3301      	adds	r3, #1
 8005992:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	3301      	adds	r3, #1
 8005998:	613b      	str	r3, [r7, #16]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0d3      	beq.n	8005948 <_nx_dhcp_start+0x24>
             }
        }
    }

    /* Check if any interfaces started DHCP. */
    if (interfaces_started == 0) 
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d108      	bne.n	80059b8 <_nx_dhcp_start+0x94>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	f641 5304 	movw	r3, #7428	; 0x1d04
 80059ac:	4413      	add	r3, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f00c fbce 	bl	8012150 <_txe_mutex_put>

        /* Unable to start any interfaces. */
        return NX_DHCP_NO_INTERFACES_STARTED;
 80059b4:	23a6      	movs	r3, #166	; 0xa6
 80059b6:	e007      	b.n	80059c8 <_nx_dhcp_start+0xa4>
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	f641 5304 	movw	r3, #7428	; 0x1d04
 80059be:	4413      	add	r3, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f00c fbc5 	bl	8012150 <_txe_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);  
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <_nx_dhcp_interface_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_interface_start(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]

UINT    i;
UINT    status;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]

    
    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	f641 5304 	movw	r3, #7428	; 0x1d04
 80059e4:	4413      	add	r3, r2
 80059e6:	f04f 31ff 	mov.w	r1, #4294967295
 80059ea:	4618      	mov	r0, r3
 80059ec:	f00c fb56 	bl	801209c <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 80059f0:	f107 030c 	add.w	r3, r7, #12
 80059f4:	461a      	mov	r2, r3
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 fec0 	bl	800777e <_nx_dhcp_interface_record_find>
 80059fe:	6138      	str	r0, [r7, #16]

    /* Check status.  */
    if (status)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <_nx_dhcp_interface_start+0x48>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005a0c:	4413      	add	r3, r2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f00c fb9e 	bl	8012150 <_txe_mutex_put>

        return(status);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	e0b4      	b.n	8005b82 <_nx_dhcp_interface_start+0x1b2>
    }

    /* Check if DHCP is already started.  */
    if (interface_record -> nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <_nx_dhcp_interface_start+0x62>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005a26:	4413      	add	r3, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f00c fb91 	bl	8012150 <_txe_mutex_put>
        return(NX_DHCP_ALREADY_STARTED); 
 8005a2e:	2393      	movs	r3, #147	; 0x93
 8005a30:	e0a7      	b.n	8005b82 <_nx_dhcp_interface_start+0x1b2>
    }
                                   
    /* Check if other interface are working.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e01c      	b.n	8005a72 <_nx_dhcp_interface_start+0xa2>
    {

        /* Check which interface record is valid.  */
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	441a      	add	r2, r3
 8005a46:	f641 5388 	movw	r3, #7560	; 0x1d88
 8005a4a:	4413      	add	r3, r2
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00c      	beq.n	8005a6c <_nx_dhcp_interface_start+0x9c>
            (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED))
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	441a      	add	r2, r3
 8005a60:	f641 5389 	movw	r3, #7561	; 0x1d89
 8005a64:	4413      	add	r3, r2
 8005a66:	781b      	ldrb	r3, [r3, #0]
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <_nx_dhcp_interface_start+0xaa>
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0df      	beq.n	8005a38 <_nx_dhcp_interface_start+0x68>
 8005a78:	e000      	b.n	8005a7c <_nx_dhcp_interface_start+0xac>
        {

            /* Yes, other interface have started DHCP.  */
            break;
 8005a7a:	bf00      	nop
        }
    }

    /* Check if any interfaces have started DHCP.  */
    if (i == NX_DHCP_CLIENT_MAX_RECORDS) 
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d14b      	bne.n	8005b1a <_nx_dhcp_interface_start+0x14a>
    {

        /* Bind the UDP socket to the DHCP Client port.  */
        status =  nx_udp_socket_bind(&(dhcp_ptr -> nx_dhcp_socket), NX_DHCP_CLIENT_UDP_PORT, NX_WAIT_FOREVER);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005a88:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8c:	2144      	movs	r1, #68	; 0x44
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f007 f93c 	bl	800cd0c <_nx_udp_socket_bind>
 8005a94:	6138      	str	r0, [r7, #16]

        /* Check for error */
        if (status != NX_SUCCESS)
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <_nx_dhcp_interface_start+0xde>
        {

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005aa2:	4413      	add	r3, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f00c fb53 	bl	8012150 <_txe_mutex_put>
            return(status);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	e069      	b.n	8005b82 <_nx_dhcp_interface_start+0x1b2>
        }

        /* Resume the DHCP processing thread.  */
        status = tx_thread_resume(&(dhcp_ptr -> nx_dhcp_thread));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f00c fdb5 	bl	8012624 <_txe_thread_resume>
 8005aba:	6138      	str	r0, [r7, #16]

        /* Determine if the resume was successful.  */
        if ((status != TX_SUCCESS) && (status != TX_SUSPEND_LIFTED))
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d011      	beq.n	8005ae6 <_nx_dhcp_interface_start+0x116>
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b19      	cmp	r3, #25
 8005ac6:	d00e      	beq.n	8005ae6 <_nx_dhcp_interface_start+0x116>
        {

            /* Error, unbind the DHCP socket.  */
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f007 fce2 	bl	800d498 <_nx_udp_socket_unbind>

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005ada:	4413      	add	r3, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f00c fb37 	bl	8012150 <_txe_mutex_put>
            return(status);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	e04d      	b.n	8005b82 <_nx_dhcp_interface_start+0x1b2>
        }

        /* Activate DHCP Timer.  */
        status = tx_timer_activate(&(dhcp_ptr -> nx_dhcp_timer));
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8005aec:	4413      	add	r3, r2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f00c fdd4 	bl	801269c <_txe_timer_activate>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Determine if the resume was successful.  */
        if (status != NX_SUCCESS)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00e      	beq.n	8005b1a <_nx_dhcp_interface_start+0x14a>
        {

            /* Error, unbind the DHCP socket.  */
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005b02:	4618      	mov	r0, r3
 8005b04:	f007 fcc8 	bl	800d498 <_nx_udp_socket_unbind>

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005b0e:	4413      	add	r3, r2
 8005b10:	4618      	mov	r0, r3
 8005b12:	f00c fb1d 	bl	8012150 <_txe_mutex_put>
            return(status);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	e033      	b.n	8005b82 <_nx_dhcp_interface_start+0x1b2>
        }
    }

    /* Start DHCP service for this interface record.  */
    /* Start the DHCP protocol again by setting the state back to INIT. */
    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	705a      	strb	r2, [r3, #1]
    /* The client begins in INIT state and forms a DHCPDISCOVER message.
       The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
       RFC2131, Section4.4.1, Page36.  */

    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2264      	movs	r2, #100	; 0x64
 8005b24:	621a      	str	r2, [r3, #32]
    interface_record -> nx_dhcp_rtr_interval = 0;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the application has specified a routine for DHCP state change notification.  */
    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b32:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <_nx_dhcp_interface_start+0x17e>
    {

        /* Yes, call the application's state change notify function with the new state.  */
        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b40:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	7852      	ldrb	r2, [r2, #1]
 8005b48:	4611      	mov	r1, r2
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	4798      	blx	r3
    }

    /* Determine if the application has specified a routine for DHCP interface state change notification.  */
    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b54:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <_nx_dhcp_interface_start+0x1a2>
    {

        /* Yes, call the application's state change notify function with the new state.  */
        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b62:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	69d1      	ldr	r1, [r2, #28]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	7852      	ldrb	r2, [r2, #1]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005b78:	4413      	add	r3, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f00c fae8 	bl	8012150 <_txe_mutex_put>

    return NX_SUCCESS;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <_nx_dhcp_interface_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_interface_enable(NX_DHCP *dhcp_ptr, UINT iface_index)   
{
 8005b8a:	b590      	push	{r4, r7, lr}
 8005b8c:	b087      	sub	sp, #28
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
UINT                      i;
ULONG                     client_physical_lsw, client_physical_msw;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8005b94:	2300      	movs	r3, #0
 8005b96:	613b      	str	r3, [r7, #16]


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f00c fa79 	bl	801209c <_txe_mutex_get>

    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	e034      	b.n	8005c1a <_nx_dhcp_interface_enable+0x90>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005bb8:	fb01 f303 	mul.w	r3, r1, r3
 8005bbc:	441a      	add	r2, r3
 8005bbe:	f641 5388 	movw	r3, #7560	; 0x1d88
 8005bc2:	4413      	add	r3, r2
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d116      	bne.n	8005bf8 <_nx_dhcp_interface_enable+0x6e>
        {

            /* Check if the interface is already enabled. */
            if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005bd2:	fb01 f303 	mul.w	r3, r1, r3
 8005bd6:	441a      	add	r2, r3
 8005bd8:	f641 53a4 	movw	r3, #7588	; 0x1da4
 8005bdc:	4413      	add	r3, r2
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d116      	bne.n	8005c14 <_nx_dhcp_interface_enable+0x8a>
            {

                /* Release the DHCP mutex.  */
                 tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005bec:	4413      	add	r3, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f00c faae 	bl	8012150 <_txe_mutex_put>
                 return(NX_DHCP_INTERFACE_ALREADY_ENABLED);
 8005bf4:	23a3      	movs	r3, #163	; 0xa3
 8005bf6:	e061      	b.n	8005cbc <_nx_dhcp_interface_enable+0x132>
        }
        else
        {

            /* Yes, we found an available record.  */
            if (interface_record == NX_NULL)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10a      	bne.n	8005c14 <_nx_dhcp_interface_enable+0x8a>
                interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8005c04:	fb03 f202 	mul.w	r2, r3, r2
 8005c08:	f641 5388 	movw	r3, #7560	; 0x1d88
 8005c0c:	4413      	add	r3, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	4413      	add	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	3301      	adds	r3, #1
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0c7      	beq.n	8005bb0 <_nx_dhcp_interface_enable+0x26>
        }
    }

    /* Check if we found an valid DHCP interface record.  */
    if (interface_record == NX_NULL)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d108      	bne.n	8005c38 <_nx_dhcp_interface_enable+0xae>
    {

        /* No, release the mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005c2c:	4413      	add	r3, r2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f00c fa8e 	bl	8012150 <_txe_mutex_put>
        return(NX_DHCP_NO_RECORDS_AVAILABLE);
 8005c34:	23a7      	movs	r3, #167	; 0xa7
 8005c36:	e041      	b.n	8005cbc <_nx_dhcp_interface_enable+0x132>
    }

    /* Set this record as valid.  */
    interface_record -> nx_dhcp_record_valid = NX_TRUE;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]

    /* Set interface index. */  
    interface_record -> nx_dhcp_interface_index = iface_index;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	61da      	str	r2, [r3, #28]

    /* Initialize the client DHCP IP address with the NULL IP address.  */
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2200      	movs	r2, #0
 8005c48:	60da      	str	r2, [r3, #12]

    /* Initialize the client DHCP server IP address.  */
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	615a      	str	r2, [r3, #20]

    /* Initialize renew and rebind timeout values to zero.  */
    interface_record -> nx_dhcp_rebind_time = 0;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2200      	movs	r2, #0
 8005c54:	635a      	str	r2, [r3, #52]	; 0x34
    interface_record -> nx_dhcp_renewal_time =  0;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup for infinite lease time request.  */
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Get the client MAC address from the device interface. */
    client_physical_msw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	214c      	movs	r1, #76	; 0x4c
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60fb      	str	r3, [r7, #12]
    client_physical_lsw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	214c      	movs	r1, #76	; 0x4c
 8005c82:	fb01 f303 	mul.w	r3, r1, r3
 8005c86:	4413      	add	r3, r2
 8005c88:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60bb      	str	r3, [r7, #8]

    /* Generate a 'unique' client transaction ID from the MAC address for each message to the server. */
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	ea82 0403 	eor.w	r4, r2, r3
 8005c98:	f00d f998 	bl	8012fcc <rand>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	ea84 0203 	eor.w	r2, r4, r3
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	605a      	str	r2, [r3, #4]

    /* Clear the timeout.  */
    interface_record -> nx_dhcp_timeout = 0;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	621a      	str	r2, [r3, #32]

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex)); 
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005cb2:	4413      	add	r3, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f00c fa4b 	bl	8012150 <_txe_mutex_put>
    return(NX_SUCCESS); 
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd90      	pop	{r4, r7, pc}

08005cc4 <_nxe_dhcp_stop>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_stop(NX_DHCP *dhcp_ptr)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for invalid input pointer.  */
    if ((dhcp_ptr == NX_NULL) || (dhcp_ptr -> nx_dhcp_id != NX_DHCP_ID))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d004      	beq.n	8005cdc <_nxe_dhcp_stop+0x18>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a11      	ldr	r2, [pc, #68]	; (8005d1c <_nxe_dhcp_stop+0x58>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d001      	beq.n	8005ce0 <_nxe_dhcp_stop+0x1c>
        return(NX_PTR_ERROR);
 8005cdc:	2307      	movs	r3, #7
 8005cde:	e018      	b.n	8005d12 <_nxe_dhcp_stop+0x4e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005ce0:	f3ef 8305 	mrs	r3, IPSR
 8005ce4:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8005ce6:	68ba      	ldr	r2, [r7, #8]
    
    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 8005ce8:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <_nxe_dhcp_stop+0x5c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d108      	bne.n	8005d04 <_nxe_dhcp_stop+0x40>
 8005cf2:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <_nxe_dhcp_stop+0x60>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <_nxe_dhcp_stop+0x40>
 8005cfa:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <_nxe_dhcp_stop+0x60>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <_nxe_dhcp_stop+0x64>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d101      	bne.n	8005d08 <_nxe_dhcp_stop+0x44>
 8005d04:	2311      	movs	r3, #17
 8005d06:	e004      	b.n	8005d12 <_nxe_dhcp_stop+0x4e>

    /* Call actual DHCP stop service.  */
    status =  _nx_dhcp_stop(dhcp_ptr);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f80f 	bl	8005d2c <_nx_dhcp_stop>
 8005d0e:	60f8      	str	r0, [r7, #12]

    /* Return status.  */
    return(status);
 8005d10:	68fb      	ldr	r3, [r7, #12]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	44484350 	.word	0x44484350
 8005d20:	2000008c 	.word	0x2000008c
 8005d24:	20008198 	.word	0x20008198
 8005d28:	200082e0 	.word	0x200082e0

08005d2c <_nx_dhcp_stop>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_stop(NX_DHCP *dhcp_ptr)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

UINT i;


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d40:	4618      	mov	r0, r3
 8005d42:	f00c f9ab 	bl	801209c <_txe_mutex_get>

    /* Check all interfaces to find out which need to stop the DHCP protocol.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	e02b      	b.n	8005da4 <_nx_dhcp_stop+0x78>
    {

        /* Check if this record is valid.  */
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	441a      	add	r2, r3
 8005d5a:	f641 5388 	movw	r3, #7560	; 0x1d88
 8005d5e:	4413      	add	r3, r2
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d01b      	beq.n	8005d9e <_nx_dhcp_stop+0x72>
            (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED))
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005d6e:	fb01 f303 	mul.w	r3, r1, r3
 8005d72:	441a      	add	r2, r3
 8005d74:	f641 5389 	movw	r3, #7561	; 0x1d89
 8005d78:	4413      	add	r3, r2
 8005d7a:	781b      	ldrb	r3, [r3, #0]
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00e      	beq.n	8005d9e <_nx_dhcp_stop+0x72>
        {

            /* Stop DHCP.  */
            _nx_dhcp_interface_stop(dhcp_ptr, dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	441a      	add	r2, r3
 8005d8e:	f641 53a4 	movw	r3, #7588	; 0x1da4
 8005d92:	4413      	add	r3, r2
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f825 	bl	8005de8 <_nx_dhcp_interface_stop>
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3301      	adds	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0d0      	beq.n	8005d4c <_nx_dhcp_stop+0x20>
       }
    }

    /* Stop DHCP Thread. */
    tx_thread_suspend(&(dhcp_ptr -> nx_dhcp_thread));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 8005db0:	4618      	mov	r0, r3
 8005db2:	f00c fc55 	bl	8012660 <_txe_thread_suspend>

    /* Deactivate DHCP Timer.  */
    tx_timer_deactivate(&(dhcp_ptr -> nx_dhcp_timer));
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8005dbc:	4413      	add	r3, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f00c fd36 	bl	8012830 <_txe_timer_deactivate>

    /* Ubind UDP socket.  */
    nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f007 fb64 	bl	800d498 <_nx_udp_socket_unbind>

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005dd6:	4413      	add	r3, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f00c f9b9 	bl	8012150 <_txe_mutex_put>
    return(NX_SUCCESS);
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <_nx_dhcp_interface_stop>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_dhcp_interface_stop(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]

UINT                     i;
UINT                     status;
UINT                     original_state;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60bb      	str	r3, [r7, #8]


    /* Obtain the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8005e02:	4618      	mov	r0, r3
 8005e04:	f00c f94a 	bl	801209c <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 8005e08:	f107 0308 	add.w	r3, r7, #8
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 fcb4 	bl	800777e <_nx_dhcp_interface_record_find>
 8005e16:	6138      	str	r0, [r7, #16]

    /* Check status.  */
    if (status)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d008      	beq.n	8005e30 <_nx_dhcp_interface_stop+0x48>
    {

        /* Not found. Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005e24:	4413      	add	r3, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f00c f992 	bl	8012150 <_txe_mutex_put>
        return(status);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	e085      	b.n	8005f3c <_nx_dhcp_interface_stop+0x154>
    }

    /* Get the original state.  */
    original_state = interface_record -> nx_dhcp_state;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	60fb      	str	r3, [r7, #12]

    /* Determine if DHCP is started.  */
    if (interface_record -> nx_dhcp_state == NX_DHCP_STATE_NOT_STARTED)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d108      	bne.n	8005e50 <_nx_dhcp_interface_stop+0x68>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005e44:	4413      	add	r3, r2
 8005e46:	4618      	mov	r0, r3
 8005e48:	f00c f982 	bl	8012150 <_txe_mutex_put>
   
        /* DHCP is not started so it can't be stopped.  */
        return(NX_DHCP_NOT_STARTED);
 8005e4c:	2396      	movs	r3, #150	; 0x96
 8005e4e:	e075      	b.n	8005f3c <_nx_dhcp_interface_stop+0x154>
    }

    /* Set the state to NX_DHCP_STATE_NOT_STARTED.  */
    interface_record -> nx_dhcp_state = NX_DHCP_STATE_NOT_STARTED;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	705a      	strb	r2, [r3, #1]

    /* Check if the state is changed.  */
    if (original_state != interface_record -> nx_dhcp_state)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d022      	beq.n	8005ea8 <_nx_dhcp_interface_stop+0xc0>
    {

        /* Determine if the application has specified a routine for DHCP state change notification.  */
        if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e68:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d009      	beq.n	8005e84 <_nx_dhcp_interface_stop+0x9c>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e76:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	7852      	ldrb	r2, [r2, #1]
 8005e7e:	4611      	mov	r1, r2
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3
        }

        /* Determine if the application has specified a routine for DHCP interface state change notification.  */
        if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8a:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <_nx_dhcp_interface_stop+0xc0>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record->nx_dhcp_state);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e98:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	69d1      	ldr	r1, [r2, #28]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	7852      	ldrb	r2, [r2, #1]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	4798      	blx	r3
        }
    }

    /* Check if other interfaces are running DHCP.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	e025      	b.n	8005efa <_nx_dhcp_interface_stop+0x112>
    {

        /* Check which interface record is valid.  */
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005eb6:	fb01 f303 	mul.w	r3, r1, r3
 8005eba:	441a      	add	r2, r3
 8005ebc:	f641 5388 	movw	r3, #7560	; 0x1d88
 8005ec0:	4413      	add	r3, r2
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d015      	beq.n	8005ef4 <_nx_dhcp_interface_stop+0x10c>
            (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED))
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	441a      	add	r2, r3
 8005ed6:	f641 5389 	movw	r3, #7561	; 0x1d89
 8005eda:	4413      	add	r3, r2
 8005edc:	781b      	ldrb	r3, [r3, #0]
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d008      	beq.n	8005ef4 <_nx_dhcp_interface_stop+0x10c>

            /* Yes, other interfaces have started DHCP. We can assume Netx and ThreadX
               resources need to stay activated. */

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005ee8:	4413      	add	r3, r2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f00c f930 	bl	8012150 <_txe_mutex_put>
            return(NX_SUCCESS);
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e023      	b.n	8005f3c <_nx_dhcp_interface_stop+0x154>
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0d6      	beq.n	8005eae <_nx_dhcp_interface_stop+0xc6>
        }
    }
                 
    /* Has DHCP stopped on all interfaces? */
    if (i == NX_DHCP_CLIENT_MAX_RECORDS) 
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d112      	bne.n	8005f2c <_nx_dhcp_interface_stop+0x144>
    {

        /* Yes, stop DHCP Thread. */
        tx_thread_suspend(&(dhcp_ptr -> nx_dhcp_thread));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f00c fba7 	bl	8012660 <_txe_thread_suspend>

        /* Deactivate DHCP Timer.  */
        tx_timer_deactivate(&(dhcp_ptr -> nx_dhcp_timer));
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8005f18:	4413      	add	r3, r2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f00c fc88 	bl	8012830 <_txe_timer_deactivate>

        /* Unbind UDP socket.  */
        nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8005f26:	4618      	mov	r0, r3
 8005f28:	f007 fab6 	bl	800d498 <_nx_udp_socket_unbind>
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr->nx_dhcp_mutex));
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005f32:	4413      	add	r3, r2
 8005f34:	4618      	mov	r0, r3
 8005f36:	f00c f90b 	bl	8012150 <_txe_mutex_put>
    return(NX_SUCCESS);
 8005f3a:	2300      	movs	r3, #0

}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <_nx_dhcp_udp_receive_notify>:
/*                                            multiple client instances,  */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_udp_receive_notify(NX_UDP_SOCKET *socket_ptr)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]

NX_DHCP *dhcp_ptr;

    dhcp_ptr = (NX_DHCP *)(socket_ptr -> nx_udp_socket_reserved_ptr);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f50:	60fb      	str	r3, [r7, #12]

    /* Set the data received event flag.  */
    tx_event_flags_set(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_RECEIVE_EVENT, TX_OR);
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	f641 5338 	movw	r3, #7480	; 0x1d38
 8005f58:	4413      	add	r3, r2
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f00b ff92 	bl	8011e88 <_txe_event_flags_set>
}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <_nx_dhcp_timeout_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_timeout_entry(ULONG dhcp)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

NX_DHCP     *dhcp_ptr;


    /* Setup DHCP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(dhcp_ptr, NX_DHCP, dhcp)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	60fb      	str	r3, [r7, #12]

    /* Set the data event flag.  */
    tx_event_flags_set(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_TIMER_EVENT, TX_OR);
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	f641 5338 	movw	r3, #7480	; 0x1d38
 8005f7e:	4413      	add	r3, r2
 8005f80:	2200      	movs	r2, #0
 8005f82:	2102      	movs	r1, #2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f00b ff7f 	bl	8011e88 <_txe_event_flags_set>
}
 8005f8a:	bf00      	nop
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <_nx_dhcp_thread_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_thread_entry(ULONG dhcp_instance)
{
 8005f92:	b590      	push	{r4, r7, lr}
 8005f94:	b08f      	sub	sp, #60	; 0x3c
 8005f96:	af02      	add	r7, sp, #8
 8005f98:	6078      	str	r0, [r7, #4]
UINT                      status;
UINT                      iface_index;
UINT                      source_port;
ULONG                     source_ip_address;
UINT                      protocol;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]

    /* Setup the DHCP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(dhcp_ptr, NX_DHCP, dhcp_instance)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Obtain the DHCP mutex before processing an.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8005fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa4:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005fa8:	4413      	add	r3, r2
 8005faa:	f04f 31ff 	mov.w	r1, #4294967295
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f00c f874 	bl	801209c <_txe_mutex_get>
    /* Enter the DHCP Client task loop.  */
    do
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8005fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fb6:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005fba:	4413      	add	r3, r2
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f00c f8c7 	bl	8012150 <_txe_mutex_put>

        /* Wait for a DHCP client activity.  */
        tx_event_flags_get(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_ALL_EVENTS, 
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	f641 5038 	movw	r0, #7480	; 0x1d38
 8005fc8:	4418      	add	r0, r3
 8005fca:	f107 0320 	add.w	r3, r7, #32
 8005fce:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd2:	9200      	str	r2, [sp, #0]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8005fda:	f00b feff 	bl	8011ddc <_txe_event_flags_get>
                           TX_OR_CLEAR, &events, TX_WAIT_FOREVER);

        /* Obtain the DHCP mutex before processing an.  */
        tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8005fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fe0:	f641 5304 	movw	r3, #7428	; 0x1d04
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8005fea:	4618      	mov	r0, r3
 8005fec:	f00c f856 	bl	801209c <_txe_mutex_get>

        /* Check for DHCP data received event.  */
        if  (events & NX_DHCP_CLIENT_RECEIVE_EVENT)
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d03a      	beq.n	8006070 <_nx_dhcp_thread_entry+0xde>
            /* Loop to receive DHCP message.  */
            while(1)
            {

                /* Check for an incoming DHCP packet with non blocking option. */
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8006000:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006004:	2200      	movs	r2, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f007 f89e 	bl	800d148 <_nx_udp_socket_receive>
 800600c:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check for packet receive errors. */
                if (status != NX_SUCCESS)
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	2b00      	cmp	r3, #0
 8006012:	d12c      	bne.n	800606e <_nx_dhcp_thread_entry+0xdc>
                {
                    break;
                }

                /* Find the source IP address, port, interface this packet is on. */
                status = nx_udp_packet_info_extract(packet_ptr, &source_ip_address, &protocol, &source_port, &iface_index);
 8006014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006016:	f107 0418 	add.w	r4, r7, #24
 800601a:	f107 0210 	add.w	r2, r7, #16
 800601e:	f107 0114 	add.w	r1, r7, #20
 8006022:	f107 031c 	add.w	r3, r7, #28
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	4623      	mov	r3, r4
 800602a:	f006 fbf0 	bl	800c80e <_nx_udp_packet_info_extract>
 800602e:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check status.  */
                if (status != NX_SUCCESS) 
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	2b00      	cmp	r3, #0
 8006034:	d004      	beq.n	8006040 <_nx_dhcp_thread_entry+0xae>
                {

                    nx_packet_release(packet_ptr); 
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	4618      	mov	r0, r3
 800603a:	f006 f9c9 	bl	800c3d0 <_nx_packet_release>
                    continue;
 800603e:	e015      	b.n	800606c <_nx_dhcp_thread_entry+0xda>
                }

                /* Find the interface record.  */
                status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f107 020c 	add.w	r2, r7, #12
 8006046:	4619      	mov	r1, r3
 8006048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800604a:	f001 fb98 	bl	800777e <_nx_dhcp_interface_record_find>
 800604e:	62b8      	str	r0, [r7, #40]	; 0x28

                /* Check status.  */
                if (status != NX_SUCCESS)
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	2b00      	cmp	r3, #0
 8006054:	d004      	beq.n	8006060 <_nx_dhcp_thread_entry+0xce>
                {

                    /* Release the original packet . */
                    nx_packet_release(packet_ptr);
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	4618      	mov	r0, r3
 800605a:	f006 f9b9 	bl	800c3d0 <_nx_packet_release>
                    continue;
 800605e:	e005      	b.n	800606c <_nx_dhcp_thread_entry+0xda>
                }
                
                /* Process DHCP packet.  */
                _nx_dhcp_packet_process(dhcp_ptr, interface_record, packet_ptr);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006064:	4619      	mov	r1, r3
 8006066:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006068:	f000 f80c 	bl	8006084 <_nx_dhcp_packet_process>
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 800606c:	e7c5      	b.n	8005ffa <_nx_dhcp_thread_entry+0x68>
                    break;
 800606e:	bf00      	nop
            }
        }

        /* Timer event.  */
        if (events & NX_DHCP_CLIENT_TIMER_EVENT)
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d09c      	beq.n	8005fb4 <_nx_dhcp_thread_entry+0x22>
        {
            _nx_dhcp_timeout_process(dhcp_ptr);
 800607a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800607c:	f000 fa64 	bl	8006548 <_nx_dhcp_timeout_process>
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8006080:	e798      	b.n	8005fb4 <_nx_dhcp_thread_entry+0x22>
	...

08006084 <_nx_dhcp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_dhcp_packet_process(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, NX_PACKET *packet_ptr)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b094      	sub	sp, #80	; 0x50
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
#ifdef NX_DHCP_CLIENT_SEND_ARP_PROBE
ULONG       probing_delay;
#endif

    /* Set the IP pointer and interface index.  */
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	647b      	str	r3, [r7, #68]	; 0x44
    iface_index = interface_record -> nx_dhcp_interface_index;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length <= NX_BOOTP_OFFSET_OPTIONS)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	2bf0      	cmp	r3, #240	; 0xf0
 80060a2:	d803      	bhi.n	80060ac <_nx_dhcp_packet_process+0x28>
    {

        /* Release the packet. */
        nx_packet_release(packet_ptr);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f006 f993 	bl	800c3d0 <_nx_packet_release>

        /* Return.  */
        return;
 80060aa:	e24a      	b.n	8006542 <_nx_dhcp_packet_process+0x4be>
    }

    /* Copy the received packet (datagram) over to a packet from the DHCP Client pool and release
       the packet back to receive packet pool as soon as possible. */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &new_packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8d3 0bd8 	ldr.w	r0, [r3, #3032]	; 0xbd8
 80060b2:	f107 0118 	add.w	r1, r7, #24
 80060b6:	2300      	movs	r3, #0
 80060b8:	222c      	movs	r2, #44	; 0x2c
 80060ba:	f005 fcfb 	bl	800bab4 <_nx_packet_allocate>
 80060be:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Check status.  */
    if (status != NX_SUCCESS)
 80060c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <_nx_dhcp_packet_process+0x4a>
    {

        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f006 f982 	bl	800c3d0 <_nx_packet_release>

        /* Error allocating packet, return error status.  */
        return;
 80060cc:	e239      	b.n	8006542 <_nx_dhcp_packet_process+0x4be>
    }

    /* Verify the incoming packet does not exceed our DHCP Client packet payload. */
    if ((ULONG)(new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_prepend_ptr) < ((packet_ptr) -> nx_packet_length))
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	695a      	ldr	r2, [r3, #20]
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	429a      	cmp	r2, r3
 80060e0:	d207      	bcs.n	80060f2 <_nx_dhcp_packet_process+0x6e>
    {

        /* Release the newly allocated packet . */
        nx_packet_release(new_packet_ptr);
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f006 f973 	bl	800c3d0 <_nx_packet_release>
        
        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f006 f970 	bl	800c3d0 <_nx_packet_release>

        return;
 80060f0:	e227      	b.n	8006542 <_nx_dhcp_packet_process+0x4be>
    }

    /* Initialize the offset to the beginning of the packet buffer. */
    offset = 0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	63bb      	str	r3, [r7, #56]	; 0x38
    status = nx_packet_data_extract_offset(packet_ptr, offset, (VOID *)new_packet_ptr -> nx_packet_prepend_ptr, (packet_ptr) -> nx_packet_length, &bytes_copied);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80060fe:	f107 0310 	add.w	r3, r7, #16
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	460b      	mov	r3, r1
 8006106:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f005 fee8 	bl	800bede <_nx_packet_data_extract_offset>
 800610e:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Check status.  */
    if ((status != NX_SUCCESS) || (bytes_copied == 0))
 8006110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d102      	bne.n	800611c <_nx_dhcp_packet_process+0x98>
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d107      	bne.n	800612c <_nx_dhcp_packet_process+0xa8>
    {

        /* Release the allocated packet we'll never send. */
        nx_packet_release(new_packet_ptr);
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	4618      	mov	r0, r3
 8006120:	f006 f956 	bl	800c3d0 <_nx_packet_release>

        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f006 f953 	bl	800c3d0 <_nx_packet_release>

        /* Error extracting packet buffer, return error status.  */
        return;
 800612a:	e20a      	b.n	8006542 <_nx_dhcp_packet_process+0x4be>
    }

    /* Update the new packet with the bytes copied.  For chained packets, this will reflect the total
       'datagram' length. */
    new_packet_ptr -> nx_packet_length = bytes_copied; 
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	625a      	str	r2, [r3, #36]	; 0x24


    /* Now we can release the original packet. */
    nx_packet_release(packet_ptr);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f006 f94c 	bl	800c3d0 <_nx_packet_release>

    /* Set the interface index and MAC address.  */
    dhcp_client_mac_msw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8006138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800613a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800613c:	214c      	movs	r1, #76	; 0x4c
 800613e:	fb01 f303 	mul.w	r3, r1, r3
 8006142:	4413      	add	r3, r2
 8006144:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	637b      	str	r3, [r7, #52]	; 0x34
    dhcp_client_mac_lsw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 800614c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800614e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006150:	214c      	movs	r1, #76	; 0x4c
 8006152:	fb01 f303 	mul.w	r3, r1, r3
 8006156:	4413      	add	r3, r2
 8006158:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Set work_ptr.  */
    work_ptr = new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_CLIENT_HW;
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	331c      	adds	r3, #28
 8006166:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the target MAC address in the DHCP message.  */
    packet_client_mac_msw = (((ULONG)work_ptr[0]) << 8) | ((ULONG)work_ptr[1]);
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006170:	3201      	adds	r2, #1
 8006172:	7812      	ldrb	r2, [r2, #0]
 8006174:	4313      	orrs	r3, r2
 8006176:	62bb      	str	r3, [r7, #40]	; 0x28
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	3302      	adds	r3, #2
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	061a      	lsls	r2, r3, #24
                            (((ULONG)work_ptr[3]) << 16) |
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	3303      	adds	r3, #3
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	041b      	lsls	r3, r3, #16
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8006188:	431a      	orrs	r2, r3
                            (((ULONG)work_ptr[4]) << 8) |
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	3304      	adds	r3, #4
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	021b      	lsls	r3, r3, #8
                            (((ULONG)work_ptr[3]) << 16) |
 8006192:	4313      	orrs	r3, r2
                            ((ULONG)work_ptr[5]);
 8006194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006196:	3205      	adds	r2, #5
 8006198:	7812      	ldrb	r2, [r2, #0]
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 800619a:	4313      	orrs	r3, r2
 800619c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Determine if the  MAC address matches ours.  */
    if ((packet_client_mac_msw != dhcp_client_mac_msw) || (packet_client_mac_lsw != dhcp_client_mac_lsw))
 800619e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d103      	bne.n	80061ae <_nx_dhcp_packet_process+0x12a>
 80061a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d004      	beq.n	80061b8 <_nx_dhcp_packet_process+0x134>
    {

        /* Release the allocated packet. */
        nx_packet_release(new_packet_ptr);
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f006 f90d 	bl	800c3d0 <_nx_packet_release>
        return;
 80061b6:	e1c4      	b.n	8006542 <_nx_dhcp_packet_process+0x4be>
    }

    /* Check if XIDs match.  */
    if (_nx_dhcp_get_data(new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_XID, 4) != interface_record -> nx_dhcp_xid)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	3304      	adds	r3, #4
 80061be:	2104      	movs	r1, #4
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 fa6d 	bl	80076a0 <_nx_dhcp_get_data>
 80061c6:	4602      	mov	r2, r0
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d004      	beq.n	80061da <_nx_dhcp_packet_process+0x156>
    {

        /* Release the original packet . */
        nx_packet_release(new_packet_ptr);
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f006 f8fc 	bl	800c3d0 <_nx_packet_release>

        /* Error with XID data, return error status.  */
        return;
 80061d8:	e1b3      	b.n	8006542 <_nx_dhcp_packet_process+0x4be>
    }

    /* Save the original state for the state change callback; after this point we will likely change it. */                          
    original_state  = interface_record -> nx_dhcp_state;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	623b      	str	r3, [r7, #32]

    /* The action depends on the current state of the dhcp client. */
    switch (interface_record -> nx_dhcp_state)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	3b03      	subs	r3, #3
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	f200 816c 	bhi.w	80064c4 <_nx_dhcp_packet_process+0x440>
 80061ec:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <_nx_dhcp_packet_process+0x170>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	08006209 	.word	0x08006209
 80061f8:	08006295 	.word	0x08006295
 80061fc:	080064c5 	.word	0x080064c5
 8006200:	0800635d 	.word	0x0800635d
 8006204:	08006413 	.word	0x08006413

        case NX_DHCP_STATE_SELECTING:
        {
    
            /* Set up a buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	61fb      	str	r3, [r7, #28]

            /* Get what type of DHCP message it is. */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr -> nx_packet_length);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	f107 0214 	add.w	r2, r7, #20
 8006216:	2135      	movs	r1, #53	; 0x35
 8006218:	69f8      	ldr	r0, [r7, #28]
 800621a:	f001 f892 	bl	8007342 <_nx_dhcp_get_option_value>
 800621e:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Determine if it is an Offer.  */        
            if ((status == NX_SUCCESS) && (dhcp_type == NX_DHCP_TYPE_DHCPOFFER))
 8006220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006222:	2b00      	cmp	r3, #0
 8006224:	f040 8150 	bne.w	80064c8 <_nx_dhcp_packet_process+0x444>
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2b02      	cmp	r3, #2
 800622c:	f040 814c 	bne.w	80064c8 <_nx_dhcp_packet_process+0x444>
            {

                /* Yes, a valid Offer is received!  */

                /* Increment the number of offers received.  */
                interface_record -> nx_dhcp_offers_received++;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

                /* Update the DHCP Client interface parameters (IP address, server IP, lease, renewal and rebind times */
                if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 ff5b 	bl	8007102 <_nx_dhcp_extract_information>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	f040 813c 	bne.w	80064cc <_nx_dhcp_packet_process+0x448>
                    break;

                /* Send the DHCP Request to accept the offer.  */
                _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8006254:	2203      	movs	r2, #3
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 fb29 	bl	80068b0 <_nx_dhcp_send_request_internal>

                /* Reset the initial timeout to NX_DHCP_MIN_RETRANS_TIMEOUT seconds  */
                interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006264:	625a      	str	r2, [r3, #36]	; 0x24
                interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	621a      	str	r2, [r3, #32]

                /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	4618      	mov	r0, r3
 8006274:	f001 f968 	bl	8007548 <_nx_dhcp_add_randomize>
 8006278:	4602      	mov	r2, r0
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	621a      	str	r2, [r3, #32]

                /* Check if the timeout is zero.  */
                if (interface_record -> nx_dhcp_timeout == 0)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d102      	bne.n	800628c <_nx_dhcp_packet_process+0x208>
                    interface_record -> nx_dhcp_timeout = 1;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2201      	movs	r2, #1
 800628a:	621a      	str	r2, [r3, #32]

                /* Update the state to Requesting state.  */
                interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2204      	movs	r2, #4
 8006290:	705a      	strb	r2, [r3, #1]
           }

           /* Let the timeout processing handle retransmissions. We're done here */
           break;
 8006292:	e119      	b.n	80064c8 <_nx_dhcp_packet_process+0x444>
            /* Also initialize status to success since we won't make the get option call. */               
            status = NX_SUCCESS;
#endif

            /* Setup buffer pointer.  */
            buffer = new_packet_ptr -> nx_packet_prepend_ptr;
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	61fb      	str	r3, [r7, #28]

#ifndef NX_DHCP_ENABLE_BOOTP
            /* There is a valid DHCP response, see if it is an ACK.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	f107 0214 	add.w	r2, r7, #20
 80062a2:	2135      	movs	r1, #53	; 0x35
 80062a4:	69f8      	ldr	r0, [r7, #28]
 80062a6:	f001 f84c 	bl	8007342 <_nx_dhcp_get_option_value>
 80062aa:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif
            /* Proceed to processing the server response?   */
            if (status == NX_SUCCESS)
 80062ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f040 810e 	bne.w	80064d0 <_nx_dhcp_packet_process+0x44c>
            {

                /* Yes, check and see if it is an ACK back to our previous request.  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2b05      	cmp	r3, #5
 80062b8:	d12d      	bne.n	8006316 <_nx_dhcp_packet_process+0x292>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Either we got an ACK or we are using BOOTP.  */

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 ff16 	bl	8007102 <_nx_dhcp_extract_information>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f040 80fb 	bne.w	80064d4 <_nx_dhcp_packet_process+0x450>
                    /* Setup the handler to indicate the we want collision notification.  */
                    ip_ptr -> nx_ip_interface[iface_index].nx_interface_ip_conflict_notify_handler = _nx_dhcp_ip_conflict;

#else    /* NX_DHCP_CLIENT_SEND_ARP_PROBE not defined: */

                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80062ea:	f004 fa8d 	bl	800a808 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <_nx_dhcp_packet_process+0x282>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	4619      	mov	r1, r3
 8006300:	4610      	mov	r0, r2
 8006302:	f004 f90d 	bl	800a520 <_nx_ip_gateway_address_set>
                    }

                    /* No ARP probe performed. OK to change to the Bound state.  */
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2205      	movs	r2, #5
 800630a:	705a      	strb	r2, [r3, #1]
#ifdef NX_DHCP_ENABLE_BOOTP
                    /* BOOTP does not use timeouts.  For the life of this DHCP Client application, keep the same IP address. */
                    interface_record -> nx_dhcp_timeout = NX_WAIT_FOREVER; 
#else
                    /* Set the renewal time received from the server.  */
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	621a      	str	r2, [r3, #32]
#endif /* NX_DHCP_ENABLE_BOOTP  */

#endif /* NX_DHCP_CLIENT_SEND_ARP_PROBE*/

                    break;
 8006314:	e0e7      	b.n	80064e6 <_nx_dhcp_packet_process+0x462>
                }
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b06      	cmp	r3, #6
 800631a:	f040 80d9 	bne.w	80064d0 <_nx_dhcp_packet_process+0x44c>
                {
                                                 
                    /* Increment the number of NACKs received.  */
                    interface_record -> nx_dhcp_nacks_received++;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

                    /* Reinitialize DHCP.  */
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	4619      	mov	r1, r3
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff fa36 	bl	80057a4 <_nx_dhcp_interface_reinitialize>

                    /* Restart DHCP service for this interface record.  */

                    /* Start the DHCP protocol again by setting the state back to INIT. */
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2202      	movs	r2, #2
 800633c:	705a      	strb	r2, [r3, #1]
                    /* The client begins in INIT state and forms a DHCPDISCOVER message.
                       The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
                       RFC2131, Section4.4.1, Page36.  */

                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2264      	movs	r2, #100	; 0x64
 8006342:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2200      	movs	r2, #0
 8006348:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Check if the timeout is less than 1 second.  */
                    if (interface_record -> nx_dhcp_timeout < NX_IP_PERIODIC_RATE)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	2b63      	cmp	r3, #99	; 0x63
 8006350:	f200 80be 	bhi.w	80064d0 <_nx_dhcp_packet_process+0x44c>
                        interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2264      	movs	r2, #100	; 0x64
 8006358:	621a      	str	r2, [r3, #32]
                }
            }
            break;
 800635a:	e0b9      	b.n	80064d0 <_nx_dhcp_packet_process+0x44c>

        case NX_DHCP_STATE_RENEWING:
        {

            /* Setup the buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	61fb      	str	r3, [r7, #28]

            /* Check the server response if it accepts are renewal.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	f107 0214 	add.w	r2, r7, #20
 800636a:	2135      	movs	r1, #53	; 0x35
 800636c:	69f8      	ldr	r0, [r7, #28]
 800636e:	f000 ffe8 	bl	8007342 <_nx_dhcp_get_option_value>
 8006372:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Was the option retrieved?  */
            if (status == NX_SUCCESS)
 8006374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006376:	2b00      	cmp	r3, #0
 8006378:	f040 80ae 	bne.w	80064d8 <_nx_dhcp_packet_process+0x454>
            {

                /* Yes, Check for an ACK.  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2b05      	cmp	r3, #5
 8006380:	d12d      	bne.n	80063de <_nx_dhcp_packet_process+0x35a>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 feb2 	bl	8007102 <_nx_dhcp_extract_information>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f040 809b 	bne.w	80064dc <_nx_dhcp_packet_process+0x458>
                        break;
                    
                    /* Set the IP address and gateway address from the value extracted from the Server's DHCP response. */
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80063b2:	f004 fa29 	bl	800a808 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,  
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <_nx_dhcp_packet_process+0x34a>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f004 f8a9 	bl	800a520 <_nx_ip_gateway_address_set>
                    }

                    /* Lease has been renewed, set the countdown timer back to the renewal time and go back 
                       to the Bound state*/
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	621a      	str	r2, [r3, #32]

                    /* Change the state back to bound.  */
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2205      	movs	r2, #5
 80063da:	705a      	strb	r2, [r3, #1]
                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
                    interface_record -> nx_dhcp_rtr_interval = 0;
                }
            }
            break;
 80063dc:	e07c      	b.n	80064d8 <_nx_dhcp_packet_process+0x454>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b06      	cmp	r3, #6
 80063e2:	d179      	bne.n	80064d8 <_nx_dhcp_packet_process+0x454>
                    interface_record -> nx_dhcp_nacks_received++;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	4619      	mov	r1, r3
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f7ff f9d3 	bl	80057a4 <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2202      	movs	r2, #2
 8006402:	705a      	strb	r2, [r3, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2264      	movs	r2, #100	; 0x64
 8006408:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2200      	movs	r2, #0
 800640e:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8006410:	e062      	b.n	80064d8 <_nx_dhcp_packet_process+0x454>

        case NX_DHCP_STATE_REBINDING:
        {

            /* Setup buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	61fb      	str	r3, [r7, #28]

            /* There is a valid DHCP response, pickup the type of response.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	f107 0214 	add.w	r2, r7, #20
 8006420:	2135      	movs	r1, #53	; 0x35
 8006422:	69f8      	ldr	r0, [r7, #28]
 8006424:	f000 ff8d 	bl	8007342 <_nx_dhcp_get_option_value>
 8006428:	63f8      	str	r0, [r7, #60]	; 0x3c

            /* Valid response?  */
            if (status == NX_SUCCESS)
 800642a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d157      	bne.n	80064e0 <_nx_dhcp_packet_process+0x45c>
            {

                /* Is it an ACK response?  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2b05      	cmp	r3, #5
 8006434:	d12c      	bne.n	8006490 <_nx_dhcp_packet_process+0x40c>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 fe58 	bl	8007102 <_nx_dhcp_extract_information>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d145      	bne.n	80064e4 <_nx_dhcp_packet_process+0x460>
                        break;

                    /* Set the IP address and gateway address from the value extracted from the Server's DHCP response. */
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006462:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006464:	f004 f9d0 	bl	800a808 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,  
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <_nx_dhcp_packet_process+0x3fc>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	4619      	mov	r1, r3
 800647a:	4610      	mov	r0, r2
 800647c:	f004 f850 	bl	800a520 <_nx_ip_gateway_address_set>
                    }

                    /* Lease has been renewed, set the countdown timer back to the renewal time and go back 
                       to the Bound state.  */
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	621a      	str	r2, [r3, #32]

                    /* Change to bound state.  */
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_BOUND;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2205      	movs	r2, #5
 800648c:	705a      	strb	r2, [r3, #1]
                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
                    interface_record -> nx_dhcp_rtr_interval = 0;
                }
            }
            break;
 800648e:	e027      	b.n	80064e0 <_nx_dhcp_packet_process+0x45c>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b06      	cmp	r3, #6
 8006494:	d124      	bne.n	80064e0 <_nx_dhcp_packet_process+0x45c>
                    interface_record -> nx_dhcp_nacks_received++;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	4619      	mov	r1, r3
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff f97a 	bl	80057a4 <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2202      	movs	r2, #2
 80064b4:	705a      	strb	r2, [r3, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2264      	movs	r2, #100	; 0x64
 80064ba:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2200      	movs	r2, #0
 80064c0:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 80064c2:	e00d      	b.n	80064e0 <_nx_dhcp_packet_process+0x45c>
        }

        default:
            break;
 80064c4:	bf00      	nop
 80064c6:	e00e      	b.n	80064e6 <_nx_dhcp_packet_process+0x462>
           break;
 80064c8:	bf00      	nop
 80064ca:	e00c      	b.n	80064e6 <_nx_dhcp_packet_process+0x462>
                    break;
 80064cc:	bf00      	nop
 80064ce:	e00a      	b.n	80064e6 <_nx_dhcp_packet_process+0x462>
            break;
 80064d0:	bf00      	nop
 80064d2:	e008      	b.n	80064e6 <_nx_dhcp_packet_process+0x462>
                        break;
 80064d4:	bf00      	nop
 80064d6:	e006      	b.n	80064e6 <_nx_dhcp_packet_process+0x462>
            break;
 80064d8:	bf00      	nop
 80064da:	e004      	b.n	80064e6 <_nx_dhcp_packet_process+0x462>
                        break;
 80064dc:	bf00      	nop
 80064de:	e002      	b.n	80064e6 <_nx_dhcp_packet_process+0x462>
            break;
 80064e0:	bf00      	nop
 80064e2:	e000      	b.n	80064e6 <_nx_dhcp_packet_process+0x462>
                        break;
 80064e4:	bf00      	nop

    } /* End of switch case */

    /* Release the packet.  */
    nx_packet_release(new_packet_ptr);
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f005 ff71 	bl	800c3d0 <_nx_packet_release>

    /* Check if the state is changed.  */
    if (original_state != interface_record -> nx_dhcp_state)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	461a      	mov	r2, r3
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d022      	beq.n	8006540 <_nx_dhcp_packet_process+0x4bc>
    {

        /* Determine if the application has specified a routine for DHCP state change notification.  */
        if (dhcp_ptr -> nx_dhcp_state_change_callback)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006500:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d009      	beq.n	800651c <_nx_dhcp_packet_process+0x498>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650e:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	7852      	ldrb	r2, [r2, #1]
 8006516:	4611      	mov	r1, r2
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	4798      	blx	r3
        }

        /* Determine if the application has specified a routine for DHCP interface state change notification.  */
        if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006522:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <_nx_dhcp_packet_process+0x4bc>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006530:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	69d1      	ldr	r1, [r2, #28]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	7852      	ldrb	r2, [r2, #1]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	4798      	blx	r3
        }
    }

    return;
 8006540:	bf00      	nop
}
 8006542:	3748      	adds	r7, #72	; 0x48
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <_nx_dhcp_timeout_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_timeout_process(NX_DHCP *dhcp_ptr)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]

UINT            i;
UINT            original_state;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8006550:	2300      	movs	r3, #0
 8006552:	613b      	str	r3, [r7, #16]

#endif /* NX_DHCP_CLIENT_SEND_ARP_PROBE  */

    /* Update the timeout on both interfaces. Check what needs to be done
       if a timeout expires, based on Client state. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8006554:	2300      	movs	r3, #0
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	e1a0      	b.n	800689c <_nx_dhcp_timeout_process+0x354>
    {

         /* Check if the DHCP Client is active on this interface. */      
         if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE)
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	441a      	add	r2, r3
 8006568:	f641 5388 	movw	r3, #7560	; 0x1d88
 800656c:	4413      	add	r3, r2
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 818f 	beq.w	8006894 <_nx_dhcp_timeout_process+0x34c>
             continue;

         /* Set the interface reocrd pointer.  */
         interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800657c:	fb03 f202 	mul.w	r2, r3, r2
 8006580:	f641 5388 	movw	r3, #7560	; 0x1d88
 8006584:	4413      	add	r3, r2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	4413      	add	r3, r2
 800658a:	613b      	str	r3, [r7, #16]

         /* Update the count.  */
         interface_record -> nx_dhcp_seconds ++;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	609a      	str	r2, [r3, #8]

        /* Check the timer.  */
        if (interface_record -> nx_dhcp_timeout != 0)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 817b 	beq.w	8006896 <_nx_dhcp_timeout_process+0x34e>
        {

            /* Apply the timer interval to the current DHCP Client timeout.  */
            if (interface_record -> nx_dhcp_timeout > NX_DHCP_TIME_INTERVAL)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	2b64      	cmp	r3, #100	; 0x64
 80065a6:	d906      	bls.n	80065b6 <_nx_dhcp_timeout_process+0x6e>
            {

                /* Update the timeout.  */
                interface_record -> nx_dhcp_timeout -= (ULONG)NX_DHCP_TIME_INTERVAL;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	621a      	str	r2, [r3, #32]
 80065b4:	e16f      	b.n	8006896 <_nx_dhcp_timeout_process+0x34e>
            }
            else
            {

                /* The DHCP Client timeout has expired. */
                interface_record -> nx_dhcp_timeout = 0; 
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2200      	movs	r2, #0
 80065ba:	621a      	str	r2, [r3, #32]

                /* Save the current state for state change callback. */
                original_state = interface_record -> nx_dhcp_state;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	785b      	ldrb	r3, [r3, #1]
 80065c0:	60fb      	str	r3, [r7, #12]

                /* Process according to what state the Client is in. */
                switch (interface_record -> nx_dhcp_state)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	3b02      	subs	r3, #2
 80065c8:	2b07      	cmp	r3, #7
 80065ca:	f200 8132 	bhi.w	8006832 <_nx_dhcp_timeout_process+0x2ea>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <_nx_dhcp_timeout_process+0x8c>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065f5 	.word	0x080065f5
 80065d8:	08006679 	.word	0x08006679
 80065dc:	080066bd 	.word	0x080066bd
 80065e0:	08006701 	.word	0x08006701
 80065e4:	0800673f 	.word	0x0800673f
 80065e8:	080067c5 	.word	0x080067c5
 80065ec:	08006833 	.word	0x08006833
 80065f0:	08006833 	.word	0x08006833

                    case NX_DHCP_STATE_INIT:
                    {

                        /* Reset the seconds field for starting the DHCP address acquistiion. */
                        interface_record -> nx_dhcp_seconds = 0;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2200      	movs	r2, #0
 80065f8:	609a      	str	r2, [r3, #8]
                        /* Initial state when there is no address.  Send a DHCPDISCOVER message
                           to find a DHCP server and switch to the SELECTING state.
                           Initial timeout is NX_DHCP_MIN_RETRANS_TIMEOUT seconds. */
#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Only if the DHCP Client is requesting an IP address and is configured to skip the Discovery message. */
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00c      	beq.n	800661c <_nx_dhcp_timeout_process+0xd4>
                            (interface_record -> nx_dhcp_skip_discovery))
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <_nx_dhcp_timeout_process+0xd4>
                        {

                            /* Send out the DHCP request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800660a:	2203      	movs	r2, #3
 800660c:	6939      	ldr	r1, [r7, #16]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f94e 	bl	80068b0 <_nx_dhcp_send_request_internal>

                            /* And change to the Requesting state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2204      	movs	r2, #4
 8006618:	705a      	strb	r2, [r3, #1]
 800661a:	e007      	b.n	800662c <_nx_dhcp_timeout_process+0xe4>
                        }
                        else
                        {

                            /* Send out the DHCP request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 800661c:	2201      	movs	r2, #1
 800661e:	6939      	ldr	r1, [r7, #16]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f945 	bl	80068b0 <_nx_dhcp_send_request_internal>

                            /* And change to the Selecting state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_SELECTING;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2203      	movs	r2, #3
 800662a:	705a      	strb	r2, [r3, #1]
                        /* And change to the Requesting state. */
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
#endif

                        /* Check if the retransmission interval is zero.  */
                        if (interface_record -> nx_dhcp_rtr_interval == 0)
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <_nx_dhcp_timeout_process+0xf6>
                        {

                            /* Set the interval to min retransmission timeout.  */
                            interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800663a:	625a      	str	r2, [r3, #36]	; 0x24
 800663c:	e007      	b.n	800664e <_nx_dhcp_timeout_process+0x106>
                        }
                        else
                        {

                            /* Record the retransmission interval for next retransmission.  */
                            interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	4618      	mov	r0, r3
 8006644:	f000 ffae 	bl	80075a4 <_nx_dhcp_update_timeout>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	625a      	str	r2, [r3, #36]	; 0x24
                        }

                        /* Update the timeout for next retransmission.  */
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval; 
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	4618      	mov	r0, r3
 800665c:	f000 ff74 	bl	8007548 <_nx_dhcp_add_randomize>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f040 80e3 	bne.w	8006836 <_nx_dhcp_timeout_process+0x2ee>
                            interface_record -> nx_dhcp_timeout = 1;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	2201      	movs	r2, #1
 8006674:	621a      	str	r2, [r3, #32]

                        break;
 8006676:	e0de      	b.n	8006836 <_nx_dhcp_timeout_process+0x2ee>
                    case NX_DHCP_STATE_SELECTING:
                    {

#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Retransmit the Discover message.  */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 8006678:	2201      	movs	r2, #1
 800667a:	6939      	ldr	r1, [r7, #16]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f917 	bl	80068b0 <_nx_dhcp_send_request_internal>
                        /* Retransmit the BOOTP Request message.  */ 
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_BOOT_REQUEST);
#endif

                        /* Update the retransmision interval.   */
                        interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	4618      	mov	r0, r3
 8006688:	f000 ff8c 	bl	80075a4 <_nx_dhcp_update_timeout>
 800668c:	4602      	mov	r2, r0
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Update the timeout for next retransmission.  */
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 ff52 	bl	8007548 <_nx_dhcp_add_randomize>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f040 80c3 	bne.w	800683a <_nx_dhcp_timeout_process+0x2f2>
                            interface_record -> nx_dhcp_timeout = 1;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2201      	movs	r2, #1
 80066b8:	621a      	str	r2, [r3, #32]

                        break;
 80066ba:	e0be      	b.n	800683a <_nx_dhcp_timeout_process+0x2f2>
                    case NX_DHCP_STATE_REQUESTING:
                    {

#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Send a DHCP request. */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 80066bc:	2203      	movs	r2, #3
 80066be:	6939      	ldr	r1, [r7, #16]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f8f5 	bl	80068b0 <_nx_dhcp_send_request_internal>
                        /* Send a BOOTP request. */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_BOOT_REQUEST);
#endif
                                                
                        /* Update the retransmision interval.   */
                        interface_record->nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 ff6a 	bl	80075a4 <_nx_dhcp_update_timeout>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Reset the timeout for next retransmision. */
                        interface_record -> nx_dhcp_timeout = interface_record->nx_dhcp_rtr_interval;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 ff30 	bl	8007548 <_nx_dhcp_add_randomize>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f040 80a3 	bne.w	800683e <_nx_dhcp_timeout_process+0x2f6>
                            interface_record -> nx_dhcp_timeout = 1;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2201      	movs	r2, #1
 80066fc:	621a      	str	r2, [r3, #32]

                        break;
 80066fe:	e09e      	b.n	800683e <_nx_dhcp_timeout_process+0x2f6>

                    case NX_DHCP_STATE_BOUND:
                    {

                        /* Reset the seconds field for starting the DHCP request process. */
                        interface_record -> nx_dhcp_seconds = 0;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	2200      	movs	r2, #0
 8006704:	609a      	str	r2, [r3, #8]

                        /* The lease has timed out. Time to renew.  */

                        /* And change to the Renewing state. */
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_RENEWING;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2206      	movs	r2, #6
 800670a:	705a      	strb	r2, [r3, #1]

                        /* Send the renewal request.  */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800670c:	2203      	movs	r2, #3
 800670e:	6939      	ldr	r1, [r7, #16]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8cd 	bl	80068b0 <_nx_dhcp_send_request_internal>

                        /* Set the time remaining based on RFC 2131 when T1 expires. */
                        interface_record -> nx_dhcp_renewal_remain_time = interface_record -> nx_dhcp_rebind_time - interface_record -> nx_dhcp_renewal_time;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	639a      	str	r2, [r3, #56]	; 0x38
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_renewal_remain_time);
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	4618      	mov	r0, r3
 800672a:	f000 ff52 	bl	80075d2 <_nx_dhcp_update_renewal_timeout>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	621a      	str	r2, [r3, #32]

                        /* Record the retransmission interval.  */
                        interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	6a1a      	ldr	r2, [r3, #32]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	625a      	str	r2, [r3, #36]	; 0x24

                        break;
 800673c:	e080      	b.n	8006840 <_nx_dhcp_timeout_process+0x2f8>

                    case NX_DHCP_STATE_RENEWING:
                    {

                        /* Check if we have reached the end of the renewal time.  */
                        if (interface_record -> nx_dhcp_renewal_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	429a      	cmp	r2, r3
 8006748:	d307      	bcc.n	800675a <_nx_dhcp_timeout_process+0x212>
                        {
                            interface_record -> nx_dhcp_renewal_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	1ad2      	subs	r2, r2, r3
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
 8006758:	e002      	b.n	8006760 <_nx_dhcp_timeout_process+0x218>
                        }
                        else
                        {
                            interface_record -> nx_dhcp_renewal_remain_time = 0;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2200      	movs	r2, #0
 800675e:	639a      	str	r2, [r3, #56]	; 0x38
                        }

                        /* Update the timeout for renew retranmission.  */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_renewal_remain_time);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006764:	4618      	mov	r0, r3
 8006766:	f000 ff34 	bl	80075d2 <_nx_dhcp_update_renewal_timeout>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	621a      	str	r2, [r3, #32]
                                                     
                        /* Check if we are at the limit on retransmission.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d11b      	bne.n	80067b0 <_nx_dhcp_timeout_process+0x268>
                        {

                            /* And change to the Rebinding state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REBINDING;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2207      	movs	r2, #7
 800677c:	705a      	strb	r2, [r3, #1]

                            /* Send the rebind request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800677e:	2203      	movs	r2, #3
 8006780:	6939      	ldr	r1, [r7, #16]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f894 	bl	80068b0 <_nx_dhcp_send_request_internal>

                            /* Calculate the rebind time based on the RFC 2131. */
                            interface_record -> nx_dhcp_rebind_remain_time = interface_record -> nx_dhcp_lease_time - interface_record -> nx_dhcp_rebind_time;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006790:	1ad2      	subs	r2, r2, r3
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	63da      	str	r2, [r3, #60]	; 0x3c
                                                                                        
                            /* Calculate the timeout for the response.  */
                            interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679a:	4618      	mov	r0, r3
 800679c:	f000 ff19 	bl	80075d2 <_nx_dhcp_update_renewal_timeout>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	621a      	str	r2, [r3, #32]

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6a1a      	ldr	r2, [r3, #32]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	625a      	str	r2, [r3, #36]	; 0x24

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
                        }

                        break;
 80067ae:	e047      	b.n	8006840 <_nx_dhcp_timeout_process+0x2f8>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 80067b0:	2203      	movs	r2, #3
 80067b2:	6939      	ldr	r1, [r7, #16]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f87b 	bl	80068b0 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	6a1a      	ldr	r2, [r3, #32]
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	625a      	str	r2, [r3, #36]	; 0x24
                        break;
 80067c2:	e03d      	b.n	8006840 <_nx_dhcp_timeout_process+0x2f8>
                    {

                        /* No response yet, the response must have timed out, 
                            update the timeout and check if we have reached the 
                            end of the rebinding time.  */
                        if (interface_record -> nx_dhcp_rebind_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d307      	bcc.n	80067e0 <_nx_dhcp_timeout_process+0x298>
                        {
                            interface_record -> nx_dhcp_rebind_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	1ad2      	subs	r2, r2, r3
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80067de:	e002      	b.n	80067e6 <_nx_dhcp_timeout_process+0x29e>
                        }
                        else
                        {
                            interface_record -> nx_dhcp_rebind_remain_time = 0;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2200      	movs	r2, #0
 80067e4:	63da      	str	r2, [r3, #60]	; 0x3c
                        }

                        /* Update the timeout for renew retranmission.  */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fef1 	bl	80075d2 <_nx_dhcp_update_renewal_timeout>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	621a      	str	r2, [r3, #32]
                                                     
                        /* Check if we are at the limit on retransmission.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10f      	bne.n	800681e <_nx_dhcp_timeout_process+0x2d6>
                        {

                            /* Timeout. Restart DHCP service for this interface record.  */

                            /* Reinitialize DHCP.  */
                            _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7fe ffcd 	bl	80057a4 <_nx_dhcp_interface_reinitialize>

                            /* Start the DHCP protocol again by setting the state back to INIT. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	2202      	movs	r2, #2
 800680e:	705a      	strb	r2, [r3, #1]
                            /* The client begins in INIT state and forms a DHCPDISCOVER message.
                               The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
                               RFC2131, Section4.4.1, Page36.  */

                            /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                            interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2264      	movs	r2, #100	; 0x64
 8006814:	621a      	str	r2, [r3, #32]
                            interface_record -> nx_dhcp_rtr_interval = 0;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2200      	movs	r2, #0
 800681a:	625a      	str	r2, [r3, #36]	; 0x24
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
                        }
                        break;
 800681c:	e010      	b.n	8006840 <_nx_dhcp_timeout_process+0x2f8>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800681e:	2203      	movs	r2, #3
 8006820:	6939      	ldr	r1, [r7, #16]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f844 	bl	80068b0 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	6a1a      	ldr	r2, [r3, #32]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	625a      	str	r2, [r3, #36]	; 0x24
                        break;
 8006830:	e006      	b.n	8006840 <_nx_dhcp_timeout_process+0x2f8>
                    }

                    default:
                    {

                        break;
 8006832:	bf00      	nop
 8006834:	e004      	b.n	8006840 <_nx_dhcp_timeout_process+0x2f8>
                        break;
 8006836:	bf00      	nop
 8006838:	e002      	b.n	8006840 <_nx_dhcp_timeout_process+0x2f8>
                        break;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <_nx_dhcp_timeout_process+0x2f8>
                        break;
 800683e:	bf00      	nop
                    }
                }

                /* Check if the state is changed.  */
                if (original_state != interface_record -> nx_dhcp_state)
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	461a      	mov	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4293      	cmp	r3, r2
 800684a:	d024      	beq.n	8006896 <_nx_dhcp_timeout_process+0x34e>
                {

                    /* Determine if the application has specified a routine for DHCP state change notification.  */
                    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006852:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <_nx_dhcp_timeout_process+0x326>
                    {

                        /* Yes, call the application's state change notify function with the new state.  */
                        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006860:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	; 0xf40
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	7852      	ldrb	r2, [r2, #1]
 8006868:	4611      	mov	r1, r2
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
                    }

                    /* Determine if the application has specified a routine for DHCP interface state change notification.  */
                    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006874:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00c      	beq.n	8006896 <_nx_dhcp_timeout_process+0x34e>
                    {

                        /* Yes, call the application's state change notify function with the new state.  */
                        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006882:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	; 0xf44
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	69d1      	ldr	r1, [r2, #28]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	7852      	ldrb	r2, [r2, #1]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
 8006892:	e000      	b.n	8006896 <_nx_dhcp_timeout_process+0x34e>
             continue;
 8006894:	bf00      	nop
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	3301      	adds	r3, #1
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f43f ae5b 	beq.w	800655a <_nx_dhcp_timeout_process+0x12>

            } /* End of switch statement. */ 
        }

    } /* Try the next interface record.  */ 
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop

080068b0 <_nx_dhcp_send_request_internal>:
/*                                            option in parameter request,*/
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_send_request_internal(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UINT dhcp_message_type)
{
 80068b0:	b590      	push	{r4, r7, lr}
 80068b2:	b093      	sub	sp, #76	; 0x4c
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
ULONG           targetIP;
UINT            status;
ULONG           dhcp_client_mac_msw;
ULONG           dhcp_client_mac_lsw;
UINT            iface_index;
UINT            index = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	61fb      	str	r3, [r7, #28]
UINT            user_option_length;
UINT            name_length;


    /* Set the interface idnex.  */
    iface_index = interface_record -> nx_dhcp_interface_index;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Allocate a DHCP packet.  */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8d3 0bd8 	ldr.w	r0, [r3, #3032]	; 0xbd8
 80068cc:	f107 0120 	add.w	r1, r7, #32
 80068d0:	2300      	movs	r3, #0
 80068d2:	222c      	movs	r2, #44	; 0x2c
 80068d4:	f005 f8ee 	bl	800bab4 <_nx_packet_allocate>
 80068d8:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Was the packet allocation successful?  */
    if (status != NX_SUCCESS)
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <_nx_dhcp_send_request_internal+0x42>
    {

        /* Increment the DHCP internal error counter.  */
        interface_record -> nx_dhcp_internal_errors++;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

        /* Return status.  */
        return(status);
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	e29a      	b.n	8006e28 <_nx_dhcp_send_request_internal+0x578>
    }

    /* Set the interface index and MAC address.  */
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f8:	214c      	movs	r1, #76	; 0x4c
 80068fa:	fb01 f303 	mul.w	r3, r1, r3
 80068fe:	4413      	add	r3, r2
 8006900:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	633b      	str	r3, [r7, #48]	; 0x30
    dhcp_client_mac_lsw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690e:	214c      	movs	r1, #76	; 0x4c
 8006910:	fb01 f303 	mul.w	r3, r1, r3
 8006914:	4413      	add	r3, r2
 8006916:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Setup the buffer pointer.  */
    buffer =  packet_ptr -> nx_packet_prepend_ptr;
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Clear the buffer out... just in case.  */
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 8006924:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006928:	2100      	movs	r1, #0
 800692a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800692c:	f00c fab8 	bl	8012ea0 <memset>
    
    /* Setup the standard BootP fields.  */
    buffer[NX_BOOTP_OFFSET_OP] =        NX_BOOTP_OP_REQUEST;
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	2201      	movs	r2, #1
 8006934:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HTYPE] =     NX_BOOTP_TYPE_ETHERNET;     
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	3301      	adds	r3, #1
 800693a:	2201      	movs	r2, #1
 800693c:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HLEN] =      NX_BOOTP_HLEN_ETHERNET;
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	3302      	adds	r3, #2
 8006942:	2206      	movs	r2, #6
 8006944:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HOPS] =      0;
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	3303      	adds	r3, #3
 800694a:	2200      	movs	r2, #0
 800694c:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_SERVER_NM] = 0;  
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	332c      	adds	r3, #44	; 0x2c
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_BOOT_FILE] = 0;  
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	336c      	adds	r3, #108	; 0x6c
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]

    /* Setup the 'Xid' field.  */
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_XID, 4, interface_record -> nx_dhcp_xid);
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	1d18      	adds	r0, r3, #4
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	461a      	mov	r2, r3
 8006968:	2104      	movs	r1, #4
 800696a:	f000 feb5 	bl	80076d8 <_nx_dhcp_store_data>

    /* Set the 'secs' field according to RFC2131, Secion4.4.1, Page37, Table5. */ 
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b04      	cmp	r3, #4
 8006972:	d002      	beq.n	800697a <_nx_dhcp_send_request_internal+0xca>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b07      	cmp	r3, #7
 8006978:	d107      	bne.n	800698a <_nx_dhcp_send_request_internal+0xda>
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, 0);
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	3308      	adds	r3, #8
 800697e:	2200      	movs	r2, #0
 8006980:	2102      	movs	r1, #2
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fea8 	bl	80076d8 <_nx_dhcp_store_data>
 8006988:	e008      	b.n	800699c <_nx_dhcp_send_request_internal+0xec>
    }
    else
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, interface_record -> nx_dhcp_seconds);
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	f103 0008 	add.w	r0, r3, #8
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	461a      	mov	r2, r3
 8006996:	2102      	movs	r1, #2
 8006998:	f000 fe9e 	bl	80076d8 <_nx_dhcp_store_data>
    }

    /* Set the broadcast flag according to RFC2131, Secion4.4.1, Page38, Table5.  */

    /* Set the broadcast flag to 0 for DHCP Decline and DHCP Release.  */
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d002      	beq.n	80069a8 <_nx_dhcp_send_request_internal+0xf8>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b07      	cmp	r3, #7
 80069a6:	d107      	bne.n	80069b8 <_nx_dhcp_send_request_internal+0x108>
    {

        /* Request the response be sent unicast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_UNICAST);
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	330a      	adds	r3, #10
 80069ac:	2200      	movs	r2, #0
 80069ae:	2101      	movs	r1, #1
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fe91 	bl	80076d8 <_nx_dhcp_store_data>
 80069b6:	e012      	b.n	80069de <_nx_dhcp_send_request_internal+0x12e>
    }

    /* Set the 'broadcast' flag according to user requirement for DHCP Discover, DHCP Request and DHCP Inform.  */
    else if (interface_record -> nx_dhcp_clear_broadcast == NX_TRUE)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d107      	bne.n	80069d0 <_nx_dhcp_send_request_internal+0x120>
    {

        /* Request the response be sent unicast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_UNICAST);
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	330a      	adds	r3, #10
 80069c4:	2200      	movs	r2, #0
 80069c6:	2101      	movs	r1, #1
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fe85 	bl	80076d8 <_nx_dhcp_store_data>
 80069ce:	e006      	b.n	80069de <_nx_dhcp_send_request_internal+0x12e>
    }
    else
    {

        /* Request the response be sent broadcast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_BROADCAST);
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	330a      	adds	r3, #10
 80069d4:	2280      	movs	r2, #128	; 0x80
 80069d6:	2101      	movs	r1, #1
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fe7d 	bl	80076d8 <_nx_dhcp_store_data>
    }

    /* RFC 2131 4.4.1: Do not set the Client IP ("ciaddr" field) address...*/
    if (dhcp_message_type != NX_DHCP_TYPE_DHCPINFORM)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d007      	beq.n	80069f4 <_nx_dhcp_send_request_internal+0x144>
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, NX_BOOTP_NO_ADDRESS);
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	330c      	adds	r3, #12
 80069e8:	2200      	movs	r2, #0
 80069ea:	2104      	movs	r1, #4
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fe73 	bl	80076d8 <_nx_dhcp_store_data>
 80069f2:	e008      	b.n	8006a06 <_nx_dhcp_send_request_internal+0x156>
    }
    /* ...unless this is an INFORM REQUEST message. */
    else
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	f103 000c 	add.w	r0, r3, #12
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	461a      	mov	r2, r3
 8006a00:	2104      	movs	r1, #4
 8006a02:	f000 fe69 	bl	80076d8 <_nx_dhcp_store_data>
    }

    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_YOUR_IP, 4, NX_BOOTP_NO_ADDRESS);   
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	3310      	adds	r3, #16
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2104      	movs	r1, #4
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fe62 	bl	80076d8 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SERVER_IP, 4, NX_BOOTP_NO_ADDRESS); 
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	3314      	adds	r3, #20
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2104      	movs	r1, #4
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fe5b 	bl	80076d8 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_GATEWAY_IP, 4, NX_BOOTP_NO_ADDRESS);
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	3318      	adds	r3, #24
 8006a26:	2200      	movs	r2, #0
 8006a28:	2104      	movs	r1, #4
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fe54 	bl	80076d8 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_HW, 2, dhcp_client_mac_msw);
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	331c      	adds	r3, #28
 8006a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a36:	2102      	movs	r1, #2
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fe4d 	bl	80076d8 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_HW + 2, 4, dhcp_client_mac_lsw);
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	331e      	adds	r3, #30
 8006a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a44:	2104      	movs	r1, #4
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fe46 	bl	80076d8 <_nx_dhcp_store_data>

#ifndef NX_DHCP_ENABLE_BOOTP        
    /* Update the index.  */
    index = NX_BOOTP_OFFSET_OPTIONS; 
 8006a4c:	23f0      	movs	r3, #240	; 0xf0
 8006a4e:	61fb      	str	r3, [r7, #28]

    /*  A BOOTP Client should not request DHCP option data. */
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_VENDOR, 4, NX_BOOTP_MAGIC_COOKIE);
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	33ec      	adds	r3, #236	; 0xec
 8006a54:	4aa5      	ldr	r2, [pc, #660]	; (8006cec <_nx_dhcp_send_request_internal+0x43c>)
 8006a56:	2104      	movs	r1, #4
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fe3d 	bl	80076d8 <_nx_dhcp_store_data>

    /* Add the actual DHCP request.  */
    _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, NX_DHCP_OPTION_DHCP_TYPE_SIZE, dhcp_message_type, &index);
 8006a5e:	f107 031c 	add.w	r3, r7, #28
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	2135      	movs	r1, #53	; 0x35
 8006a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6c:	f000 fcab 	bl	80073c6 <_nx_dhcp_add_option_value>
#endif

    /* Determine if any additional options need to be added relative to the DHCP message type.
       RFC 2131, Table 5: Fields and options used by DHCP Clients.  */
    switch (dhcp_message_type)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	2b07      	cmp	r3, #7
 8006a76:	f200 8155 	bhi.w	8006d24 <_nx_dhcp_send_request_internal+0x474>
 8006a7a:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <_nx_dhcp_send_request_internal+0x1d0>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006aa1 	.word	0x08006aa1
 8006a84:	08006d25 	.word	0x08006d25
 8006a88:	08006b3b 	.word	0x08006b3b
 8006a8c:	08006c49 	.word	0x08006c49
 8006a90:	08006d25 	.word	0x08006d25
 8006a94:	08006d25 	.word	0x08006d25
 8006a98:	08006c89 	.word	0x08006c89
 8006a9c:	08006cc1 	.word	0x08006cc1

        case NX_DHCP_TYPE_DHCPDISCOVER:


            /* Determine if we have a valid IP address.  */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00f      	beq.n	8006ac8 <_nx_dhcp_send_request_internal+0x218>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab0:	d00a      	beq.n	8006ac8 <_nx_dhcp_send_request_internal+0x218>
            {

                /* Add a IP request option if we have a valid IP address */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	f107 031c 	add.w	r3, r7, #28
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	4613      	mov	r3, r2
 8006abe:	2204      	movs	r2, #4
 8006ac0:	2132      	movs	r1, #50	; 0x32
 8006ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ac4:	f000 fc7f 	bl	80073c6 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }

            /* Add an option request for an infinite lease.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_LEASE, NX_DHCP_OPTION_DHCP_LEASE_SIZE, NX_DHCP_INFINITE_LEASE, &index);
 8006ac8:	f107 031c 	add.w	r3, r7, #28
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	2133      	movs	r1, #51	; 0x33
 8006ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ad8:	f000 fc75 	bl	80073c6 <_nx_dhcp_add_option_value>

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01b      	beq.n	8006b1c <_nx_dhcp_send_request_internal+0x26c>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f107 0114 	add.w	r1, r7, #20
 8006aec:	22ff      	movs	r2, #255	; 0xff
 8006aee:	4618      	mov	r0, r3
 8006af0:	f006 fe59 	bl	800d7a6 <_nx_utility_string_length_check>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <_nx_dhcp_send_request_internal+0x256>
                {
                    nx_packet_release(packet_ptr);
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f005 fc67 	bl	800c3d0 <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 8006b02:	23a8      	movs	r3, #168	; 0xa8
 8006b04:	e190      	b.n	8006e28 <_nx_dhcp_send_request_internal+0x578>
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 8006b06:	697a      	ldr	r2, [r7, #20]
                                           (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6859      	ldr	r1, [r3, #4]
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 8006b0c:	f107 031c 	add.w	r3, r7, #28
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	460b      	mov	r3, r1
 8006b14:	210c      	movs	r1, #12
 8006b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b18:	f000 fc88 	bl	800742c <_nx_dhcp_add_option_string>
            }

            /* Add parameter request option.  */
            _nx_dhcp_add_option_parameter_request(dhcp_ptr, buffer, &index);
 8006b1c:	f107 031c 	add.w	r3, r7, #28
 8006b20:	461a      	mov	r2, r3
 8006b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 fcb5 	bl	8007494 <_nx_dhcp_add_option_parameter_request>
               RFC2132, Section9.10, Page28.  */    
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_MAX_DHCP_MESSAGE, 2, dhcp_ptr -> nx_dhcp_max_dhcp_message_size, &index);
#endif

            /* Increment the number of Discovery messages sent.  */
            interface_record -> nx_dhcp_discoveries_sent++;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 8006b38:	e0f5      	b.n	8006d26 <_nx_dhcp_send_request_internal+0x476>
      
        case NX_DHCP_TYPE_DHCPREQUEST:

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01b      	beq.n	8006b7a <_nx_dhcp_send_request_internal+0x2ca>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f107 0114 	add.w	r1, r7, #20
 8006b4a:	22ff      	movs	r2, #255	; 0xff
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f006 fe2a 	bl	800d7a6 <_nx_utility_string_length_check>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <_nx_dhcp_send_request_internal+0x2b4>
                {
                    nx_packet_release(packet_ptr);
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f005 fc38 	bl	800c3d0 <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 8006b60:	23a8      	movs	r3, #168	; 0xa8
 8006b62:	e161      	b.n	8006e28 <_nx_dhcp_send_request_internal+0x578>
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6859      	ldr	r1, [r3, #4]
 8006b6a:	f107 031c 	add.w	r3, r7, #28
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	460b      	mov	r3, r1
 8006b72:	210c      	movs	r1, #12
 8006b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b76:	f000 fc59 	bl	800742c <_nx_dhcp_add_option_string>
            }

            /* Determine if we have a valid IP address. Must not include if Renewing or Rebinding RCV 2131 4.3.2.  */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d017      	beq.n	8006bb2 <_nx_dhcp_send_request_internal+0x302>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS) &&
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d012      	beq.n	8006bb2 <_nx_dhcp_send_request_internal+0x302>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	785b      	ldrb	r3, [r3, #1]
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS) &&
 8006b90:	2b06      	cmp	r3, #6
 8006b92:	d00e      	beq.n	8006bb2 <_nx_dhcp_send_request_internal+0x302>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING))
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	785b      	ldrb	r3, [r3, #1]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 8006b98:	2b07      	cmp	r3, #7
 8006b9a:	d00a      	beq.n	8006bb2 <_nx_dhcp_send_request_internal+0x302>
            {

                /* Add an IP request option if we have a valid IP address.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	f107 031c 	add.w	r3, r7, #28
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	2204      	movs	r2, #4
 8006baa:	2132      	movs	r1, #50	; 0x32
 8006bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bae:	f000 fc0a 	bl	80073c6 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }

            /* Add a request for an infinite lease if we haven't already set the timers.  */
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <_nx_dhcp_send_request_internal+0x312>
                (interface_record -> nx_dhcp_renewal_time == 0))
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <_nx_dhcp_send_request_internal+0x326>
            {

                /* Add the infinite lease option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_LEASE, NX_DHCP_OPTION_DHCP_LEASE_SIZE, NX_DHCP_INFINITE_LEASE, &index);
 8006bc2:	f107 031c 	add.w	r3, r7, #28
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bcc:	2204      	movs	r2, #4
 8006bce:	2133      	movs	r1, #51	; 0x33
 8006bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bd2:	f000 fbf8 	bl	80073c6 <_nx_dhcp_add_option_value>
            }

            /* Should add server ID if not renewing.  */
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	785b      	ldrb	r3, [r3, #1]
 8006bda:	2b06      	cmp	r3, #6
 8006bdc:	d014      	beq.n	8006c08 <_nx_dhcp_send_request_internal+0x358>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	785b      	ldrb	r3, [r3, #1]
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 8006be2:	2b07      	cmp	r3, #7
 8006be4:	d010      	beq.n	8006c08 <_nx_dhcp_send_request_internal+0x358>
                (interface_record -> nx_dhcp_server_ip != NX_BOOTP_BC_ADDRESS)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	695b      	ldr	r3, [r3, #20]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 8006bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bee:	d00b      	beq.n	8006c08 <_nx_dhcp_send_request_internal+0x358>
               )
            {

                /* Add Server identifier option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	695a      	ldr	r2, [r3, #20]
 8006bf4:	f107 031c 	add.w	r3, r7, #28
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	2136      	movs	r1, #54	; 0x36
 8006c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c02:	f000 fbe0 	bl	80073c6 <_nx_dhcp_add_option_value>
 8006c06:	e010      	b.n	8006c2a <_nx_dhcp_send_request_internal+0x37a>
                                          interface_record -> nx_dhcp_server_ip, &index);
            }
            else if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) || 
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	785b      	ldrb	r3, [r3, #1]
 8006c0c:	2b06      	cmp	r3, #6
 8006c0e:	d003      	beq.n	8006c18 <_nx_dhcp_send_request_internal+0x368>
                     (interface_record -> nx_dhcp_state == NX_DHCP_STATE_REBINDING))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	785b      	ldrb	r3, [r3, #1]
            else if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) || 
 8006c14:	2b07      	cmp	r3, #7
 8006c16:	d108      	bne.n	8006c2a <_nx_dhcp_send_request_internal+0x37a>

            {

                /* Ensure the renewal message fields are correct.  */
                _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	f103 000c 	add.w	r0, r3, #12
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	461a      	mov	r2, r3
 8006c24:	2104      	movs	r1, #4
 8006c26:	f000 fd57 	bl	80076d8 <_nx_dhcp_store_data>
            }

            /* Add parameter request option.  */
            _nx_dhcp_add_option_parameter_request(dhcp_ptr, buffer, &index);
 8006c2a:	f107 031c 	add.w	r3, r7, #28
 8006c2e:	461a      	mov	r2, r3
 8006c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 fc2e 	bl	8007494 <_nx_dhcp_add_option_parameter_request>
               RFC2132, Section9.10, Page28.  */    
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_MAX_DHCP_MESSAGE, 2, dhcp_ptr -> nx_dhcp_max_dhcp_message_size, &index);
#endif

            /* Increment the number of Request messages sent.  */
            interface_record -> nx_dhcp_requests_sent++;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
            break;
 8006c46:	e06e      	b.n	8006d26 <_nx_dhcp_send_request_internal+0x476>

        case NX_DHCP_TYPE_DHCPDECLINE:      

            /* Does the Client have a nonzero requested address it is declining? */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00f      	beq.n	8006c70 <_nx_dhcp_send_request_internal+0x3c0>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8006c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c58:	d00a      	beq.n	8006c70 <_nx_dhcp_send_request_internal+0x3c0>
            {

                /* Yes; add Request IP address option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	f107 031c 	add.w	r3, r7, #28
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	4613      	mov	r3, r2
 8006c66:	2204      	movs	r2, #4
 8006c68:	2132      	movs	r1, #50	; 0x32
 8006c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c6c:	f000 fbab 	bl	80073c6 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }     

            /* Add Server identifier option.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	695a      	ldr	r2, [r3, #20]
 8006c74:	f107 031c 	add.w	r3, r7, #28
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	2136      	movs	r1, #54	; 0x36
 8006c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c82:	f000 fba0 	bl	80073c6 <_nx_dhcp_add_option_value>
                                      interface_record -> nx_dhcp_server_ip, &index);

            break;
 8006c86:	e04e      	b.n	8006d26 <_nx_dhcp_send_request_internal+0x476>

        case NX_DHCP_TYPE_DHCPRELEASE:       

            /* Added the 'ciaddr', Indicate the IP address being released.  */
            _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	f103 000c 	add.w	r0, r3, #12
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	461a      	mov	r2, r3
 8006c94:	2104      	movs	r1, #4
 8006c96:	f000 fd1f 	bl	80076d8 <_nx_dhcp_store_data>
                                       
            /* Add Server identifier option.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	695a      	ldr	r2, [r3, #20]
 8006c9e:	f107 031c 	add.w	r3, r7, #28
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	2136      	movs	r1, #54	; 0x36
 8006caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cac:	f000 fb8b 	bl	80073c6 <_nx_dhcp_add_option_value>
                                      interface_record -> nx_dhcp_server_ip, &index);

            /* Increment the number of Release messages sent.  */
            interface_record -> nx_dhcp_releases_sent++;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
            break;
 8006cbe:	e032      	b.n	8006d26 <_nx_dhcp_send_request_internal+0x476>

        case NX_DHCP_TYPE_DHCPINFORM:

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d01e      	beq.n	8006d06 <_nx_dhcp_send_request_internal+0x456>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f107 0114 	add.w	r1, r7, #20
 8006cd0:	22ff      	movs	r2, #255	; 0xff
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f006 fd67 	bl	800d7a6 <_nx_utility_string_length_check>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d008      	beq.n	8006cf0 <_nx_dhcp_send_request_internal+0x440>
                {
                    nx_packet_release(packet_ptr);
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f005 fb75 	bl	800c3d0 <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 8006ce6:	23a8      	movs	r3, #168	; 0xa8
 8006ce8:	e09e      	b.n	8006e28 <_nx_dhcp_send_request_internal+0x578>
 8006cea:	bf00      	nop
 8006cec:	63825363 	.word	0x63825363
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6859      	ldr	r1, [r3, #4]
 8006cf6:	f107 031c 	add.w	r3, r7, #28
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	210c      	movs	r1, #12
 8006d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d02:	f000 fb93 	bl	800742c <_nx_dhcp_add_option_string>
            }

            /* Add parameter request option.  */
            _nx_dhcp_add_option_parameter_request(dhcp_ptr, buffer, &index);
 8006d06:	f107 031c 	add.w	r3, r7, #28
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 fbc0 	bl	8007494 <_nx_dhcp_add_option_parameter_request>

            /* Increment the number of Inform messages sent.  */
            interface_record -> nx_dhcp_informs_sent++;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

            break;
 8006d22:	e000      	b.n	8006d26 <_nx_dhcp_send_request_internal+0x476>

        default:
            break;
 8006d24:	bf00      	nop
    }

    /* Add any user supplied options to the buffer.  */
    if (dhcp_ptr -> nx_dhcp_user_option_add)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d2c:	f8d3 3f48 	ldr.w	r3, [r3, #3912]	; 0xf48
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d024      	beq.n	8006d7e <_nx_dhcp_send_request_internal+0x4ce>
    {

        /* Set the pointer for adding user option.  */
        user_option_ptr = buffer + index;
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d38:	4413      	add	r3, r2
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Calculate the available length for user options. Minus 1 to add the END option.  */
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	695a      	ldr	r2, [r3, #20]
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	61bb      	str	r3, [r7, #24]

        /* Add the specific DHCP option user wanted.  */
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d4e:	f8d3 4f48 	ldr.w	r4, [r3, #3912]	; 0xf48
 8006d52:	f107 0318 	add.w	r3, r7, #24
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	47a0      	blx	r4
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d104      	bne.n	8006d72 <_nx_dhcp_send_request_internal+0x4c2>
        {

            /* Update the index to include the user options.  */
            index += user_option_length;
 8006d68:	69fa      	ldr	r2, [r7, #28]
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	61fb      	str	r3, [r7, #28]
 8006d70:	e005      	b.n	8006d7e <_nx_dhcp_send_request_internal+0x4ce>
        }
        else
        {

            /* Invalid user options. Release the packet.  */
            nx_packet_release(packet_ptr);
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f005 fb2b 	bl	800c3d0 <_nx_packet_release>
            return(NX_DHCP_UNKNOWN_OPTION);
 8006d7a:	239f      	movs	r3, #159	; 0x9f
 8006d7c:	e054      	b.n	8006e28 <_nx_dhcp_send_request_internal+0x578>
        }
    }

    /* Setup the packet pointers.  */
    packet_ptr -> nx_packet_length =      NX_BOOTP_OFFSET_END;
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006d84:	625a      	str	r2, [r3, #36]	; 0x24
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_END;
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8006d90:	60da      	str	r2, [r3, #12]

#ifndef NX_DHCP_ENABLE_BOOTP

    /* Added the END option.  */
    *(buffer + index) = NX_DHCP_OPTION_END;
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d96:	4413      	add	r3, r2
 8006d98:	22ff      	movs	r2, #255	; 0xff
 8006d9a:	701a      	strb	r2, [r3, #0]
    index ++;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	61fb      	str	r3, [r7, #28]

    /* Check the option length.  */
    if (index > NX_BOOTP_OFFSET_END)
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006da8:	d908      	bls.n	8006dbc <_nx_dhcp_send_request_internal+0x50c>
    {
        packet_ptr -> nx_packet_length = index;
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	625a      	str	r2, [r3, #36]	; 0x24
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + index;
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	6899      	ldr	r1, [r3, #8]
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	440a      	add	r2, r1
 8006dba:	60da      	str	r2, [r3, #12]
    }
#endif

    /* Set the target address according to RFC2131, Section4.3.6, Page33, Table4 and Section4.4.4, Page40.  
       DHCP Request for renewing and DHCP Release message must be unicast.  */
    if (((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING)) ||
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d103      	bne.n	8006dca <_nx_dhcp_send_request_internal+0x51a>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	785b      	ldrb	r3, [r3, #1]
 8006dc6:	2b06      	cmp	r3, #6
 8006dc8:	d002      	beq.n	8006dd0 <_nx_dhcp_send_request_internal+0x520>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b07      	cmp	r3, #7
 8006dce:	d103      	bne.n	8006dd8 <_nx_dhcp_send_request_internal+0x528>
        (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
    {

        /* Use the current server's IP address.  */
        targetIP = interface_record -> nx_dhcp_server_ip;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd6:	e002      	b.n	8006dde <_nx_dhcp_send_request_internal+0x52e>
    }
    else
    {

        /* Set the server target IP address to broadcast.  */
        targetIP = NX_BOOTP_BC_ADDRESS;
 8006dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* DHCP messages broadcast by a client prior to that client obtaining
       its IP address must have the source address field in the IP header
       set to 0. RFC2131, Section4.1, Page23.  */
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDISCOVER) ||
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d006      	beq.n	8006df2 <_nx_dhcp_send_request_internal+0x542>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d10b      	bne.n	8006e02 <_nx_dhcp_send_request_internal+0x552>
        ((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state < NX_DHCP_STATE_BOUND)))
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	785b      	ldrb	r3, [r3, #1]
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d807      	bhi.n	8006e02 <_nx_dhcp_send_request_internal+0x552>
    {

        /* Call function to send the special packet with zero source address.*/
        status = _nx_dhcp_client_send_with_zero_source_address(dhcp_ptr, iface_index, packet_ptr);
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	461a      	mov	r2, r3
 8006df6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 f819 	bl	8006e30 <_nx_dhcp_client_send_with_zero_source_address>
 8006dfe:	63b8      	str	r0, [r7, #56]	; 0x38
 8006e00:	e00a      	b.n	8006e18 <_nx_dhcp_send_request_internal+0x568>
    }
    else
    {

        /* Send the packet.  */
        status = nx_udp_socket_interface_send(&(dhcp_ptr -> nx_dhcp_socket), packet_ptr, targetIP, NX_DHCP_SERVER_UDP_PORT, iface_index);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f603 30dc 	addw	r0, r3, #3036	; 0xbdc
 8006e08:	6a39      	ldr	r1, [r7, #32]
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	2343      	movs	r3, #67	; 0x43
 8006e10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e12:	f006 fb20 	bl	800d456 <_nx_udp_socket_source_send>
 8006e16:	63b8      	str	r0, [r7, #56]	; 0x38
    }

    /* If an error is detected, release the packet. */
    if (status != NX_SUCCESS)
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <_nx_dhcp_send_request_internal+0x576>
    {

        /* Release the packet.  */
        nx_packet_release(packet_ptr);
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f005 fad5 	bl	800c3d0 <_nx_packet_release>
    }

    /* Return completion status.  */
    return(status);
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3744      	adds	r7, #68	; 0x44
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd90      	pop	{r4, r7, pc}

08006e30 <_nx_dhcp_client_send_with_zero_source_address>:
/*                                            supported new ip filter,    */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_client_send_with_zero_source_address(NX_DHCP *dhcp_ptr, UINT iface_index, NX_PACKET *packet_ptr)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b098      	sub	sp, #96	; 0x60
 8006e34:	af02      	add	r7, sp, #8
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
ULONG           checksum;
ULONG           val;
NX_IP_DRIVER    driver_request;
      
    /* Set up the pointer to the associated IP instance.  */
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set up the pointer to the associated socket.  */
    socket_ptr = &dhcp_ptr -> nx_dhcp_socket;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 8006e48:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Set up the pointer to the interface.  */
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	224c      	movs	r2, #76	; 0x4c
 8006e4e:	fb02 f303 	mul.w	r3, r2, r3
 8006e52:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8006e56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e58:	4413      	add	r3, r2
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	64bb      	str	r3, [r7, #72]	; 0x48
    packet_ptr -> nx_packet_ip_interface = interface_ptr;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set up the address.  */
    ip_src_addr = NX_BOOTP_NO_ADDRESS;
 8006e64:	2300      	movs	r3, #0
 8006e66:	637b      	str	r3, [r7, #52]	; 0x34
    ip_dest_addr = NX_BOOTP_BC_ADDRESS;
 8006e68:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the interface.  */
    if ((!interface_ptr -> nx_interface_valid) || (!interface_ptr -> nx_interface_link_up))
 8006e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e70:	791b      	ldrb	r3, [r3, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <_nx_dhcp_client_send_with_zero_source_address+0x4e>
 8006e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e78:	799b      	ldrb	r3, [r3, #6]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <_nx_dhcp_client_send_with_zero_source_address+0x52>
    {

        /* None found; return the error status. */
        return(NX_INVALID_INTERFACE);
 8006e7e:	234c      	movs	r3, #76	; 0x4c
 8006e80:	e13b      	b.n	80070fa <_nx_dhcp_client_send_with_zero_source_address+0x2ca>
    }

    /* Build UDP header.  */

    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f1a3 0208 	sub.w	r2, r3, #8
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2204      	movs	r2, #4
 8006e92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    
#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 8006e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 8006ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	441a      	add	r2, r3
 8006eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ebe:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 8006ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec2:	695a      	ldr	r2, [r3, #20]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	441a      	add	r2, r3
 8006eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ecc:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	f103 0208 	add.w	r2, r3, #8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    udp_header_ptr =  (NX_UDP_HEADER *) packet_ptr -> nx_packet_prepend_ptr;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 = (((ULONG)socket_ptr -> nx_udp_socket_port ) << NX_SHIFT_BY_16) | (ULONG) NX_DHCP_SERVER_UDP_PORT;
 8006ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	041b      	lsls	r3, r3, #16
 8006ee6:	f043 0243 	orr.w	r2, r3, #67	; 0x43
 8006eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eec:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	041a      	lsls	r2, r3, #16
 8006ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ef6:	605a      	str	r2, [r3, #4]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8006ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	ba1a      	rev	r2, r3
 8006efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f00:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8006f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	ba1a      	rev	r2, r3
 8006f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f0a:	605a      	str	r2, [r3, #4]

#ifdef NX_DISABLE_UDP_TX_CHECKSUM
    compute_checksum = 0;
#else /* NX_DISABLE_UDP_TX_CHECKSUM */
    compute_checksum = 1;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	643b      	str	r3, [r7, #64]	; 0x40
        compute_checksum = 0;
    else
        compute_checksum = 1;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    if (compute_checksum)
 8006f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d027      	beq.n	8006f66 <_nx_dhcp_client_send_with_zero_source_address+0x136>
    {
        /* Yes, we need to compute the UDP checksum.  */
        checksum = _nx_ip_checksum_compute(packet_ptr,
                                           NX_PROTOCOL_UDP,
                                           (UINT)packet_ptr -> nx_packet_length,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(packet_ptr,
 8006f1a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006f1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	460b      	mov	r3, r1
 8006f26:	2111      	movs	r1, #17
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f002 fd05 	bl	8009938 <_nx_ip_checksum_compute>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	657b      	str	r3, [r7, #84]	; 0x54
                                           &ip_src_addr,
                                           &ip_dest_addr);

        checksum = ~checksum & NX_LOWER_16_MASK;
 8006f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f34:	43db      	mvns	r3, r3
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	657b      	str	r3, [r7, #84]	; 0x54

        /* If the computed checksum is zero, it will be transmitted as all ones. */
        /* RFC 768, page 2. */
        if (checksum == 0)
 8006f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d102      	bne.n	8006f46 <_nx_dhcp_client_send_with_zero_source_address+0x116>
            checksum = 0xFFFF;
 8006f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f44:	657b      	str	r3, [r7, #84]	; 0x54

        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8006f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	ba1a      	rev	r2, r3
 8006f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f4e:	605a      	str	r2, [r3, #4]

        udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 8006f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f56:	431a      	orrs	r2, r3
 8006f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f5a:	605a      	str	r2, [r3, #4]

        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8006f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	ba1a      	rev	r2, r3
 8006f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f64:	605a      	str	r2, [r3, #4]
        /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f68:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f70:	4618      	mov	r0, r3
 8006f72:	f00b f893 	bl	801209c <_txe_mutex_get>

    /* Build the IP header.  */

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - 20;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f1a3 0214 	sub.w	r2, r3, #20
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + 20;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	f103 0214 	add.w	r2, r3, #20
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the IP header pointer.  */
    ip_header_ptr =  (NX_IPV4_HEADER *) packet_ptr -> nx_packet_prepend_ptr; 
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Build the first 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8006f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 8006fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa6:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 8006fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006faa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006fae:	1c59      	adds	r1, r3, #1
 8006fb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fb2:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 8006fb6:	041a      	lsls	r2, r3, #16
 8006fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc0:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((socket_ptr -> nx_udp_socket_time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | NX_IP_UDP);
 8006fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	061b      	lsls	r3, r3, #24
 8006fc8:	f443 1288 	orr.w	r2, r3, #1114112	; 0x110000
 8006fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fce:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  ip_src_addr;
 8006fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd4:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  ip_dest_addr;
 8006fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fda:	611a      	str	r2, [r3, #16]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8006fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	ba1a      	rev	r2, r3
 8006fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe4:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8006fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	ba1a      	rev	r2, r3
 8006fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fee:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8006ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	ba1a      	rev	r2, r3
 8006ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff8:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	ba1a      	rev	r2, r3
 8007000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007002:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8007004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	ba1a      	rev	r2, r3
 800700a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700c:	611a      	str	r2, [r3, #16]
     
#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#else /* NX_DISABLE_IP_TX_CHECKSUM */
    compute_checksum = 1;
 800700e:	2301      	movs	r3, #1
 8007010:	643b      	str	r3, [r7, #64]	; 0x40
        compute_checksum = 0;
    else
        compute_checksum = 1;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    if (compute_checksum)
 8007012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007014:	2b00      	cmp	r3, #0
 8007016:	d018      	beq.n	800704a <_nx_dhcp_client_send_with_zero_source_address+0x21a>
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4, 20, NULL, NULL);
 8007018:	2300      	movs	r3, #0
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	2300      	movs	r3, #0
 800701e:	2214      	movs	r2, #20
 8007020:	2104      	movs	r1, #4
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f002 fc88 	bl	8009938 <_nx_ip_checksum_compute>
 8007028:	4603      	mov	r3, r0
 800702a:	657b      	str	r3, [r7, #84]	; 0x54

        val = (ULONG)(~checksum);
 800702c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800702e:	43db      	mvns	r3, r3
 8007030:	63bb      	str	r3, [r7, #56]	; 0x38
        val = val & NX_LOWER_16_MASK;
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	b29b      	uxth	r3, r3
 8007036:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 8007038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703a:	ba1b      	rev	r3, r3
 800703c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 800703e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	431a      	orrs	r2, r3
 8007046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007048:	609a      	str	r2, [r3, #8]
        }
    }
#endif /* NX_ENABLE_IP_PACKET_FILTER */

    /* Build the driver request.  */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 800704a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_packet =                packet_ptr;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_ip_interface;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 8007058:	2304      	movs	r3, #4
 800705a:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 800705c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007060:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8007062:	f04f 33ff 	mov.w	r3, #4294967295
 8007066:	61fb      	str	r3, [r7, #28]

    /* Determine if fragmentation is needed.  */
    if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_mtu_size)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	429a      	cmp	r2, r3
 8007074:	d925      	bls.n	80070c2 <_nx_dhcp_client_send_with_zero_source_address+0x292>
    {

#ifndef NX_DISABLE_FRAGMENTATION
        /* Check the DF bit flag.  */
        if ((ip_ptr -> nx_ip_fragment_processing) && (socket_ptr -> nx_udp_socket_fragment_enable != NX_DONT_FRAGMENT))
 8007076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007078:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800707c:	2b00      	cmp	r3, #0
 800707e:	d013      	beq.n	80070a8 <_nx_dhcp_client_send_with_zero_source_address+0x278>
 8007080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007088:	d00e      	beq.n	80070a8 <_nx_dhcp_client_send_with_zero_source_address+0x278>
        {

            /* Fragmentation is needed, call the IP fragment processing routine.  */
            (ip_ptr -> nx_ip_fragment_processing) (&driver_request);
 800708a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800708c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007090:	f107 0210 	add.w	r2, r7, #16
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800709e:	4618      	mov	r0, r3
 80070a0:	f00b f856 	bl	8012150 <_txe_mutex_put>

            /* Return a successful status.  */
            return(NX_SUCCESS);
 80070a4:	2300      	movs	r3, #0
 80070a6:	e028      	b.n	80070fa <_nx_dhcp_client_send_with_zero_source_address+0x2ca>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 80070a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070b0:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80070b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070b4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80070b8:	4618      	mov	r0, r3
 80070ba:	f00b f849 	bl	8012150 <_txe_mutex_put>

            /* Return a not successful status.  */
            return(NX_NOT_SUCCESSFUL);
 80070be:	2343      	movs	r3, #67	; 0x43
 80070c0:	e01b      	b.n	80070fa <_nx_dhcp_client_send_with_zero_source_address+0x2ca>
    }

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP packet sent count.  */
    ip_ptr -> nx_ip_total_packets_sent++;
 80070c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ca:	615a      	str	r2, [r3, #20]

    /* Increment the IP bytes sent count.  */
    ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - 20;
 80070cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ce:	699a      	ldr	r2, [r3, #24]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	4413      	add	r3, r2
 80070d6:	f1a3 0214 	sub.w	r2, r3, #20
 80070da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070dc:	619a      	str	r2, [r3, #24]
#endif

    /* Broadcast packet.  */
    (packet_ptr -> nx_packet_ip_interface -> nx_interface_link_driver_entry) (&driver_request);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e4:	f107 0210 	add.w	r2, r7, #16
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80070ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80070f2:	4618      	mov	r0, r3
 80070f4:	f00b f82c 	bl	8012150 <_txe_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3758      	adds	r7, #88	; 0x58
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <_nx_dhcp_extract_information>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_extract_information(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UCHAR *dhcp_message, UINT length)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b086      	sub	sp, #24
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	603b      	str	r3, [r7, #0]

ULONG       value;


    /* Extract the IP address.  */
    value =  _nx_dhcp_get_data(dhcp_message + NX_BOOTP_OFFSET_YOUR_IP, 4);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3310      	adds	r3, #16
 8007114:	2104      	movs	r1, #4
 8007116:	4618      	mov	r0, r3
 8007118:	f000 fac2 	bl	80076a0 <_nx_dhcp_get_data>
 800711c:	4603      	mov	r3, r0
 800711e:	617b      	str	r3, [r7, #20]

    /* Determine if it is valid.  */
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d01c      	beq.n	8007160 <_nx_dhcp_extract_information+0x5e>
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8007126:	697b      	ldr	r3, [r7, #20]
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8007128:	2b00      	cmp	r3, #0
 800712a:	da0b      	bge.n	8007144 <_nx_dhcp_extract_information+0x42>
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8007132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007136:	d005      	beq.n	8007144 <_nx_dhcp_extract_information+0x42>
         ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 800713e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007142:	d10d      	bne.n	8007160 <_nx_dhcp_extract_information+0x5e>
    {

        /* Store the IP address.  */
        interface_record -> nx_dhcp_ip_address =  value;
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	60da      	str	r2, [r3, #12]
        return(NX_DHCP_BAD_IP_ADDRESS);
    }
                       
    /* Determine if there is a subnet mask. Note a DHCP Server receiving a BOOTP request
       may send DHCP option data for subnet masks as per RFC 1534 Section 2.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_SUBNET_MASK, &value, length) == NX_SUCCESS)
 800714a:	f107 0214 	add.w	r2, r7, #20
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2101      	movs	r1, #1
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f8f5 	bl	8007342 <_nx_dhcp_get_option_value>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <_nx_dhcp_extract_information+0x62>
 800715e:	e012      	b.n	8007186 <_nx_dhcp_extract_information+0x84>
        return(NX_DHCP_BAD_IP_ADDRESS);
 8007160:	2392      	movs	r3, #146	; 0x92
 8007162:	e0ea      	b.n	800733a <_nx_dhcp_extract_information+0x238>
    {

        /* Make sure there is a valid IP address too.  */
        if (value != NX_BOOTP_NO_ADDRESS)
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <_nx_dhcp_extract_information+0x70>
        {

            interface_record -> nx_dhcp_network_mask =  value;
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	619a      	str	r2, [r3, #24]
 8007170:	e009      	b.n	8007186 <_nx_dhcp_extract_information+0x84>
        {
            ULONG ip_address;

            /* No valid network mask info supplied; use the current network mask if any. Don't
               care about current IP address for now. */
            nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, 
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6898      	ldr	r0, [r3, #8]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	69d9      	ldr	r1, [r3, #28]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	3318      	adds	r3, #24
 800717e:	f107 0210 	add.w	r2, r7, #16
 8007182:	f003 fb03 	bl	800a78c <_nx_ip_interface_address_get>
#else  

    /* NX_DHCP_ENABLE_BOOTP  not defined */

    /* Overwrite the server ID if there is a DHCP option for Server ID */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_SERVER, &value, length) == NX_SUCCESS)
 8007186:	f107 0214 	add.w	r2, r7, #20
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2136      	movs	r1, #54	; 0x36
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f8d7 	bl	8007342 <_nx_dhcp_get_option_value>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d117      	bne.n	80071ca <_nx_dhcp_extract_information+0xc8>
    {

        /* Determine if it is valid.  */
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d012      	beq.n	80071c6 <_nx_dhcp_extract_information+0xc4>
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 80071a0:	697b      	ldr	r3, [r7, #20]
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	da0b      	bge.n	80071be <_nx_dhcp_extract_information+0xbc>
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 80071ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071b0:	d005      	beq.n	80071be <_nx_dhcp_extract_information+0xbc>
             ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 80071b8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80071bc:	d103      	bne.n	80071c6 <_nx_dhcp_extract_information+0xc4>
        {

            /* Store the server IP address.  */
            interface_record -> nx_dhcp_server_ip = value;
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	615a      	str	r2, [r3, #20]
 80071c4:	e001      	b.n	80071ca <_nx_dhcp_extract_information+0xc8>
        }
        else
        {
            return(NX_DHCP_BAD_IP_ADDRESS);
 80071c6:	2392      	movs	r3, #146	; 0x92
 80071c8:	e0b7      	b.n	800733a <_nx_dhcp_extract_information+0x238>
        }
    }

    /* Get the lease time.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_LEASE, &value, length) == NX_SUCCESS)
 80071ca:	f107 0214 	add.w	r2, r7, #20
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2133      	movs	r1, #51	; 0x33
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8b5 	bl	8007342 <_nx_dhcp_get_option_value>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d120      	bne.n	8007220 <_nx_dhcp_extract_information+0x11e>
    {

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e4:	d109      	bne.n	80071fa <_nx_dhcp_extract_information+0xf8>
        {
            /* Store the 'infinite' lease time . */
            interface_record -> nx_dhcp_lease_time = value;
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	62da      	str	r2, [r3, #44]	; 0x2c
            interface_record -> nx_dhcp_renewal_time = value;
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	631a      	str	r2, [r3, #48]	; 0x30
            interface_record -> nx_dhcp_rebind_time = value;
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	635a      	str	r2, [r3, #52]	; 0x34
 80071f8:	e012      	b.n	8007220 <_nx_dhcp_extract_information+0x11e>
        }
        else
        {            

            /* Store the lease time in timer ticks.  */
            interface_record -> nx_dhcp_lease_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2264      	movs	r2, #100	; 0x64
 80071fe:	fb03 f202 	mul.w	r2, r3, r2
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	62da      	str	r2, [r3, #44]	; 0x2c
    
            /* Set the renew and rebind times.  */
            interface_record -> nx_dhcp_renewal_time = interface_record -> nx_dhcp_lease_time / 2;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720a:	085a      	lsrs	r2, r3, #1
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	631a      	str	r2, [r3, #48]	; 0x30
            interface_record -> nx_dhcp_rebind_time =  interface_record -> nx_dhcp_lease_time - (interface_record -> nx_dhcp_lease_time / 8);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	08db      	lsrs	r3, r3, #3
 800721a:	1ad2      	subs	r2, r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }
 
    /* Overwrite the renew and rebind times with the specified values if the options are present.  */
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 8007220:	f107 0214 	add.w	r2, r7, #20
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	213a      	movs	r1, #58	; 0x3a
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f88a 	bl	8007342 <_nx_dhcp_get_option_value>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d112      	bne.n	800725a <_nx_dhcp_extract_information+0x158>
        (value <= interface_record -> nx_dhcp_lease_time))
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007238:	697b      	ldr	r3, [r7, #20]
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 800723a:	429a      	cmp	r2, r3
 800723c:	d30d      	bcc.n	800725a <_nx_dhcp_extract_information+0x158>
    {       

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007244:	d103      	bne.n	800724e <_nx_dhcp_extract_information+0x14c>
        {
            /* Set the 'infinite least time.  */
            interface_record -> nx_dhcp_renewal_time = value;
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	631a      	str	r2, [r3, #48]	; 0x30
 800724c:	e005      	b.n	800725a <_nx_dhcp_extract_information+0x158>
        }
        else
        {

            /* Store the renewal time in timer ticks  */
            interface_record -> nx_dhcp_renewal_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2264      	movs	r2, #100	; 0x64
 8007252:	fb03 f202 	mul.w	r2, r3, r2
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
  
    /* Determine if there is a rebind time.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_REBIND, &value, length) == NX_SUCCESS)
 800725a:	f107 0214 	add.w	r2, r7, #20
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	213b      	movs	r1, #59	; 0x3b
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f86d 	bl	8007342 <_nx_dhcp_get_option_value>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d119      	bne.n	80072a2 <_nx_dhcp_extract_information+0x1a0>
    {

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007274:	d103      	bne.n	800727e <_nx_dhcp_extract_information+0x17c>
        {

            /* Set the 'infinite least time.  */
            interface_record -> nx_dhcp_rebind_time = value;
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	635a      	str	r2, [r3, #52]	; 0x34
 800727c:	e011      	b.n	80072a2 <_nx_dhcp_extract_information+0x1a0>
        }
        else
        {

            /* Convert to timer ticks. */
            value = value * (ULONG)NX_IP_PERIODIC_RATE;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2264      	movs	r2, #100	; 0x64
 8007282:	fb02 f303 	mul.w	r3, r2, r3
 8007286:	617b      	str	r3, [r7, #20]

            /* Sanity check*/
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	429a      	cmp	r2, r3
 8007290:	d307      	bcc.n	80072a2 <_nx_dhcp_extract_information+0x1a0>
                (value >= interface_record -> nx_dhcp_renewal_time))
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007296:	697b      	ldr	r3, [r7, #20]
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8007298:	429a      	cmp	r2, r3
 800729a:	d802      	bhi.n	80072a2 <_nx_dhcp_extract_information+0x1a0>
            {
        
                /* Store the rebind time.  */
                interface_record -> nx_dhcp_rebind_time =  value;
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	635a      	str	r2, [r3, #52]	; 0x34
            }
        }
    }

    /* Determine if this is an ACK from a server response, which can only happen from a handful of states.  */
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	785b      	ldrb	r3, [r3, #1]
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d007      	beq.n	80072ba <_nx_dhcp_extract_information+0x1b8>
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	785b      	ldrb	r3, [r3, #1]
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 80072ae:	2b06      	cmp	r3, #6
 80072b0:	d003      	beq.n	80072ba <_nx_dhcp_extract_information+0x1b8>
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_REBINDING))
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	785b      	ldrb	r3, [r3, #1]
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 80072b6:	2b07      	cmp	r3, #7
 80072b8:	d121      	bne.n	80072fe <_nx_dhcp_extract_information+0x1fc>
    {

        /* Determine if the IP gateway/router IP address is present.  */
        if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_GATEWAYS, &value, length) == NX_SUCCESS)
 80072ba:	f107 0214 	add.w	r2, r7, #20
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2103      	movs	r1, #3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f83d 	bl	8007342 <_nx_dhcp_get_option_value>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d117      	bne.n	80072fe <_nx_dhcp_extract_information+0x1fc>
        {

            /* Determine if it is valid.  */
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d012      	beq.n	80072fa <_nx_dhcp_extract_information+0x1f8>
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 80072d4:	697b      	ldr	r3, [r7, #20]
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	da0b      	bge.n	80072f2 <_nx_dhcp_extract_information+0x1f0>
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 80072e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072e4:	d005      	beq.n	80072f2 <_nx_dhcp_extract_information+0x1f0>
                 ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 80072ec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80072f0:	d103      	bne.n	80072fa <_nx_dhcp_extract_information+0x1f8>
            {

                /* Store the gateway/Router IP address to the Client record.  */
                interface_record -> nx_dhcp_gateway_address = value;
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	611a      	str	r2, [r3, #16]
 80072f8:	e001      	b.n	80072fe <_nx_dhcp_extract_information+0x1fc>
            }
            else
            {
                return(NX_DHCP_BAD_IP_ADDRESS);
 80072fa:	2392      	movs	r3, #146	; 0x92
 80072fc:	e01d      	b.n	800733a <_nx_dhcp_extract_information+0x238>
            }
        }
    }

     /* Check the DHCP options size.  */
     if ((length - NX_BOOTP_OFFSET_OPTIONS) > NX_DHCP_OPTIONS_BUFFER_SIZE)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	3bf0      	subs	r3, #240	; 0xf0
 8007302:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8007306:	d905      	bls.n	8007314 <_nx_dhcp_extract_information+0x212>
         interface_record -> nx_dhcp_options_size = NX_DHCP_OPTIONS_BUFFER_SIZE;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800730e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8007312:	e005      	b.n	8007320 <_nx_dhcp_extract_information+0x21e>
     else
         interface_record -> nx_dhcp_options_size = length - NX_BOOTP_OFFSET_OPTIONS;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	f1a3 02f0 	sub.w	r2, r3, #240	; 0xf0
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

     /* Copy the DHCP options into DHCP Client options buffer.  */
     memcpy(interface_record -> nx_dhcp_options_buffer, /* Use case of memcpy is verified. */
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f103 0048 	add.w	r0, r3, #72	; 0x48
            &dhcp_message[NX_BOOTP_OFFSET_OPTIONS], interface_record -> nx_dhcp_options_size);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
     memcpy(interface_record -> nx_dhcp_options_buffer, /* Use case of memcpy is verified. */
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8007332:	461a      	mov	r2, r3
 8007334:	f00b fda6 	bl	8012e84 <memcpy>

#endif  /* NX_DHCP_ENABLE_BOOTP */

    return (NX_SUCCESS);
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <_nx_dhcp_get_option_value>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_get_option_value(UCHAR *bootp_message, UINT option, ULONG *value, UINT length)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b088      	sub	sp, #32
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
 800734e:	603b      	str	r3, [r7, #0]
UCHAR *option_message;
UINT   option_length;


    /* Setup buffer pointer.  */
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	33f0      	adds	r3, #240	; 0xf0
 8007354:	61fb      	str	r3, [r7, #28]
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	3bf0      	subs	r3, #240	; 0xf0
 800735a:	61bb      	str	r3, [r7, #24]

    /* Find the option.  */
    if ((option != NX_DHCP_OPTION_PAD) && (option != NX_DHCP_OPTION_END))
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d02c      	beq.n	80073bc <_nx_dhcp_get_option_value+0x7a>
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2bff      	cmp	r3, #255	; 0xff
 8007366:	d029      	beq.n	80073bc <_nx_dhcp_get_option_value+0x7a>
    {

        /* Search the buffer for the option.  */
        data =  _nx_dhcp_search_buffer(option_message, option, option_length);
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	68b9      	ldr	r1, [r7, #8]
 800736c:	69f8      	ldr	r0, [r7, #28]
 800736e:	f000 f94f 	bl	8007610 <_nx_dhcp_search_buffer>
 8007372:	6178      	str	r0, [r7, #20]

        /* Check to see if the option was found.  */
        if (data != NX_NULL)
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d020      	beq.n	80073bc <_nx_dhcp_get_option_value+0x7a>
        {

            /* Check for the proper size.  */
            if (*data > 4)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b04      	cmp	r3, #4
 8007380:	d90f      	bls.n	80073a2 <_nx_dhcp_get_option_value+0x60>
            {

                /* Check for the gateway option.  */
                if (option == NX_DHCP_OPTION_GATEWAYS)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b03      	cmp	r3, #3
 8007386:	d10a      	bne.n	800739e <_nx_dhcp_get_option_value+0x5c>
                {

                    /* Pickup the first gateway address.  */
                    *value =  _nx_dhcp_get_data(data + 1, 4);
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	3301      	adds	r3, #1
 800738c:	2104      	movs	r1, #4
 800738e:	4618      	mov	r0, r3
 8007390:	f000 f986 	bl	80076a0 <_nx_dhcp_get_data>
 8007394:	4602      	mov	r2, r0
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	601a      	str	r2, [r3, #0]

                    /* For now, just disregard any additional gateway addresses.  */
                    return(NX_SUCCESS);
 800739a:	2300      	movs	r3, #0
 800739c:	e00f      	b.n	80073be <_nx_dhcp_get_option_value+0x7c>
                }
                else
                {

                    /* Invalid size, return error.  */
                    return(NX_SIZE_ERROR);
 800739e:	2309      	movs	r3, #9
 80073a0:	e00d      	b.n	80073be <_nx_dhcp_get_option_value+0x7c>
            }
            else
            {

                /* Get the actual value.  */
                *value = _nx_dhcp_get_data(data + 1, *data);
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f000 f977 	bl	80076a0 <_nx_dhcp_get_data>
 80073b2:	4602      	mov	r2, r0
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	601a      	str	r2, [r3, #0]
                return(NX_SUCCESS);  
 80073b8:	2300      	movs	r3, #0
 80073ba:	e000      	b.n	80073be <_nx_dhcp_get_option_value+0x7c>
            }
        }
    }

    /* Return an error if not found.  */
    return(NX_OPTION_ERROR);
 80073bc:	230a      	movs	r3, #10
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3720      	adds	r7, #32
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <_nx_dhcp_add_option_value>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_add_option_value(UCHAR *bootp_message, UINT option, UINT size, ULONG value, UINT *index)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	607a      	str	r2, [r7, #4]
 80073d2:	603b      	str	r3, [r7, #0]


    /* Store the option.  */
    *(bootp_message + (*index)) = (UCHAR)option;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)size; 
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_store_data(bootp_message + (*index), size, value);
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	4618      	mov	r0, r3
 8007412:	f000 f961 	bl	80076d8 <_nx_dhcp_store_data>
    (*index) += size;    
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	441a      	add	r2, r3
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	601a      	str	r2, [r3, #0]

    /* Return a successful completion.  */
    return(NX_SUCCESS);
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <_nx_dhcp_add_option_string>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_add_option_string(UCHAR *bootp_message, UINT option, UINT size, UCHAR *value, UINT *index)
{                                              
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
                    
    /* Store the option.  */
    *(bootp_message + (*index)) = (UCHAR)option;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4413      	add	r3, r2
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	b2d2      	uxtb	r2, r2
 8007446:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)size; 
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4413      	add	r3, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4413      	add	r3, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	4618      	mov	r0, r3
 8007478:	f000 f966 	bl	8007748 <_nx_dhcp_move_string>
    (*index) += size;    
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	441a      	add	r2, r3
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	601a      	str	r2, [r3, #0]

    /* Return a successful completion.  */
    return(NX_SUCCESS);      
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <_nx_dhcp_add_option_parameter_request>:
/*                                                                        */
/*  08-02-2021     Yuxin Zhou               Initial Version 6.1.8         */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_add_option_parameter_request(NX_DHCP *dhcp_ptr, UCHAR *bootp_message, UINT *index)
{                                              
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
                    
    /* Store the option.  */
    *(bootp_message + (*index)) = NX_DHCP_OPTION_DHCP_PARAMETERS;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	4413      	add	r3, r2
 80074a8:	2237      	movs	r2, #55	; 0x37
 80074aa:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)(NX_DHCP_REQUEST_PARAMETER_SIZE + dhcp_ptr -> nx_dhcp_user_request_parameter_size); 
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074bc:	f8d3 3f3c 	ldr.w	r3, [r3, #3900]	; 0xf3c
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68b9      	ldr	r1, [r7, #8]
 80074c8:	440b      	add	r3, r1
 80074ca:	3203      	adds	r2, #3
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_move_string(bootp_message + (*index), _nx_dhcp_request_parameters, NX_DHCP_REQUEST_PARAMETER_SIZE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	4413      	add	r3, r2
 80074e2:	2203      	movs	r2, #3
 80074e4:	4917      	ldr	r1, [pc, #92]	; (8007544 <_nx_dhcp_add_option_parameter_request+0xb0>)
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f92e 	bl	8007748 <_nx_dhcp_move_string>
    (*index) += (UINT)NX_DHCP_REQUEST_PARAMETER_SIZE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	1cda      	adds	r2, r3, #3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	601a      	str	r2, [r3, #0]

    /* Check if there are additional user options.  */
    if (dhcp_ptr -> nx_dhcp_user_request_parameter_size)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074fc:	f8d3 3f3c 	ldr.w	r3, [r3, #3900]	; 0xf3c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01a      	beq.n	800753a <_nx_dhcp_add_option_parameter_request+0xa6>
    {
        _nx_dhcp_move_string(bootp_message + (*index), dhcp_ptr -> nx_dhcp_user_request_parameter, dhcp_ptr -> nx_dhcp_user_request_parameter_size);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	18d0      	adds	r0, r2, r3
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	f641 7338 	movw	r3, #7992	; 0x1f38
 8007512:	4413      	add	r3, r2
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800751a:	f8d2 2f3c 	ldr.w	r2, [r2, #3900]	; 0xf3c
 800751e:	4619      	mov	r1, r3
 8007520:	f000 f912 	bl	8007748 <_nx_dhcp_move_string>
        (*index) += (UCHAR)dhcp_ptr -> nx_dhcp_user_request_parameter_size;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800752e:	f8d2 2f3c 	ldr.w	r2, [r2, #3900]	; 0xf3c
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	441a      	add	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	601a      	str	r2, [r3, #0]
    }

    /* Return a successful completion.  */
    return(NX_SUCCESS);      
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	2000000c 	.word	0x2000000c

08007548 <_nx_dhcp_add_randomize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_add_randomize(ULONG timeout)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
ULONG adjustment;

    /* Uniform random number chosen from the range -1 to +1 second as recommended by RFC2131, Section4.1, Page24. */

    /* Calculate random time adjustment in timer ticks from the range 0 to NX_IP_PERIODIC_RATE * 2.  */
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 8007550:	f00b fd3c 	bl	8012fcc <rand>
 8007554:	4603      	mov	r3, r0
 8007556:	4a12      	ldr	r2, [pc, #72]	; (80075a0 <_nx_dhcp_add_randomize+0x58>)
 8007558:	fba2 1203 	umull	r1, r2, r2, r3
 800755c:	0852      	lsrs	r2, r2, #1
 800755e:	21c9      	movs	r1, #201	; 0xc9
 8007560:	fb01 f202 	mul.w	r2, r1, r2
 8007564:	1a9b      	subs	r3, r3, r2
 8007566:	60fb      	str	r3, [r7, #12]

    /* Check for adjustment.  */
    if (adjustment < NX_IP_PERIODIC_RATE)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b63      	cmp	r3, #99	; 0x63
 800756c:	d80e      	bhi.n	800758c <_nx_dhcp_add_randomize+0x44>
    {

        /* Updated timeout, minus NX_IP_PERIODIC_RATE - adjustment.  */

        /* Check for timeout.  */
        if (timeout > (NX_IP_PERIODIC_RATE - adjustment))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	429a      	cmp	r2, r3
 8007578:	d905      	bls.n	8007586 <_nx_dhcp_add_randomize+0x3e>
            timeout -= (ULONG)(NX_IP_PERIODIC_RATE - adjustment);
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4413      	add	r3, r2
 8007580:	3b64      	subs	r3, #100	; 0x64
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	e007      	b.n	8007596 <_nx_dhcp_add_randomize+0x4e>
        else
            timeout = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	607b      	str	r3, [r7, #4]
 800758a:	e004      	b.n	8007596 <_nx_dhcp_add_randomize+0x4e>
    }
    else
    {

        /* Updated timeout, add adjustment- NX_IP_PERIODIC_RATE.  */
        timeout += (ULONG)(adjustment - NX_IP_PERIODIC_RATE);
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4413      	add	r3, r2
 8007592:	3b64      	subs	r3, #100	; 0x64
 8007594:	607b      	str	r3, [r7, #4]
    }

    return timeout;
 8007596:	687b      	ldr	r3, [r7, #4]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	028c1979 	.word	0x028c1979

080075a4 <_nx_dhcp_update_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_update_timeout(ULONG timeout)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]

    /* Timed out, double the timeout, limited to NX_DHCP_MAX_RETRANS_TIMEOUT */
    if ((2 * timeout) >= NX_DHCP_MAX_RETRANS_TIMEOUT)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80075b4:	d303      	bcc.n	80075be <_nx_dhcp_update_timeout+0x1a>
    {

        /* Set the timeout as NX_DHCP_MAX_RETRANS_TIMEOUT.  */
        timeout = NX_DHCP_MAX_RETRANS_TIMEOUT;  
 80075b6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80075ba:	607b      	str	r3, [r7, #4]
 80075bc:	e002      	b.n	80075c4 <_nx_dhcp_update_timeout+0x20>
    }
    else
    {

        /* Double timeout value.  */
        timeout = timeout * 2;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	607b      	str	r3, [r7, #4]
    }

    /* Return the sequence timeout.  */
    return(timeout);
 80075c4:	687b      	ldr	r3, [r7, #4]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <_nx_dhcp_update_renewal_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_update_renewal_timeout(ULONG timeout)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]

    /* check if the timeout is non zero */
    if (timeout != 0)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d010      	beq.n	8007602 <_nx_dhcp_update_renewal_timeout+0x30>
    {

        /* Timed out, halve the timeout, limited to NX_DHCP_MIN_RENEW_TIMEOUT or
          the remaining timeout if it is less than NX_DHCP_MIN_RENEW_TIMEOUT */
        if (timeout > NX_DHCP_MIN_RENEW_TIMEOUT)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f241 7270 	movw	r2, #6000	; 0x1770
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d90b      	bls.n	8007602 <_nx_dhcp_update_renewal_timeout+0x30>
        {

            /* Timeout can still decrease, either
               force it to the minimum or halve it */
            if (timeout > (2 * NX_DHCP_MIN_RENEW_TIMEOUT ))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d903      	bls.n	80075fc <_nx_dhcp_update_renewal_timeout+0x2a>
            {

                /* Halve timeout.  */
                timeout = timeout / 2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	085b      	lsrs	r3, r3, #1
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	e002      	b.n	8007602 <_nx_dhcp_update_renewal_timeout+0x30>
            }
            else
            {

                /* set timeout to minimum.  */
                timeout =  NX_DHCP_MIN_RENEW_TIMEOUT ;
 80075fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8007600:	607b      	str	r3, [r7, #4]
            }
        }
    }

    /* Return the sequence timeout.  */
    return(timeout);
 8007602:	687b      	ldr	r3, [r7, #4]
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <_nx_dhcp_search_buffer>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UCHAR  *_nx_dhcp_search_buffer(UCHAR *option_message, UINT option, UINT length)
{
 8007610:	b480      	push	{r7}
 8007612:	b089      	sub	sp, #36	; 0x24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
UCHAR   *data;
UINT    i;
UINT    size;

    /* Setup buffer pointer.  */
    data = option_message;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	61fb      	str	r3, [r7, #28]
    i = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	61bb      	str	r3, [r7, #24]

    /* Search as long as there are valid options.   */
    while (i < length - 1)
 8007624:	e030      	b.n	8007688 <_nx_dhcp_search_buffer+0x78>
    {

        /* Simply skip any padding */
        if (*data == NX_DHCP_OPTION_PAD)
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d106      	bne.n	800763c <_nx_dhcp_search_buffer+0x2c>
        {

            data++;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	3301      	adds	r3, #1
 8007632:	61fb      	str	r3, [r7, #28]
            i++;
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	3301      	adds	r3, #1
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	e025      	b.n	8007688 <_nx_dhcp_search_buffer+0x78>
        }

        /* On a match, return a pointer to the size.  */
        else if (*data == option)
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	4293      	cmp	r3, r2
 8007646:	d10f      	bne.n	8007668 <_nx_dhcp_search_buffer+0x58>
        {

            size = *(data + 1);
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	3301      	adds	r3, #1
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	617b      	str	r3, [r7, #20]

            /* Check if the option data is in the packet.  */
            if ((i + size + 1) > length)
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	4413      	add	r3, r2
 8007656:	3301      	adds	r3, #1
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	429a      	cmp	r2, r3
 800765c:	d201      	bcs.n	8007662 <_nx_dhcp_search_buffer+0x52>
                return(NX_NULL);
 800765e:	2300      	movs	r3, #0
 8007660:	e018      	b.n	8007694 <_nx_dhcp_search_buffer+0x84>

            /* Return a pointer to the option size byte.  */
            return(data + 1);
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	3301      	adds	r3, #1
 8007666:	e015      	b.n	8007694 <_nx_dhcp_search_buffer+0x84>

        /* Otherwise skip the option by adding the size to the pointer.  */
        else
        {

            size = *(++data);
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	3301      	adds	r3, #1
 800766c:	61fb      	str	r3, [r7, #28]
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	617b      	str	r3, [r7, #20]

            /* skip the data plus the size byte */
            data += size + 1;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	3301      	adds	r3, #1
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	4413      	add	r3, r2
 800767c:	61fb      	str	r3, [r7, #28]
            i += size + 1;
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	4413      	add	r3, r2
 8007684:	3301      	adds	r3, #1
 8007686:	61bb      	str	r3, [r7, #24]
    while (i < length - 1)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3b01      	subs	r3, #1
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	429a      	cmp	r2, r3
 8007690:	d3c9      	bcc.n	8007626 <_nx_dhcp_search_buffer+0x16>
        }
    }

    /* Return NULL to indicate the option was not found.  */
    return(NX_NULL);
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3724      	adds	r7, #36	; 0x24
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <_nx_dhcp_get_data>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG  _nx_dhcp_get_data(UCHAR *data, UINT size)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]

ULONG   value = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]

   
    /* Process the data retrieval request.  */
    while (size-- > 0)
 80076ae:	e007      	b.n	80076c0 <_nx_dhcp_get_data+0x20>
    {

        /* Build return value.  */
        value = (value << 8) | *data++;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	021a      	lsls	r2, r3, #8
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	1c59      	adds	r1, r3, #1
 80076b8:	6079      	str	r1, [r7, #4]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
    while (size-- > 0)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	1e5a      	subs	r2, r3, #1
 80076c4:	603a      	str	r2, [r7, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1f2      	bne.n	80076b0 <_nx_dhcp_get_data+0x10>
    }

    /* Return value.  */
    return(value);
 80076ca:	68fb      	ldr	r3, [r7, #12]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <_nx_dhcp_store_data>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_store_data(UCHAR *data, UINT size, ULONG value)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]

    /* Make sure that data is left justified.  */
    switch (size)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d011      	beq.n	800770e <_nx_dhcp_store_data+0x36>
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d812      	bhi.n	8007716 <_nx_dhcp_store_data+0x3e>
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d003      	beq.n	80076fe <_nx_dhcp_store_data+0x26>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d004      	beq.n	8007706 <_nx_dhcp_store_data+0x2e>
      
            value <<= 8;
            break;

        default:
            break;
 80076fc:	e00b      	b.n	8007716 <_nx_dhcp_store_data+0x3e>
            value <<= 24;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	061b      	lsls	r3, r3, #24
 8007702:	607b      	str	r3, [r7, #4]
            break;
 8007704:	e008      	b.n	8007718 <_nx_dhcp_store_data+0x40>
            value <<= 16;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	041b      	lsls	r3, r3, #16
 800770a:	607b      	str	r3, [r7, #4]
            break;
 800770c:	e004      	b.n	8007718 <_nx_dhcp_store_data+0x40>
            value <<= 8;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	021b      	lsls	r3, r3, #8
 8007712:	607b      	str	r3, [r7, #4]
            break;
 8007714:	e000      	b.n	8007718 <_nx_dhcp_store_data+0x40>
            break;
 8007716:	bf00      	nop
    }

    /* Store the value.  */
    while (size-- > 0)
 8007718:	e00a      	b.n	8007730 <_nx_dhcp_store_data+0x58>
    {

        *data = (UCHAR) ((value >> 24) & 0xff);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	0e1b      	lsrs	r3, r3, #24
 800771e:	b2da      	uxtb	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	701a      	strb	r2, [r3, #0]
        data++;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3301      	adds	r3, #1
 8007728:	60fb      	str	r3, [r7, #12]
        value <<= 8;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	021b      	lsls	r3, r3, #8
 800772e:	607b      	str	r3, [r7, #4]
    while (size-- > 0)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	1e5a      	subs	r2, r3, #1
 8007734:	60ba      	str	r2, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1ef      	bne.n	800771a <_nx_dhcp_store_data+0x42>
    }
}
 800773a:	bf00      	nop
 800773c:	bf00      	nop
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <_nx_dhcp_move_string>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_move_string(UCHAR *dest, UCHAR *source, UINT size)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]

    /* Loop to copy all bytes.  */
    while (size-- > 0)
 8007754:	e007      	b.n	8007766 <_nx_dhcp_move_string+0x1e>
    {
        
        /* Copy a byte.  */
        *dest++ = *source++;
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	1c53      	adds	r3, r2, #1
 800775a:	60bb      	str	r3, [r7, #8]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	1c59      	adds	r1, r3, #1
 8007760:	60f9      	str	r1, [r7, #12]
 8007762:	7812      	ldrb	r2, [r2, #0]
 8007764:	701a      	strb	r2, [r3, #0]
    while (size-- > 0)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	1e5a      	subs	r2, r3, #1
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1f2      	bne.n	8007756 <_nx_dhcp_move_string+0xe>
    }
}
 8007770:	bf00      	nop
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <_nx_dhcp_interface_record_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_dhcp_interface_record_find(NX_DHCP *dhcp_ptr, UINT iface_index, NX_DHCP_INTERFACE_RECORD **interface_record)
{
 800777e:	b480      	push	{r7}
 8007780:	b087      	sub	sp, #28
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	607a      	str	r2, [r7, #4]

UINT i;

    /* Find which DHCP Client interface record is assigned the input interface. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	e02c      	b.n	80077ea <_nx_dhcp_interface_record_find+0x6c>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007798:	fb01 f303 	mul.w	r3, r1, r3
 800779c:	441a      	add	r2, r3
 800779e:	f641 5388 	movw	r3, #7560	; 0x1d88
 80077a2:	4413      	add	r3, r2
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d01b      	beq.n	80077e2 <_nx_dhcp_interface_record_find+0x64>
            continue;

        /* Check if the interface index matches.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80077b2:	fb01 f303 	mul.w	r3, r1, r3
 80077b6:	441a      	add	r2, r3
 80077b8:	f641 53a4 	movw	r3, #7588	; 0x1da4
 80077bc:	4413      	add	r3, r2
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d10e      	bne.n	80077e4 <_nx_dhcp_interface_record_find+0x66>
        {

            /* Yes, we found the record.  */
            *interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80077cc:	fb03 f202 	mul.w	r2, r3, r2
 80077d0:	f641 5388 	movw	r3, #7560	; 0x1d88
 80077d4:	4413      	add	r3, r2
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	441a      	add	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	601a      	str	r2, [r3, #0]

            /* Return.  */
            return (NX_SUCCESS);
 80077de:	2300      	movs	r3, #0
 80077e0:	e007      	b.n	80077f2 <_nx_dhcp_interface_record_find+0x74>
            continue;
 80077e2:	bf00      	nop
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	3301      	adds	r3, #1
 80077e8:	617b      	str	r3, [r7, #20]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0cf      	beq.n	8007790 <_nx_dhcp_interface_record_find+0x12>
        }
    }

    /* No matching record found.  */
    return (NX_DHCP_INTERFACE_NOT_ENABLED);
 80077f0:	23a4      	movs	r3, #164	; 0xa4
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
	...

08007800 <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 8007806:	f04f 33ff 	mov.w	r3, #4294967295
 800780a:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800780c:	4908      	ldr	r1, [pc, #32]	; (8007830 <nx_eth_phy_init+0x30>)
 800780e:	4809      	ldr	r0, [pc, #36]	; (8007834 <nx_eth_phy_init+0x34>)
 8007810:	f7f9 fd95 	bl	800133e <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 8007814:	4807      	ldr	r0, [pc, #28]	; (8007834 <nx_eth_phy_init+0x34>)
 8007816:	f7f9 fdc4 	bl	80013a2 <LAN8742_Init>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	607b      	str	r3, [r7, #4]
    }

    return ret;
 8007824:	687b      	ldr	r3, [r7, #4]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000010 	.word	0x20000010
 8007834:	20008088 	.word	0x20008088

08007838 <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 800783e:	4804      	ldr	r0, [pc, #16]	; (8007850 <nx_eth_phy_get_link_state+0x18>)
 8007840:	f7f9 fe57 	bl	80014f2 <LAN8742_GetLinkState>
 8007844:	6078      	str	r0, [r7, #4]

    return linkstate;
 8007846:	687b      	ldr	r3, [r7, #4]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20008088 	.word	0x20008088

08007854 <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 8007858:	4802      	ldr	r0, [pc, #8]	; (8007864 <lan8742_io_init+0x10>)
 800785a:	f7fa fe65 	bl	8002528 <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20007ef0 	.word	0x20007ef0

08007868 <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	68f9      	ldr	r1, [r7, #12]
 800788a:	4807      	ldr	r0, [pc, #28]	; (80078a8 <lan8742_io_read_reg+0x30>)
 800788c:	f7fa fc9a 	bl	80021c4 <HAL_ETH_ReadPHYRegister>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8007896:	f04f 33ff 	mov.w	r3, #4294967295
 800789a:	e000      	b.n	800789e <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20007ef0 	.word	0x20007ef0

080078ac <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	68f9      	ldr	r1, [r7, #12]
 80078be:	4807      	ldr	r0, [pc, #28]	; (80078dc <lan8742_io_write_reg+0x30>)
 80078c0:	f7fa fccb 	bl	800225a <HAL_ETH_WritePHYRegister>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 80078ca:	f04f 33ff 	mov.w	r3, #4294967295
 80078ce:	e000      	b.n	80078d2 <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20007ef0 	.word	0x20007ef0

080078e0 <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80078e4:	f7f9 feae 	bl	8001644 <HAL_GetTick>
 80078e8:	4603      	mov	r3, r0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007902:	2320      	movs	r3, #32
 8007904:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007906:	f3bf 8f4f 	dsb	sy
}
 800790a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800790c:	e00b      	b.n	8007926 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800790e:	4a0d      	ldr	r2, [pc, #52]	; (8007944 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4413      	add	r3, r2
 800791c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	dcf0      	bgt.n	800790e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800792c:	f3bf 8f4f 	dsb	sy
}
 8007930:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007932:	f3bf 8f6f 	isb	sy
}
 8007936:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007938:	bf00      	nop
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	e000ed00 	.word	0xe000ed00

08007948 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800795a:	2320      	movs	r3, #32
 800795c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800795e:	f3bf 8f4f 	dsb	sy
}
 8007962:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007964:	e00b      	b.n	800797e <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8007966:	4a0d      	ldr	r2, [pc, #52]	; (800799c <SCB_CleanDCache_by_Addr+0x54>)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	4413      	add	r3, r2
 8007974:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	dcf0      	bgt.n	8007966 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007984:	f3bf 8f4f 	dsb	sy
}
 8007988:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800798a:	f3bf 8f6f 	isb	sy
}
 800798e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007990:	bf00      	nop
 8007992:	371c      	adds	r7, #28
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	e000ed00 	.word	0xe000ed00

080079a0 <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b13      	cmp	r3, #19
 80079b4:	d84e      	bhi.n	8007a54 <nx_stm32_eth_driver+0xb4>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <nx_stm32_eth_driver+0x1c>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	08007a2d 	.word	0x08007a2d
 80079c0:	08007a15 	.word	0x08007a15
 80079c4:	08007a1d 	.word	0x08007a1d
 80079c8:	08007a25 	.word	0x08007a25
 80079cc:	08007a2d 	.word	0x08007a2d
 80079d0:	08007a2d 	.word	0x08007a2d
 80079d4:	08007a2d 	.word	0x08007a2d
 80079d8:	08007a2d 	.word	0x08007a2d
 80079dc:	08007a35 	.word	0x08007a35
 80079e0:	08007a3d 	.word	0x08007a3d
 80079e4:	08007a45 	.word	0x08007a45
 80079e8:	08007a55 	.word	0x08007a55
 80079ec:	08007a55 	.word	0x08007a55
 80079f0:	08007a55 	.word	0x08007a55
 80079f4:	08007a55 	.word	0x08007a55
 80079f8:	08007a55 	.word	0x08007a55
 80079fc:	08007a55 	.word	0x08007a55
 8007a00:	08007a55 	.word	0x08007a55
 8007a04:	08007a4d 	.word	0x08007a4d
 8007a08:	08007a0d 	.word	0x08007a0d
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f82d 	bl	8007a6c <_nx_driver_interface_attach>
    break;
 8007a12:	e026      	b.n	8007a62 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f83d 	bl	8007a94 <_nx_driver_initialize>
      break;
 8007a1a:	e022      	b.n	8007a62 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f89b 	bl	8007b58 <_nx_driver_enable>
      break;
 8007a22:	e01e      	b.n	8007a62 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f91f 	bl	8007c68 <_nx_driver_disable>
      break;
 8007a2a:	e01a      	b.n	8007a62 <nx_stm32_eth_driver+0xc2>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f945 	bl	8007cbc <_nx_driver_packet_send>
      break;
 8007a32:	e016      	b.n	8007a62 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fa03 	bl	8007e40 <_nx_driver_multicast_join>
      break;
 8007a3a:	e012      	b.n	8007a62 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fa15 	bl	8007e6c <_nx_driver_multicast_leave>
      break;
 8007a42:	e00e      	b.n	8007a62 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fa27 	bl	8007e98 <_nx_driver_get_status>
      break;
 8007a4a:	e00a      	b.n	8007a62 <nx_stm32_eth_driver+0xc2>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fa39 	bl	8007ec4 <_nx_driver_deferred_processing>

      break;
 8007a52:	e006      	b.n	8007a62 <nx_stm32_eth_driver+0xc2>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2244      	movs	r2, #68	; 0x44
 8007a58:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	225a      	movs	r2, #90	; 0x5a
 8007a5e:	605a      	str	r2, [r3, #4]
  }
}
 8007a60:	bf00      	nop
 8007a62:	bf00      	nop
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop

08007a6c <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	4a05      	ldr	r2, [pc, #20]	; (8007a90 <_nx_driver_interface_attach+0x24>)
 8007a7a:	60d3      	str	r3, [r2, #12]
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	605a      	str	r2, [r3, #4]
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	200080a8 	.word	0x200080a8

08007a94 <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  NX_INTERFACE    *interface_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	613b      	str	r3, [r7, #16]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 8007aa8:	4b29      	ldr	r3, [pc, #164]	; (8007b50 <_nx_driver_initialize+0xbc>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 8007aae:	4b28      	ldr	r3, [pc, #160]	; (8007b50 <_nx_driver_initialize+0xbc>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8007aba:	4a25      	ldr	r2, [pc, #148]	; (8007b50 <_nx_driver_initialize+0xbc>)
 8007abc:	6093      	str	r3, [r2, #8]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 8007abe:	4b24      	ldr	r3, [pc, #144]	; (8007b50 <_nx_driver_initialize+0xbc>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	611a      	str	r2, [r3, #16]

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fa93 	bl	8007ff0 <_nx_driver_hardware_initialize>
 8007aca:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d136      	bne.n	8007b40 <_nx_driver_initialize+0xac>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	4a1e      	ldr	r2, [pc, #120]	; (8007b50 <_nx_driver_initialize+0xbc>)
 8007ad8:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007ae0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 8007ae2:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <_nx_driver_initialize+0xc0>)
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	4a1a      	ldr	r2, [pc, #104]	; (8007b54 <_nx_driver_initialize+0xc0>)
 8007aec:	6852      	ldr	r2, [r2, #4]
 8007aee:	3201      	adds	r2, #1
 8007af0:	7812      	ldrb	r2, [r2, #0]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8007afa:	4b16      	ldr	r3, [pc, #88]	; (8007b54 <_nx_driver_initialize+0xc0>)
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	3302      	adds	r3, #2
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	061a      	lsls	r2, r3, #24
 8007b04:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <_nx_driver_initialize+0xc0>)
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	3303      	adds	r3, #3
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	041b      	lsls	r3, r3, #16
 8007b0e:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8007b10:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <_nx_driver_initialize+0xc0>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	3304      	adds	r3, #4
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8007b1a:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8007b1c:	4a0d      	ldr	r2, [pc, #52]	; (8007b54 <_nx_driver_initialize+0xc0>)
 8007b1e:	6852      	ldr	r2, [r2, #4]
 8007b20:	3205      	adds	r2, #5
 8007b22:	7812      	ldrb	r2, [r2, #0]
 8007b24:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8007b26:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 8007b32:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <_nx_driver_initialize+0xbc>)
 8007b34:	2203      	movs	r2, #3
 8007b36:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 8007b3e:	e002      	b.n	8007b46 <_nx_driver_initialize+0xb2>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	225a      	movs	r2, #90	; 0x5a
 8007b44:	605a      	str	r2, [r3, #4]
}
 8007b46:	bf00      	nop
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	200080a8 	.word	0x200080a8
 8007b54:	20007ef0 	.word	0x20007ef0

08007b58 <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b0a0      	sub	sp, #128	; 0x80
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]

  NX_IP           *ip_ptr;
  ETH_MACConfigTypeDef MACConf;
  UINT            status, duplex, speed = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	67bb      	str	r3, [r7, #120]	; 0x78
  INT             PHYLinkState;

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	677b      	str	r3, [r7, #116]	; 0x74

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 8007b6a:	4b3d      	ldr	r3, [pc, #244]	; (8007c60 <_nx_driver_enable+0x108>)
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d803      	bhi.n	8007b7a <_nx_driver_enable+0x22>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	225a      	movs	r2, #90	; 0x5a
 8007b76:	605a      	str	r2, [r3, #4]
    return;
 8007b78:	e06e      	b.n	8007c58 <_nx_driver_enable+0x100>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 8007b7a:	4b39      	ldr	r3, [pc, #228]	; (8007c60 <_nx_driver_enable+0x108>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d903      	bls.n	8007b8a <_nx_driver_enable+0x32>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2215      	movs	r2, #21
 8007b86:	605a      	str	r2, [r3, #4]
    return;
 8007b88:	e066      	b.n	8007c58 <_nx_driver_enable+0x100>
  }

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 8007b8a:	f7ff fe39 	bl	8007800 <nx_eth_phy_init>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <_nx_driver_enable+0x44>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	225a      	movs	r2, #90	; 0x5a
 8007b98:	605a      	str	r2, [r3, #4]
    return;
 8007b9a:	e05d      	b.n	8007c58 <_nx_driver_enable+0x100>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 8007b9c:	f7ff fe4c 	bl	8007838 <nx_eth_phy_get_link_state>
 8007ba0:	6738      	str	r0, [r7, #112]	; 0x70

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8007ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	dc03      	bgt.n	8007bb0 <_nx_driver_enable+0x58>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	225a      	movs	r2, #90	; 0x5a
 8007bac:	605a      	str	r2, [r3, #4]
    return;
 8007bae:	e053      	b.n	8007c58 <_nx_driver_enable+0x100>
  }
  else
  {
    switch (PHYLinkState)
 8007bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bb2:	3b02      	subs	r3, #2
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d823      	bhi.n	8007c00 <_nx_driver_enable+0xa8>
 8007bb8:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <_nx_driver_enable+0x68>)
 8007bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbe:	bf00      	nop
 8007bc0:	08007bd1 	.word	0x08007bd1
 8007bc4:	08007bdf 	.word	0x08007bdf
 8007bc8:	08007beb 	.word	0x08007beb
 8007bcc:	08007bf7 	.word	0x08007bf7
    {
    case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007bd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8007bd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bda:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8007bdc:	e017      	b.n	8007c0e <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007bde:	2300      	movs	r3, #0
 8007be0:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8007be2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007be6:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8007be8:	e011      	b.n	8007c0e <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bee:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8007bf4:	e00b      	b.n	8007c0e <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8007bfe:	e006      	b.n	8007c0e <_nx_driver_enable+0xb6>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 8007c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c04:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8007c06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c0a:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8007c0c:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&eth_handle, &MACConf);
 8007c0e:	f107 0308 	add.w	r3, r7, #8
 8007c12:	4619      	mov	r1, r3
 8007c14:	4813      	ldr	r0, [pc, #76]	; (8007c64 <_nx_driver_enable+0x10c>)
 8007c16:	f7fa fb69 	bl	80022ec <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8007c1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c1c:	623b      	str	r3, [r7, #32]
    MACConf.Speed = speed;
 8007c1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c20:	61fb      	str	r3, [r7, #28]
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
 8007c22:	f107 0308 	add.w	r3, r7, #8
 8007c26:	4619      	mov	r1, r3
 8007c28:	480e      	ldr	r0, [pc, #56]	; (8007c64 <_nx_driver_enable+0x10c>)
 8007c2a:	f7fa fc49 	bl	80024c0 <HAL_ETH_SetMACConfig>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fa60 	bl	80080f4 <_nx_driver_hardware_enable>
 8007c34:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 8007c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <_nx_driver_enable+0xfa>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 8007c3c:	4b08      	ldr	r3, [pc, #32]	; (8007c60 <_nx_driver_enable+0x108>)
 8007c3e:	2204      	movs	r2, #4
 8007c40:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 8007c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 8007c50:	e002      	b.n	8007c58 <_nx_driver_enable+0x100>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	225a      	movs	r2, #90	; 0x5a
 8007c56:	605a      	str	r2, [r3, #4]
  }
}
 8007c58:	3780      	adds	r7, #128	; 0x80
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	200080a8 	.word	0x200080a8
 8007c64:	20007ef0 	.word	0x20007ef0

08007c68 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 8007c76:	4b10      	ldr	r3, [pc, #64]	; (8007cb8 <_nx_driver_disable+0x50>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d003      	beq.n	8007c86 <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	225a      	movs	r2, #90	; 0x5a
 8007c82:	605a      	str	r2, [r3, #4]
    return;
 8007c84:	e014      	b.n	8007cb0 <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa42 	bl	8008110 <_nx_driver_hardware_disable>
 8007c8c:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 8007c9c:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <_nx_driver_disable+0x50>)
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	605a      	str	r2, [r3, #4]
 8007ca8:	e002      	b.n	8007cb0 <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	225a      	movs	r2, #90	; 0x5a
 8007cae:	605a      	str	r2, [r3, #4]
  }
}
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	200080a8 	.word	0x200080a8

08007cbc <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 8007cca:	4b5c      	ldr	r3, [pc, #368]	; (8007e3c <_nx_driver_packet_send+0x180>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d008      	beq.n	8007ce4 <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	225a      	movs	r2, #90	; 0x5a
 8007cd6:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3310      	adds	r3, #16
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f006 faa5 	bl	800e22c <_nxe_packet_transmit_release>
    return;
 8007ce2:	e0a7      	b.n	8007e34 <_nx_driver_packet_send+0x178>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 8007cee:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007cf0:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 8007cf2:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	320e      	adds	r2, #14
 8007cfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	3b02      	subs	r3, #2
 8007d04:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689a      	ldr	r2, [r3, #8]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	3304      	adds	r3, #4
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	68d2      	ldr	r2, [r2, #12]
 8007d16:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8007d1e:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8007d26:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f8d3 272c 	ldr.w	r2, [r3, #1836]	; 0x72c
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	330c      	adds	r3, #12
 8007d3a:	0412      	lsls	r2, r2, #16
 8007d3c:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b05      	cmp	r3, #5
 8007d44:	d003      	beq.n	8007d4e <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8007d4a:	2b06      	cmp	r3, #6
 8007d4c:	d10a      	bne.n	8007d64 <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	330c      	adds	r3, #12
 8007d52:	6819      	ldr	r1, [r3, #0]
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f103 020c 	add.w	r2, r3, #12
 8007d5a:	f640 0306 	movw	r3, #2054	; 0x806
 8007d5e:	430b      	orrs	r3, r1
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	e016      	b.n	8007d92 <_nx_driver_packet_send+0xd6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b07      	cmp	r3, #7
 8007d6a:	d10a      	bne.n	8007d82 <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	330c      	adds	r3, #12
 8007d70:	6819      	ldr	r1, [r3, #0]
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f103 020c 	add.w	r2, r3, #12
 8007d78:	f248 0335 	movw	r3, #32821	; 0x8035
 8007d7c:	430b      	orrs	r3, r1
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	e007      	b.n	8007d92 <_nx_driver_packet_send+0xd6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	330c      	adds	r3, #12
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	330c      	adds	r3, #12
 8007d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d90:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	ba1a      	rev	r2, r3
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	3304      	adds	r3, #4
 8007da6:	ba12      	rev	r2, r2
 8007da8:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	3308      	adds	r3, #8
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	3308      	adds	r3, #8
 8007db4:	ba12      	rev	r2, r2
 8007db6:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	330c      	adds	r3, #12
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	ba12      	rev	r2, r2
 8007dc4:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d912      	bls.n	8007df8 <_nx_driver_packet_send+0x13c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	689a      	ldr	r2, [r3, #8]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	320e      	adds	r2, #14
 8007dda:	609a      	str	r2, [r3, #8]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	3a0e      	subs	r2, #14
 8007de4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	225a      	movs	r2, #90	; 0x5a
 8007dea:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 8007dec:	f107 0308 	add.w	r3, r7, #8
 8007df0:	4618      	mov	r0, r3
 8007df2:	f006 fa1b 	bl	800e22c <_nxe_packet_transmit_release>
    return;
 8007df6:	e01d      	b.n	8007e34 <_nx_driver_packet_send+0x178>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 f996 	bl	800812c <_nx_driver_hardware_packet_send>
 8007e00:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d012      	beq.n	8007e2e <_nx_driver_packet_send+0x172>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	320e      	adds	r2, #14
 8007e10:	609a      	str	r2, [r3, #8]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	3a0e      	subs	r2, #14
 8007e1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	225a      	movs	r2, #90	; 0x5a
 8007e20:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 8007e22:	f107 0308 	add.w	r3, r7, #8
 8007e26:	4618      	mov	r0, r3
 8007e28:	f006 fa00 	bl	800e22c <_nxe_packet_transmit_release>
 8007e2c:	e002      	b.n	8007e34 <_nx_driver_packet_send+0x178>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	605a      	str	r2, [r3, #4]
  }
}
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	200080a8 	.word	0x200080a8

08007e40 <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f9ff 	bl	800824c <_nx_driver_hardware_multicast_join>
 8007e4e:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	225a      	movs	r2, #90	; 0x5a
 8007e5a:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8007e5c:	e002      	b.n	8007e64 <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	605a      	str	r2, [r3, #4]
}
 8007e64:	bf00      	nop
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fa05 	bl	8008284 <_nx_driver_hardware_multicast_leave>
 8007e7a:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	225a      	movs	r2, #90	; 0x5a
 8007e86:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8007e88:	e002      	b.n	8007e90 <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	605a      	str	r2, [r3, #4]
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fa0f 	bl	80082c4 <_nx_driver_hardware_get_status>
 8007ea6:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	225a      	movs	r2, #90	; 0x5a
 8007eb2:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8007eb4:	e002      	b.n	8007ebc <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	605a      	str	r2, [r3, #4]
}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ed0:	613b      	str	r3, [r7, #16]
    return(posture);
 8007ed2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8007ed4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007ed6:	b672      	cpsid	i
    return(int_posture);
 8007ed8:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 8007eda:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 8007edc:	4b10      	ldr	r3, [pc, #64]	; (8007f20 <_nx_driver_deferred_processing+0x5c>)
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 8007ee2:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <_nx_driver_deferred_processing+0x5c>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	611a      	str	r2, [r3, #16]
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f383 8810 	msr	PRIMASK, r3
}
 8007ef2:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d002      	beq.n	8007f04 <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      HAL_ETH_ReleaseTxPacket(&eth_handle);
 8007efe:	4809      	ldr	r0, [pc, #36]	; (8007f24 <_nx_driver_deferred_processing+0x60>)
 8007f00:	f7fa f824 	bl	8001f4c <HAL_ETH_ReleaseTxPacket>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 8007f0e:	f000 fa0b 	bl	8008328 <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	605a      	str	r2, [r3, #4]
}
 8007f18:	bf00      	nop
 8007f1a:	3720      	adds	r7, #32
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	200080a8 	.word	0x200080a8
 8007f24:	20007ef0 	.word	0x20007ef0

08007f28 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	4a2d      	ldr	r2, [pc, #180]	; (8007fec <_nx_driver_transfer_to_netx+0xc4>)
 8007f36:	68d2      	ldr	r2, [r2, #12]
 8007f38:	631a      	str	r2, [r3, #48]	; 0x30

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	330c      	adds	r3, #12
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	021b      	lsls	r3, r3, #8
 8007f46:	b29a      	uxth	r2, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	330d      	adds	r3, #13
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 8007f52:	4313      	orrs	r3, r2
 8007f54:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 8007f56:	89fb      	ldrh	r3, [r7, #14]
 8007f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f5c:	d004      	beq.n	8007f68 <_nx_driver_transfer_to_netx+0x40>
 8007f5e:	89fb      	ldrh	r3, [r7, #14]
 8007f60:	f248 62dd 	movw	r2, #34525	; 0x86dd
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d10f      	bne.n	8007f88 <_nx_driver_transfer_to_netx+0x60>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	320e      	adds	r2, #14
 8007f70:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	3a0e      	subs	r2, #14
 8007f7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f002 fdfe 	bl	800ab82 <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 8007f86:	e02d      	b.n	8007fe4 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 8007f88:	89fb      	ldrh	r3, [r7, #14]
 8007f8a:	f640 0206 	movw	r2, #2054	; 0x806
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d10f      	bne.n	8007fb2 <_nx_driver_transfer_to_netx+0x8a>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	689a      	ldr	r2, [r3, #8]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	320e      	adds	r2, #14
 8007f9a:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	3a0e      	subs	r2, #14
 8007fa4:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fc05 	bl	80087ba <_nx_arp_packet_deferred_receive>
}
 8007fb0:	e018      	b.n	8007fe4 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 8007fb2:	89fb      	ldrh	r3, [r7, #14]
 8007fb4:	f248 0235 	movw	r2, #32821	; 0x8035
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d10f      	bne.n	8007fdc <_nx_driver_transfer_to_netx+0xb4>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	320e      	adds	r2, #14
 8007fc4:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	3a0e      	subs	r2, #14
 8007fce:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f004 faf7 	bl	800c5c8 <_nx_rarp_packet_deferred_receive>
}
 8007fda:	e003      	b.n	8007fe4 <_nx_driver_transfer_to_netx+0xbc>
    nx_packet_release(packet_ptr);
 8007fdc:	463b      	mov	r3, r7
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f006 f8ec 	bl	800e1bc <_nxe_packet_release>
}
 8007fe4:	bf00      	nop
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	200080a8 	.word	0x200080a8

08007ff0 <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08e      	sub	sp, #56	; 0x38
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 8007ffe:	4b39      	ldr	r3, [pc, #228]	; (80080e4 <_nx_driver_hardware_initialize+0xf4>)
 8008000:	2200      	movs	r2, #0
 8008002:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 8008004:	4b37      	ldr	r3, [pc, #220]	; (80080e4 <_nx_driver_hardware_initialize+0xf4>)
 8008006:	2200      	movs	r2, #0
 8008008:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 800800a:	4b36      	ldr	r3, [pc, #216]	; (80080e4 <_nx_driver_hardware_initialize+0xf4>)
 800800c:	2200      	movs	r2, #0
 800800e:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 8008010:	4b34      	ldr	r3, [pc, #208]	; (80080e4 <_nx_driver_hardware_initialize+0xf4>)
 8008012:	2200      	movs	r2, #0
 8008014:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 8008016:	4b33      	ldr	r3, [pc, #204]	; (80080e4 <_nx_driver_hardware_initialize+0xf4>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <_nx_driver_hardware_initialize+0x32>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 800801e:	235a      	movs	r3, #90	; 0x5a
 8008020:	e05b      	b.n	80080da <_nx_driver_hardware_initialize+0xea>
#ifdef NX_DRIVER_ETH_HW_IP_INIT
  nx_eth_init();
#endif /* NX_DRIVER_ETH_HW_IP_INIT */

  ETH_DMAConfigTypeDef dmaDefaultConf;
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008022:	2300      	movs	r3, #0
 8008024:	60fb      	str	r3, [r7, #12]
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008026:	2301      	movs	r3, #1
 8008028:	743b      	strb	r3, [r7, #16]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800802a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800802e:	617b      	str	r3, [r7, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008034:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008036:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800803c:	2300      	movs	r3, #0
 800803e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  dmaDefaultConf.SecondPacketOperate = ENABLE;
  dmaDefaultConf.TCPSegmentation = DISABLE;
  dmaDefaultConf.MaximumSegmentSize = 536;
#endif
#ifdef STM32_ETH_HAL_LEGACY
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8008042:	2301      	movs	r3, #1
 8008044:	763b      	strb	r3, [r7, #24]
  dmaDefaultConf.ReceiveStoreForward =  DISABLE;
 8008046:	2300      	movs	r3, #0
 8008048:	767b      	strb	r3, [r7, #25]
  dmaDefaultConf.TransmitStoreForward =  ENABLE;
 800804a:	2301      	movs	r3, #1
 800804c:	76bb      	strb	r3, [r7, #26]
  dmaDefaultConf.TransmitThresholdControl =  ENABLE;
 800804e:	2301      	movs	r3, #1
 8008050:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.ForwardErrorFrames =  DISABLE;
 8008052:	2300      	movs	r3, #0
 8008054:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  dmaDefaultConf.ReceiveThresholdControl =  DISABLE;
 8008058:	2300      	movs	r3, #0
 800805a:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.SecondFrameOperate =  DISABLE;
 800805c:	2300      	movs	r3, #0
 800805e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  dmaDefaultConf.EnhancedDescriptorFormat =  DISABLE;
 8008062:	2300      	movs	r3, #0
 8008064:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  dmaDefaultConf.DescriptorSkipLength =  DISABLE;
 8008068:	2300      	movs	r3, #0
 800806a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
  /* enable OSF bit to enhance throughput */
  HAL_ETH_SetDMAConfig(&eth_handle, &dmaDefaultConf);
 800806c:	f107 030c 	add.w	r3, r7, #12
 8008070:	4619      	mov	r1, r3
 8008072:	481d      	ldr	r0, [pc, #116]	; (80080e8 <_nx_driver_hardware_initialize+0xf8>)
 8008074:	f7fa fa3e 	bl	80024f4 <HAL_ETH_SetDMAConfig>

  FilterConfig.PromiscuousMode = DISABLE;
 8008078:	4b1c      	ldr	r3, [pc, #112]	; (80080ec <_nx_driver_hardware_initialize+0xfc>)
 800807a:	2200      	movs	r2, #0
 800807c:	701a      	strb	r2, [r3, #0]
  FilterConfig.HashUnicast = DISABLE;
 800807e:	4b1b      	ldr	r3, [pc, #108]	; (80080ec <_nx_driver_hardware_initialize+0xfc>)
 8008080:	2200      	movs	r2, #0
 8008082:	70da      	strb	r2, [r3, #3]
  FilterConfig.HashMulticast = DISABLE;
 8008084:	4b19      	ldr	r3, [pc, #100]	; (80080ec <_nx_driver_hardware_initialize+0xfc>)
 8008086:	2200      	movs	r2, #0
 8008088:	711a      	strb	r2, [r3, #4]
  FilterConfig.DestAddrInverseFiltering = DISABLE;
 800808a:	4b18      	ldr	r3, [pc, #96]	; (80080ec <_nx_driver_hardware_initialize+0xfc>)
 800808c:	2200      	movs	r2, #0
 800808e:	721a      	strb	r2, [r3, #8]
  FilterConfig.PassAllMulticast = DISABLE;
 8008090:	4b16      	ldr	r3, [pc, #88]	; (80080ec <_nx_driver_hardware_initialize+0xfc>)
 8008092:	2200      	movs	r2, #0
 8008094:	715a      	strb	r2, [r3, #5]
  FilterConfig.BroadcastFilter = ENABLE;
 8008096:	4b15      	ldr	r3, [pc, #84]	; (80080ec <_nx_driver_hardware_initialize+0xfc>)
 8008098:	2201      	movs	r2, #1
 800809a:	725a      	strb	r2, [r3, #9]
  FilterConfig.SrcAddrInverseFiltering = DISABLE;
 800809c:	4b13      	ldr	r3, [pc, #76]	; (80080ec <_nx_driver_hardware_initialize+0xfc>)
 800809e:	2200      	movs	r2, #0
 80080a0:	71da      	strb	r2, [r3, #7]
  FilterConfig.SrcAddrFiltering = DISABLE;
 80080a2:	4b12      	ldr	r3, [pc, #72]	; (80080ec <_nx_driver_hardware_initialize+0xfc>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	719a      	strb	r2, [r3, #6]
  FilterConfig.HachOrPerfectFilter = DISABLE;
 80080a8:	4b10      	ldr	r3, [pc, #64]	; (80080ec <_nx_driver_hardware_initialize+0xfc>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	709a      	strb	r2, [r3, #2]
  FilterConfig.ReceiveAllMode = DISABLE;
 80080ae:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <_nx_driver_hardware_initialize+0xfc>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	705a      	strb	r2, [r3, #1]
  FilterConfig.ControlPacketsFilter = 0x00;
 80080b4:	4b0d      	ldr	r3, [pc, #52]	; (80080ec <_nx_driver_hardware_initialize+0xfc>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	60da      	str	r2, [r3, #12]

  /* Set Tx packet config common parameters */
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
 80080ba:	2238      	movs	r2, #56	; 0x38
 80080bc:	2100      	movs	r1, #0
 80080be:	480c      	ldr	r0, [pc, #48]	; (80080f0 <_nx_driver_hardware_initialize+0x100>)
 80080c0:	f00a feee 	bl	8012ea0 <memset>
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
 80080c4:	4b0a      	ldr	r3, [pc, #40]	; (80080f0 <_nx_driver_hardware_initialize+0x100>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	601a      	str	r2, [r3, #0]
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
 80080ca:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <_nx_driver_hardware_initialize+0x100>)
 80080cc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80080d0:	611a      	str	r2, [r3, #16]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 80080d2:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <_nx_driver_hardware_initialize+0xf4>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Return success!  */
  return(NX_SUCCESS);
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3738      	adds	r7, #56	; 0x38
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	200080a8 	.word	0x200080a8
 80080e8:	20007ef0 	.word	0x20007ef0
 80080ec:	2000812c 	.word	0x2000812c
 80080f0:	200080f4 	.word	0x200080f4

080080f4 <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]

  /* Call STM32 library to start Ethernet operation.  */
  HAL_ETH_Start_IT(&eth_handle);
 80080fc:	4803      	ldr	r0, [pc, #12]	; (800810c <_nx_driver_hardware_enable+0x18>)
 80080fe:	f7f9 fcab 	bl	8001a58 <HAL_ETH_Start_IT>

  /* Return success!  */
  return(NX_SUCCESS);
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20007ef0 	.word	0x20007ef0

08008110 <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 8008118:	4803      	ldr	r0, [pc, #12]	; (8008128 <_nx_driver_hardware_disable+0x18>)
 800811a:	f7f9 fd2b 	bl	8001b74 <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20007ef0 	.word	0x20007ef0

0800812c <_nx_driver_hardware_packet_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/

static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b092      	sub	sp, #72	; 0x48
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]

  NX_PACKET       *pktIdx;
  UINT            buffLen = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	643b      	str	r3, [r7, #64]	; 0x40

  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008138:	f107 030c 	add.w	r3, r7, #12
 800813c:	2230      	movs	r2, #48	; 0x30
 800813e:	2100      	movs	r1, #0
 8008140:	4618      	mov	r0, r3
 8008142:	f00a fead 	bl	8012ea0 <memset>


  int i = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	63fb      	str	r3, [r7, #60]	; 0x3c

  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	647b      	str	r3, [r7, #68]	; 0x44
 800814e:	e05a      	b.n	8008206 <_nx_driver_hardware_packet_send+0xda>
  {
    if (i >= ETH_TX_DESC_CNT)
 8008150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008152:	2b03      	cmp	r3, #3
 8008154:	d901      	bls.n	800815a <_nx_driver_hardware_packet_send+0x2e>
    {
      return NX_DRIVER_ERROR;
 8008156:	235a      	movs	r3, #90	; 0x5a
 8008158:	e06f      	b.n	800823a <_nx_driver_hardware_packet_send+0x10e>
    }

    Txbuffer[i].buffer = pktIdx->nx_packet_prepend_ptr;
 800815a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800815c:	6899      	ldr	r1, [r3, #8]
 800815e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008160:	4613      	mov	r3, r2
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	3348      	adds	r3, #72	; 0x48
 800816a:	443b      	add	r3, r7
 800816c:	3b3c      	subs	r3, #60	; 0x3c
 800816e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 8008170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	4619      	mov	r1, r3
 800817c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800817e:	4613      	mov	r3, r2
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	4413      	add	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	3348      	adds	r3, #72	; 0x48
 8008188:	443b      	add	r3, r7
 800818a:	3b38      	subs	r3, #56	; 0x38
 800818c:	6019      	str	r1, [r3, #0]
    buffLen += (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 800818e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	461a      	mov	r2, r3
 800819a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800819c:	4413      	add	r3, r2
 800819e:	643b      	str	r3, [r7, #64]	; 0x40

    if(i>0)
 80081a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	dd11      	ble.n	80081ca <_nx_driver_hardware_packet_send+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80081a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a8:	1e5a      	subs	r2, r3, #1
 80081aa:	f107 000c 	add.w	r0, r7, #12
 80081ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081b0:	460b      	mov	r3, r1
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	440b      	add	r3, r1
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	18c1      	adds	r1, r0, r3
 80081ba:	4613      	mov	r3, r2
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	3348      	adds	r3, #72	; 0x48
 80081c4:	443b      	add	r3, r7
 80081c6:	3b34      	subs	r3, #52	; 0x34
 80081c8:	6019      	str	r1, [r3, #0]
    }

    if (pktIdx-> nx_packet_next ==NULL)
 80081ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d109      	bne.n	80081e6 <_nx_driver_hardware_packet_send+0xba>
    {
      Txbuffer[i].next = NULL;
 80081d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081d4:	4613      	mov	r3, r2
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	4413      	add	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	3348      	adds	r3, #72	; 0x48
 80081de:	443b      	add	r3, r7
 80081e0:	3b34      	subs	r3, #52	; 0x34
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80081e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e8:	3301      	adds	r3, #1
 80081ea:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_CleanDCache_by_Addr((uint32_t*)(pktIdx -> nx_packet_data_start), pktIdx -> nx_packet_data_end - pktIdx -> nx_packet_data_start);
 80081ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ee:	6918      	ldr	r0, [r3, #16]
 80081f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f2:	695a      	ldr	r2, [r3, #20]
 80081f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	4619      	mov	r1, r3
 80081fc:	f7ff fba4 	bl	8007948 <SCB_CleanDCache_by_Addr>
  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8008200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	647b      	str	r3, [r7, #68]	; 0x44
 8008206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1a1      	bne.n	8008150 <_nx_driver_hardware_packet_send+0x24>
  else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_INSERT;
  }
#else
  TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
 800820c:	4b0d      	ldr	r3, [pc, #52]	; (8008244 <_nx_driver_hardware_packet_send+0x118>)
 800820e:	2200      	movs	r2, #0
 8008210:	615a      	str	r2, [r3, #20]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  TxPacketCfg.Length = buffLen;
 8008212:	4a0c      	ldr	r2, [pc, #48]	; (8008244 <_nx_driver_hardware_packet_send+0x118>)
 8008214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008216:	6053      	str	r3, [r2, #4]
  TxPacketCfg.TxBuffer = Txbuffer;
 8008218:	4a0a      	ldr	r2, [pc, #40]	; (8008244 <_nx_driver_hardware_packet_send+0x118>)
 800821a:	f107 030c 	add.w	r3, r7, #12
 800821e:	6093      	str	r3, [r2, #8]
  TxPacketCfg.pData = (uint32_t *)packet_ptr;
 8008220:	4a08      	ldr	r2, [pc, #32]	; (8008244 <_nx_driver_hardware_packet_send+0x118>)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6353      	str	r3, [r2, #52]	; 0x34

  if(HAL_ETH_Transmit_IT(&eth_handle, &TxPacketCfg))
 8008226:	4907      	ldr	r1, [pc, #28]	; (8008244 <_nx_driver_hardware_packet_send+0x118>)
 8008228:	4807      	ldr	r0, [pc, #28]	; (8008248 <_nx_driver_hardware_packet_send+0x11c>)
 800822a:	f7f9 fcfc 	bl	8001c26 <HAL_ETH_Transmit_IT>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <_nx_driver_hardware_packet_send+0x10c>
  {
    return(NX_DRIVER_ERROR);
 8008234:	235a      	movs	r3, #90	; 0x5a
 8008236:	e000      	b.n	800823a <_nx_driver_hardware_packet_send+0x10e>
  }

  return(NX_SUCCESS);
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3748      	adds	r7, #72	; 0x48
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	200080f4 	.word	0x200080f4
 8008248:	20007ef0 	.word	0x20007ef0

0800824c <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 8008254:	4b08      	ldr	r3, [pc, #32]	; (8008278 <_nx_driver_hardware_multicast_join+0x2c>)
 8008256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008258:	3301      	adds	r3, #1
 800825a:	4a07      	ldr	r2, [pc, #28]	; (8008278 <_nx_driver_hardware_multicast_join+0x2c>)
 800825c:	6493      	str	r3, [r2, #72]	; 0x48

  /* Enable multicast frame reception.  */
  FilterConfig.PassAllMulticast = ENABLE;
 800825e:	4b07      	ldr	r3, [pc, #28]	; (800827c <_nx_driver_hardware_multicast_join+0x30>)
 8008260:	2201      	movs	r2, #1
 8008262:	715a      	strb	r2, [r3, #5]
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8008264:	4905      	ldr	r1, [pc, #20]	; (800827c <_nx_driver_hardware_multicast_join+0x30>)
 8008266:	4806      	ldr	r0, [pc, #24]	; (8008280 <_nx_driver_hardware_multicast_join+0x34>)
 8008268:	f7fa f9b4 	bl	80025d4 <HAL_ETH_SetMACFilterConfig>

  /* Return success.  */
  return(NX_SUCCESS);
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	200080a8 	.word	0x200080a8
 800827c:	2000812c 	.word	0x2000812c
 8008280:	20007ef0 	.word	0x20007ef0

08008284 <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 800828c:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <_nx_driver_hardware_multicast_leave+0x34>)
 800828e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008290:	3b01      	subs	r3, #1
 8008292:	4a09      	ldr	r2, [pc, #36]	; (80082b8 <_nx_driver_hardware_multicast_leave+0x34>)
 8008294:	6493      	str	r3, [r2, #72]	; 0x48

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 8008296:	4b08      	ldr	r3, [pc, #32]	; (80082b8 <_nx_driver_hardware_multicast_leave+0x34>)
 8008298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <_nx_driver_hardware_multicast_leave+0x28>
  {

    /* Disable multicast frame reception.  */
    FilterConfig.PassAllMulticast = DISABLE;
 800829e:	4b07      	ldr	r3, [pc, #28]	; (80082bc <_nx_driver_hardware_multicast_leave+0x38>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	715a      	strb	r2, [r3, #5]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 80082a4:	4905      	ldr	r1, [pc, #20]	; (80082bc <_nx_driver_hardware_multicast_leave+0x38>)
 80082a6:	4806      	ldr	r0, [pc, #24]	; (80082c0 <_nx_driver_hardware_multicast_leave+0x3c>)
 80082a8:	f7fa f994 	bl	80025d4 <HAL_ETH_SetMACFilterConfig>
  }

  /* Return success.  */
  return(NX_SUCCESS);
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	200080a8 	.word	0x200080a8
 80082bc:	2000812c 	.word	0x2000812c
 80082c0:	20007ef0 	.word	0x20007ef0

080082c4 <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  INT PHYLinkState;

  /* Get link status. */
  PHYLinkState = nx_eth_phy_get_link_state();
 80082cc:	f7ff fab4 	bl	8007838 <nx_eth_phy_get_link_state>
 80082d0:	60f8      	str	r0, [r7, #12]

  /* Check link status. */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	dc04      	bgt.n	80082e2 <_nx_driver_hardware_get_status+0x1e>
  {
    /* Update Link status if phsical link is down. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_FALSE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	695b      	ldr	r3, [r3, #20]
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	e003      	b.n	80082ea <_nx_driver_hardware_get_status+0x26>
  }
  else
  {
    /* Update Link status if phsical link is up. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_TRUE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	2201      	movs	r2, #1
 80082e8:	601a      	str	r2, [r3, #0]
  }

  /* Return success. */
  return NX_SUCCESS;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  NX_PACKET * release_packet = (NX_PACKET *) buff;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Remove the Ethernet header and release the packet.  */
  NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	320e      	adds	r2, #14
 8008308:	609a      	str	r2, [r3, #8]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3a0e      	subs	r2, #14
 8008312:	625a      	str	r2, [r3, #36]	; 0x24

  /* Release the packet.  */
  nx_packet_transmit_release(release_packet);
 8008314:	f107 030c 	add.w	r3, r7, #12
 8008318:	4618      	mov	r0, r3
 800831a:	f005 ff87 	bl	800e22c <_nxe_packet_transmit_release>
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <_nx_driver_hardware_packet_received>:

static VOID  _nx_driver_hardware_packet_received(VOID)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
  NX_PACKET  *received_packet_ptr;

  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 800832e:	e006      	b.n	800833e <_nx_driver_hardware_packet_received+0x16>
  {
      /* Transfer the packet to NetX.  */
      _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 8008330:	4b09      	ldr	r3, [pc, #36]	; (8008358 <_nx_driver_hardware_packet_received+0x30>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	4611      	mov	r1, r2
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff fdf5 	bl	8007f28 <_nx_driver_transfer_to_netx>
  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 800833e:	1d3b      	adds	r3, r7, #4
 8008340:	4619      	mov	r1, r3
 8008342:	4806      	ldr	r0, [pc, #24]	; (800835c <_nx_driver_hardware_packet_received+0x34>)
 8008344:	f7f9 fccb 	bl	8001cde <HAL_ETH_ReadData>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0f0      	beq.n	8008330 <_nx_driver_hardware_packet_received+0x8>
  }
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	200080a8 	.word	0x200080a8
 800835c:	20007ef0 	.word	0x20007ef0

08008360 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t ** buff)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  NX_PACKET     *packet_ptr;
  if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 8008368:	4b12      	ldr	r3, [pc, #72]	; (80083b4 <HAL_ETH_RxAllocateCallback+0x54>)
 800836a:	6898      	ldr	r0, [r3, #8]
 800836c:	f107 010c 	add.w	r1, r7, #12
 8008370:	2300      	movs	r3, #0
 8008372:	2200      	movs	r2, #0
 8008374:	f005 fdf6 	bl	800df64 <_nxe_packet_allocate>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d113      	bne.n	80083a6 <HAL_ETH_RxAllocateCallback+0x46>
                         NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
  {
    /* Adjust the packet.  */
    packet_ptr -> nx_packet_prepend_ptr += 2;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3202      	adds	r2, #2
 8008386:	609a      	str	r2, [r3, #8]
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_InvalidateDCache_by_Addr((uint32_t*)packet_ptr -> nx_packet_data_start, packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6918      	ldr	r0, [r3, #16]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	695a      	ldr	r2, [r3, #20]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	4619      	mov	r1, r3
 8008398:	f7ff faaa 	bl	80078f0 <SCB_InvalidateDCache_by_Addr>
#endif
    *buff = packet_ptr -> nx_packet_prepend_ptr;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Rx Buffer Pool is exhausted. */
    *buff = NULL;
  }
}
 80083a4:	e002      	b.n	80083ac <HAL_ETH_RxAllocateCallback+0x4c>
    *buff = NULL;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
}
 80083ac:	bf00      	nop
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	200080a8 	.word	0x200080a8

080083b8 <HAL_ETH_RxLinkCallback>:
/*    HAL_ETH_ReadData              Read a received packet                */
/*                                                                        */
/**************************************************************************/

void HAL_ETH_RxLinkCallback(void **first_packet_ptr, void **last_packet_ptr, uint8_t *buff, uint16_t Length)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b089      	sub	sp, #36	; 0x24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	807b      	strh	r3, [r7, #2]
  NX_PACKET **first_nx_packet_ptr = (NX_PACKET **)first_packet_ptr;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	61fb      	str	r3, [r7, #28]
  NX_PACKET **last_nx_packet_ptr = (NX_PACKET **)last_packet_ptr;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	61bb      	str	r3, [r7, #24]
  NX_PACKET  *received_packet_ptr;

  /* Indicate the offset of the received data.  */
  uint8_t *data_buffer_ptr = buff - 2U - sizeof(NX_PACKET);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	3b3a      	subs	r3, #58	; 0x3a
 80083d2:	617b      	str	r3, [r7, #20]

  received_packet_ptr = (NX_PACKET *)data_buffer_ptr;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	613b      	str	r3, [r7, #16]
  received_packet_ptr->nx_packet_append_ptr = received_packet_ptr->nx_packet_prepend_ptr + Length;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	887b      	ldrh	r3, [r7, #2]
 80083de:	441a      	add	r2, r3
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	60da      	str	r2, [r3, #12]
  received_packet_ptr->nx_packet_length = Length;
 80083e4:	887a      	ldrh	r2, [r7, #2]
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check whether this is the first packet. */
  if (*first_nx_packet_ptr == NULL)
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* Add the first buffer of the packet. */
    *first_nx_packet_ptr = received_packet_ptr;
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	e003      	b.n	8008402 <HAL_ETH_RxLinkCallback+0x4a>
  }
  /* This is not the first packet. */
  else
  {
    /* Add the rest of the buffer to the end of the packet. */
    (*last_nx_packet_ptr)->nx_packet_next = received_packet_ptr;
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	605a      	str	r2, [r3, #4]
  }
  /* Save the current packet in order to use it in the next iteration. */
  *last_nx_packet_ptr  = received_packet_ptr;
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	601a      	str	r2, [r3, #0]
}
 8008408:	bf00      	nop
 800840a:	3724      	adds	r7, #36	; 0x24
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_ETH_RxCpltCallback>:
}
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <HAL_ETH_RxCpltCallback+0x34>)
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 8008422:	4b09      	ldr	r3, [pc, #36]	; (8008448 <HAL_ETH_RxCpltCallback+0x34>)
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f043 0301 	orr.w	r3, r3, #1
 800842a:	4a07      	ldr	r2, [pc, #28]	; (8008448 <HAL_ETH_RxCpltCallback+0x34>)
 800842c:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8008434:	4b04      	ldr	r3, [pc, #16]	; (8008448 <HAL_ETH_RxCpltCallback+0x34>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4618      	mov	r0, r3
 800843a:	f001 fdab 	bl	8009f94 <_nx_ip_driver_deferred_processing>
  }
}
 800843e:	bf00      	nop
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	200080a8 	.word	0x200080a8

0800844c <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8008454:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <HAL_ETH_TxCpltCallback+0x34>)
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 800845a:	4b09      	ldr	r3, [pc, #36]	; (8008480 <HAL_ETH_TxCpltCallback+0x34>)
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	f043 0304 	orr.w	r3, r3, #4
 8008462:	4a07      	ldr	r2, [pc, #28]	; (8008480 <HAL_ETH_TxCpltCallback+0x34>)
 8008464:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d104      	bne.n	8008476 <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 800846c:	4b04      	ldr	r3, [pc, #16]	; (8008480 <HAL_ETH_TxCpltCallback+0x34>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4618      	mov	r0, r3
 8008472:	f001 fd8f 	bl	8009f94 <_nx_ip_driver_deferred_processing>
  }
}
 8008476:	bf00      	nop
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	200080a8 	.word	0x200080a8

08008484 <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d050      	beq.n	8008538 <_nx_arp_dynamic_entry_delete+0xb4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008496:	f3ef 8310 	mrs	r3, PRIMASK
 800849a:	613b      	str	r3, [r7, #16]
    return(posture);
 800849c:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800849e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80084a0:	b672      	cpsid	i
    return(int_posture);
 80084a2:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 80084a4:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d104      	bne.n	80084ba <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	e014      	b.n	80084e4 <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d104      	bne.n	80084d0 <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	6952      	ldr	r2, [r2, #20]
 80084ce:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	6992      	ldr	r2, [r2, #24]
 80084d8:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	6952      	ldr	r2, [r2, #20]
 80084e2:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	2200      	movs	r2, #0
 80084e8:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80084f0:	1e5a      	subs	r2, r3, #1
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fc:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2200      	movs	r2, #0
 8008502:	631a      	str	r2, [r3, #48]	; 0x30
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f383 8810 	msr	PRIMASK, r3
}
 800850e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 8008510:	e00f      	b.n	8008532 <_nx_arp_dynamic_entry_delete+0xae>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	2200      	movs	r2, #0
 8008520:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 800852c:	6978      	ldr	r0, [r7, #20]
 800852e:	f004 f805 	bl	800c53c <_nx_packet_transmit_release>
        while (next_packet_ptr)
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1ec      	bne.n	8008512 <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	2100      	movs	r1, #0
 8008554:	68b8      	ldr	r0, [r7, #8]
 8008556:	f00a fca3 	bl	8012ea0 <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a2d      	ldr	r2, [pc, #180]	; (8008618 <_nx_arp_enable+0xd4>)
 8008562:	fba2 2303 	umull	r2, r3, r2, r3
 8008566:	091b      	lsrs	r3, r3, #4
 8008568:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 800856a:	2300      	movs	r3, #0
 800856c:	61fb      	str	r3, [r7, #28]
 800856e:	e00a      	b.n	8008586 <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	3334      	adds	r3, #52	; 0x34
 800857e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	3301      	adds	r3, #1
 8008584:	61fb      	str	r3, [r7, #28]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	3b01      	subs	r3, #1
 800858a:	69fa      	ldr	r2, [r7, #28]
 800858c:	429a      	cmp	r2, r3
 800858e:	d3ef      	bcc.n	8008570 <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8008596:	2300      	movs	r3, #0
 8008598:	61fb      	str	r3, [r7, #28]
 800859a:	e00a      	b.n	80085b2 <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	f1a3 0234 	sub.w	r2, r3, #52	; 0x34
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	3b34      	subs	r3, #52	; 0x34
 80085aa:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	3301      	adds	r3, #1
 80085b0:	61fb      	str	r3, [r7, #28]
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d3ef      	bcc.n	800859c <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2234      	movs	r2, #52	; 0x34
 80085c0:	fb02 f303 	mul.w	r3, r2, r3
 80085c4:	3b34      	subs	r3, #52	; 0x34
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	441a      	add	r2, r3
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4a0a      	ldr	r2, [pc, #40]	; (800861c <_nx_arp_enable+0xd8>)
 80085f2:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	4a09      	ldr	r2, [pc, #36]	; (8008620 <_nx_arp_enable+0xdc>)
 80085fa:	f8c3 26e8 	str.w	r2, [r3, #1768]	; 0x6e8

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	4a08      	ldr	r2, [pc, #32]	; (8008624 <_nx_arp_enable+0xe0>)
 8008602:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4a07      	ldr	r2, [pc, #28]	; (8008628 <_nx_arp_enable+0xe4>)
 800860a:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800860e:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8008610:	4618      	mov	r0, r3
 8008612:	3720      	adds	r7, #32
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	4ec4ec4f 	.word	0x4ec4ec4f
 800861c:	08008e05 	.word	0x08008e05
 8008620:	08008fff 	.word	0x08008fff
 8008624:	08008cc1 	.word	0x08008cc1
 8008628:	0800862d 	.word	0x0800862d

0800862c <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08a      	sub	sp, #40	; 0x28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 80b4 	beq.w	80087ac <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 800864e:	6a39      	ldr	r1, [r7, #32]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f7ff ff17 	bl	8008484 <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008656:	f3ef 8310 	mrs	r3, PRIMASK
 800865a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800865c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800865e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008660:	b672      	cpsid	i
    return(int_posture);
 8008662:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 8008664:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d014      	beq.n	8008698 <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	699a      	ldr	r2, [r3, #24]
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	6a3a      	ldr	r2, [r7, #32]
 800868c:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6a3a      	ldr	r2, [r7, #32]
 8008694:	619a      	str	r2, [r3, #24]
 8008696:	e00b      	b.n	80086b0 <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	6a3a      	ldr	r2, [r7, #32]
 80086a2:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	6a3a      	ldr	r2, [r7, #32]
 80086a8:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	6a3a      	ldr	r2, [r7, #32]
 80086ae:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d141      	bne.n	800873a <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	6a3a      	ldr	r2, [r7, #32]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d104      	bne.n	80086ca <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
 80086c8:	e009      	b.n	80086de <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	6a3a      	ldr	r2, [r7, #32]
 80086d0:	6912      	ldr	r2, [r2, #16]
 80086d2:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	6a3a      	ldr	r2, [r7, #32]
 80086da:	68d2      	ldr	r2, [r2, #12]
 80086dc:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10a      	bne.n	80086fe <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	6a3a      	ldr	r2, [r7, #32]
 80086ec:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	6a3a      	ldr	r2, [r7, #32]
 80086f2:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6a3a      	ldr	r2, [r7, #32]
 80086f8:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
 80086fc:	e015      	b.n	800872a <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8d3 26cc 	ldr.w	r2, [r3, #1740]	; 0x6cc
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	6a3a      	ldr	r2, [r7, #32]
 800871e:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 8008726:	6a3a      	ldr	r2, [r7, #32]
 8008728:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008730:	1c5a      	adds	r2, r3, #1
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008738:	e02c      	b.n	8008794 <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8008740:	6a3a      	ldr	r2, [r7, #32]
 8008742:	429a      	cmp	r2, r3
 8008744:	d01f      	beq.n	8008786 <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	6a3a      	ldr	r2, [r7, #32]
 800874c:	6912      	ldr	r2, [r2, #16]
 800874e:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	6a3a      	ldr	r2, [r7, #32]
 8008756:	68d2      	ldr	r2, [r2, #12]
 8008758:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	691a      	ldr	r2, [r3, #16]
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	6a3a      	ldr	r2, [r7, #32]
 8008774:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	6a3a      	ldr	r2, [r7, #32]
 800877c:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a3a      	ldr	r2, [r7, #32]
 8008782:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f383 8810 	msr	PRIMASK, r3
}
 80087a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 80087a6:	2300      	movs	r3, #0
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
 80087aa:	e001      	b.n	80087b0 <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 80087ac:	2317      	movs	r3, #23
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return status to the caller.  */
    return(status);
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3728      	adds	r7, #40	; 0x28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b088      	sub	sp, #32
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80087c4:	f3ef 8310 	mrs	r3, PRIMASK
 80087c8:	61bb      	str	r3, [r7, #24]
    return(posture);
 80087ca:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80087cc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80087ce:	b672      	cpsid	i
    return(int_posture);
 80087d0:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80087d2:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d110      	bne.n	8008800 <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	f383 8810 	msr	PRIMASK, r3
}
 80087f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 80087f8:	6838      	ldr	r0, [r7, #0]
 80087fa:	f003 fde9 	bl	800c3d0 <_nx_packet_release>

        /* Return to caller.  */
        return;
 80087fe:	e02f      	b.n	8008860 <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8008806:	2b00      	cmp	r3, #0
 8008808:	d011      	beq.n	800882e <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2200      	movs	r2, #0
 8008818:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f383 8810 	msr	PRIMASK, r3
}
 800882c:	e018      	b.n	8008860 <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2200      	movs	r2, #0
 8008842:	61da      	str	r2, [r3, #28]
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f383 8810 	msr	PRIMASK, r3
}
 800884e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008856:	2200      	movs	r2, #0
 8008858:	2110      	movs	r1, #16
 800885a:	4618      	mov	r0, r3
 800885c:	f006 fbc6 	bl	800efec <_tx_event_flags_set>
    }
}
 8008860:	3720      	adds	r7, #32
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <_nx_arp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008868:	b590      	push	{r4, r7, lr}
 800886a:	b097      	sub	sp, #92	; 0x5c
 800886c:	af02      	add	r7, sp, #8
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 8008872:	2300      	movs	r3, #0
 8008874:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	2b1b      	cmp	r3, #27
 800887e:	d80a      	bhi.n	8008896 <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 800888e:	6838      	ldr	r0, [r7, #0]
 8008890:	f003 fd9e 	bl	800c3d0 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008894:	e20f      	b.n	8008cb6 <_nx_arp_packet_receive+0x44e>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800889c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889e:	3304      	adds	r3, #4
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a4:	3304      	adds	r3, #4
 80088a6:	ba12      	rev	r2, r2
 80088a8:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 80088aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ac:	3308      	adds	r3, #8
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088b2:	3308      	adds	r3, #8
 80088b4:	ba12      	rev	r2, r2
 80088b6:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 80088b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ba:	330c      	adds	r3, #12
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088c0:	330c      	adds	r3, #12
 80088c2:	ba12      	rev	r2, r2
 80088c4:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 80088c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088c8:	3310      	adds	r3, #16
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ce:	3310      	adds	r3, #16
 80088d0:	ba12      	rev	r2, r2
 80088d2:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80088d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d6:	3314      	adds	r3, #20
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088dc:	3314      	adds	r3, #20
 80088de:	ba12      	rev	r2, r2
 80088e0:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80088e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e4:	3318      	adds	r3, #24
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ea:	3318      	adds	r3, #24
 80088ec:	ba12      	rev	r2, r2
 80088ee:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 80088f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f2:	3304      	adds	r3, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 80088fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d00d      	beq.n	800891c <_nx_arp_packet_receive+0xb4>
 8008900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008902:	2b02      	cmp	r3, #2
 8008904:	d00a      	beq.n	800891c <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8008914:	6838      	ldr	r0, [r7, #0]
 8008916:	f003 fd5b 	bl	800c3d0 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800891a:	e1cc      	b.n	8008cb6 <_nx_arp_packet_receive+0x44e>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 800891c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800891e:	3308      	adds	r3, #8
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	0c1b      	lsrs	r3, r3, #16
 8008924:	63bb      	str	r3, [r7, #56]	; 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 8008926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008928:	3308      	adds	r3, #8
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	041a      	lsls	r2, r3, #16
 800892e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008930:	330c      	adds	r3, #12
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	0c1b      	lsrs	r3, r3, #16
 8008936:	4313      	orrs	r3, r2
 8008938:	637b      	str	r3, [r7, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 800893a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800893c:	330c      	adds	r3, #12
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	041a      	lsls	r2, r3, #16
 8008942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008944:	3310      	adds	r3, #16
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	0c1b      	lsrs	r3, r3, #16
 800894a:	4313      	orrs	r3, r2
 800894c:	633b      	str	r3, [r7, #48]	; 0x30
    target_ip_address =    *(message_ptr + 6);
 800894e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008958:	2b00      	cmp	r3, #0
 800895a:	d104      	bne.n	8008966 <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f203 721c 	addw	r2, r3, #1820	; 0x71c
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d12e      	bne.n	80089d2 <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8008978:	2b00      	cmp	r3, #0
 800897a:	d02a      	beq.n	80089d2 <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 800897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8008980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008982:	429a      	cmp	r2, r3
 8008984:	d007      	beq.n	8008996 <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	2b00      	cmp	r3, #0
 800898a:	d122      	bne.n	80089d2 <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008992:	429a      	cmp	r2, r3
 8008994:	d11d      	bne.n	80089d2 <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800899c:	429a      	cmp	r2, r3
 800899e:	d104      	bne.n	80089aa <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 80089a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d00f      	beq.n	80089ca <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00b      	beq.n	80089ca <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80089b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b8:	79db      	ldrb	r3, [r3, #7]
 80089ba:	4619      	mov	r1, r3
 80089bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 80089ca:	6838      	ldr	r0, [r7, #0]
 80089cc:	f003 fd00 	bl	800c3d0 <_nx_packet_release>

        return;
 80089d0:	e171      	b.n	8008cb6 <_nx_arp_packet_receive+0x44e>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d040      	beq.n	8008a5a <_nx_arp_packet_receive+0x1f2>
 80089d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089de:	429a      	cmp	r2, r3
 80089e0:	d13b      	bne.n	8008a5a <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d105      	bne.n	80089fa <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f2:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 80089f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d02b      	beq.n	8008a52 <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10a      	bne.n	8008a1a <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a08:	220a      	movs	r2, #10
 8008a0a:	641a      	str	r2, [r3, #64]	; 0x40

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a10:	461a      	mov	r2, r3
 8008a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f953 	bl	8008cc0 <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00b      	beq.n	8008a3a <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8008a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a28:	79db      	ldrb	r3, [r3, #7]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d006      	beq.n	8008a52 <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	4798      	blx	r3

                return;
 8008a50:	e131      	b.n	8008cb6 <_nx_arp_packet_receive+0x44e>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 8008a52:	6838      	ldr	r0, [r7, #0]
 8008a54:	f003 fcbc 	bl	800c3d0 <_nx_packet_release>

        return;
 8008a58:	e12d      	b.n	8008cb6 <_nx_arp_packet_receive+0x44e>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	f040 808f 	bne.w	8008b80 <_nx_arp_packet_receive+0x318>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	f040 8088 	bne.w	8008b80 <_nx_arp_packet_receive+0x318>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	671a      	str	r2, [r3, #112]	; 0x70

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a7e:	1c5a      	adds	r2, r3, #1
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	675a      	str	r2, [r3, #116]	; 0x74

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 8008a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a86:	3304      	adds	r3, #4
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	4b8c      	ldr	r3, [pc, #560]	; (8008cbc <_nx_arp_packet_receive+0x454>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a90:	3204      	adds	r2, #4
 8008a92:	f043 0302 	orr.w	r3, r3, #2
 8008a96:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8008aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aaa:	3308      	adds	r3, #8
 8008aac:	430a      	orrs	r2, r1
 8008aae:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8008ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	0419      	lsls	r1, r3, #16
 8008ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ad2:	3310      	adds	r3, #16
 8008ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 8008ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008adc:	3314      	adds	r3, #20
 8008ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ae0:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 8008ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ae4:	3318      	adds	r3, #24
 8008ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae8:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8008aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aec:	3304      	adds	r3, #4
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af2:	3304      	adds	r3, #4
 8008af4:	ba12      	rev	r2, r2
 8008af6:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8008af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008afa:	3308      	adds	r3, #8
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b00:	3308      	adds	r3, #8
 8008b02:	ba12      	rev	r2, r2
 8008b04:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8008b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b08:	330c      	adds	r3, #12
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b0e:	330c      	adds	r3, #12
 8008b10:	ba12      	rev	r2, r2
 8008b12:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8008b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b16:	3310      	adds	r3, #16
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b1c:	3310      	adds	r3, #16
 8008b1e:	ba12      	rev	r2, r2
 8008b20:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8008b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b24:	3314      	adds	r3, #20
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b2a:	3314      	adds	r3, #20
 8008b2c:	ba12      	rev	r2, r2
 8008b2e:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8008b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b32:	3318      	adds	r3, #24
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b38:	3318      	adds	r3, #24
 8008b3a:	ba12      	rev	r2, r2
 8008b3c:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	221c      	movs	r2, #28
 8008b42:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f103 021c 	add.w	r2, r3, #28
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 8008b54:	2306      	movs	r3, #6
 8008b56:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 8008b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b62:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b68:	627b      	str	r3, [r7, #36]	; 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b70:	f107 0208 	add.w	r2, r7, #8
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8008b7e:	e00d      	b.n	8008b9c <_nx_arp_packet_receive+0x334>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 8008b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d105      	bne.n	8008b92 <_nx_arp_packet_receive+0x32a>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	671a      	str	r2, [r3, #112]	; 0x70
 8008b90:	e004      	b.n	8008b9c <_nx_arp_packet_receive+0x334>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	0a1a      	lsrs	r2, r3, #8
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f003 031f 	and.w	r3, r3, #31
 8008ba8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	647b      	str	r3, [r7, #68]	; 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d03c      	beq.n	8008c2e <_nx_arp_packet_receive+0x3c6>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	0a1a      	lsrs	r2, r3, #8
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	4413      	add	r3, r2
 8008bbc:	f003 031f 	and.w	r3, r3, #31
 8008bc0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc6:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 8008bd2:	e02c      	b.n	8008c2e <_nx_arp_packet_receive+0x3c6>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8008bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d117      	bne.n	8008c0e <_nx_arp_packet_receive+0x3a6>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 8008bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d127      	bne.n	8008c36 <_nx_arp_packet_receive+0x3ce>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8008be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bea:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8008bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bf0:	629a      	str	r2, [r3, #40]	; 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 8008bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 8008bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 8008bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c02:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 8008c04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa2c 	bl	8009064 <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 8008c0c:	e014      	b.n	8008c38 <_nx_arp_packet_receive+0x3d0>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 8008c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	647b      	str	r3, [r7, #68]	; 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c18:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d102      	bne.n	8008c2e <_nx_arp_packet_receive+0x3c6>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 8008c2c:	e004      	b.n	8008c38 <_nx_arp_packet_receive+0x3d0>
    while (arp_ptr)
 8008c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1cf      	bne.n	8008bd4 <_nx_arp_packet_receive+0x36c>
 8008c34:	e000      	b.n	8008c38 <_nx_arp_packet_receive+0x3d0>
                break;
 8008c36:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 8008c38:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d102      	bne.n	8008c46 <_nx_arp_packet_receive+0x3de>
    {
        _nx_packet_release(packet_ptr);
 8008c40:	6838      	ldr	r0, [r7, #0]
 8008c42:	f003 fbc5 	bl	800c3d0 <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 8008c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d134      	bne.n	8008cb6 <_nx_arp_packet_receive+0x44e>
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d031      	beq.n	8008cb6 <_nx_arp_packet_receive+0x44e>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	0a1a      	lsrs	r2, r3, #8
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	4413      	add	r3, r2
 8008c5a:	f003 031f 	and.w	r3, r3, #31
 8008c5e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8008c66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c68:	f502 72c9 	add.w	r2, r2, #402	; 0x192
 8008c6c:	0092      	lsls	r2, r2, #2
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	440a      	add	r2, r1
 8008c72:	1d11      	adds	r1, r2, #4
 8008c74:	2200      	movs	r2, #0
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	4798      	blx	r3
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d11a      	bne.n	8008cb6 <_nx_arp_packet_receive+0x44e>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c84:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	647b      	str	r3, [r7, #68]	; 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 8008c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c96:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8008c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c9c:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8008c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ca2:	629a      	str	r2, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 8008ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 8008caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cac:	2200      	movs	r2, #0
 8008cae:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 8008cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb4:	62da      	str	r2, [r3, #44]	; 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 8008cb6:	3754      	adds	r7, #84	; 0x54
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd90      	pop	{r4, r7, pc}
 8008cbc:	ffff0000 	.word	0xffff0000

08008cc0 <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08e      	sub	sp, #56	; 0x38
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d104      	bne.n	8008cdc <_nx_arp_packet_send+0x1c>
 8008cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd6:	f007 ff53 	bl	8010b80 <_tx_thread_sleep>
 8008cda:	e7fa      	b.n	8008cd2 <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8008ce2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	222c      	movs	r2, #44	; 0x2c
 8008cea:	f002 fee3 	bl	800bab4 <_nx_packet_allocate>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f040 8081 	bne.w	8008df8 <_nx_arp_packet_send+0x138>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	66da      	str	r2, [r3, #108]	; 0x6c
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	221c      	movs	r2, #28
 8008d0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d12:	3a1c      	subs	r2, #28
 8008d14:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 8008d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1e:	f44f 3284 	mov.w	r2, #67584	; 0x10800
 8008d22:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 8008d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d26:	3304      	adds	r3, #4
 8008d28:	4a35      	ldr	r2, [pc, #212]	; (8008e00 <_nx_arp_packet_send+0x140>)
 8008d2a:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8008d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3a:	3308      	adds	r3, #8
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8008d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4e:	330c      	adds	r3, #12
 8008d50:	430a      	orrs	r2, r1
 8008d52:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	695a      	ldr	r2, [r3, #20]
 8008d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5a:	3310      	adds	r3, #16
 8008d5c:	0412      	lsls	r2, r2, #16
 8008d5e:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 8008d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d62:	3314      	adds	r3, #20
 8008d64:	2200      	movs	r2, #0
 8008d66:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 8008d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6a:	3318      	adds	r3, #24
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 8008d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	ba1a      	rev	r2, r3
 8008d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d78:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8008d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d82:	3304      	adds	r3, #4
 8008d84:	ba12      	rev	r2, r2
 8008d86:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8008d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d90:	3308      	adds	r3, #8
 8008d92:	ba12      	rev	r2, r2
 8008d94:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8008d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d98:	330c      	adds	r3, #12
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9e:	330c      	adds	r3, #12
 8008da0:	ba12      	rev	r2, r2
 8008da2:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8008da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da6:	3310      	adds	r3, #16
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	3310      	adds	r3, #16
 8008dae:	ba12      	rev	r2, r2
 8008db0:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8008db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db4:	3314      	adds	r3, #20
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dba:	3314      	adds	r3, #20
 8008dbc:	ba12      	rev	r2, r2
 8008dbe:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc2:	3318      	adds	r3, #24
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc8:	3318      	adds	r3, #24
 8008dca:	ba12      	rev	r2, r2
 8008dcc:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 8008dd2:	2305      	movs	r3, #5
 8008dd4:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd8:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8008dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008dde:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8008de0:	f04f 33ff 	mov.w	r3, #4294967295
 8008de4:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dee:	f107 0210 	add.w	r2, r7, #16
 8008df2:	4610      	mov	r0, r2
 8008df4:	4798      	blx	r3
 8008df6:	e000      	b.n	8008dfa <_nx_arp_packet_send+0x13a>
                return;
 8008df8:	bf00      	nop
}
 8008dfa:	3738      	adds	r7, #56	; 0x38
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	06040001 	.word	0x06040001

08008e04 <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08a      	sub	sp, #40	; 0x28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8008e12:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8008e14:	2300      	movs	r3, #0
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24
 8008e18:	e0af      	b.n	8008f7a <_nx_arp_periodic_update+0x176>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 80a5 	beq.w	8008f6e <_nx_arp_periodic_update+0x16a>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	1e5a      	subs	r2, r3, #1
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f040 809b 	bne.w	8008f6e <_nx_arp_periodic_update+0x16a>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	2b12      	cmp	r3, #18
 8008e3e:	f040 8086 	bne.w	8008f4e <_nx_arp_periodic_update+0x14a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e42:	f3ef 8310 	mrs	r3, PRIMASK
 8008e46:	613b      	str	r3, [r7, #16]
    return(posture);
 8008e48:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8008e4a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e4c:	b672      	cpsid	i
    return(int_posture);
 8008e4e:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 8008e50:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d028      	beq.n	8008eac <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	6a3a      	ldr	r2, [r7, #32]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d104      	bne.n	8008e6e <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	e014      	b.n	8008e98 <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6a3a      	ldr	r2, [r7, #32]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d104      	bne.n	8008e84 <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	6a3a      	ldr	r2, [r7, #32]
 8008e80:	6952      	ldr	r2, [r2, #20]
 8008e82:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 8008e88:	6a3a      	ldr	r2, [r7, #32]
 8008e8a:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8008e8c:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 8008e92:	6a3a      	ldr	r2, [r7, #32]
 8008e94:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8008e96:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8008e9e:	1e5a      	subs	r2, r3, #1
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 8008eac:	6a3b      	ldr	r3, [r7, #32]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	6a3a      	ldr	r2, [r7, #32]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d02a      	beq.n	8008f0c <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 8008eba:	6a3a      	ldr	r2, [r7, #32]
 8008ebc:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8008ebe:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 8008ec4:	6a3a      	ldr	r2, [r7, #32]
 8008ec6:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8008ec8:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8008ed0:	6a3a      	ldr	r2, [r7, #32]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d104      	bne.n	8008ee0 <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	68da      	ldr	r2, [r3, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
                        arp_entry -> nx_arp_pool_next =
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8008ef0:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	6a3a      	ldr	r2, [r7, #32]
 8008f00:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8008f08:	6a3a      	ldr	r2, [r7, #32]
 8008f0a:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f10:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	2200      	movs	r2, #0
 8008f16:	631a      	str	r2, [r3, #48]	; 0x30
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f383 8810 	msr	PRIMASK, r3
}
 8008f22:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 8008f24:	e00f      	b.n	8008f46 <_nx_arp_periodic_update+0x142>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2200      	movs	r2, #0
 8008f34:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 8008f40:	6978      	ldr	r0, [r7, #20]
 8008f42:	f003 fafb 	bl	800c53c <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1ec      	bne.n	8008f26 <_nx_arp_periodic_update+0x122>
 8008f4c:	e00f      	b.n	8008f6e <_nx_arp_periodic_update+0x16a>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	220a      	movs	r2, #10
 8008f5c:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	6a19      	ldr	r1, [r3, #32]
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	461a      	mov	r2, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff fea9 	bl	8008cc0 <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	3301      	adds	r3, #1
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8008f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f82:	429a      	cmp	r2, r3
 8008f84:	f4ff af49 	bcc.w	8008e1a <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f8c:	e02f      	b.n	8008fee <_nx_arp_periodic_update+0x1ea>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	214c      	movs	r1, #76	; 0x4c
 8008f94:	fb01 f303 	mul.w	r3, r1, r3
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d01e      	beq.n	8008fe2 <_nx_arp_periodic_update+0x1de>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa8:	214c      	movs	r1, #76	; 0x4c
 8008faa:	fb01 f303 	mul.w	r3, r1, r3
 8008fae:	4413      	add	r3, r2
 8008fb0:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d015      	beq.n	8008fe6 <_nx_arp_periodic_update+0x1e2>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	214c      	movs	r1, #76	; 0x4c
 8008fc0:	fb01 f303 	mul.w	r3, r1, r3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	1e5a      	subs	r2, r3, #1
 8008fce:	6879      	ldr	r1, [r7, #4]
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	204c      	movs	r0, #76	; 0x4c
 8008fd4:	fb00 f303 	mul.w	r3, r0, r3
 8008fd8:	440b      	add	r3, r1
 8008fda:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	e002      	b.n	8008fe8 <_nx_arp_periodic_update+0x1e4>
            continue;
 8008fe2:	bf00      	nop
 8008fe4:	e000      	b.n	8008fe8 <_nx_arp_periodic_update+0x1e4>
            continue;
 8008fe6:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	3301      	adds	r3, #1
 8008fec:	627b      	str	r3, [r7, #36]	; 0x24
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d0cc      	beq.n	8008f8e <_nx_arp_periodic_update+0x18a>
    }
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop
 8008ff8:	3728      	adds	r7, #40	; 0x28
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b088      	sub	sp, #32
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8009006:	e023      	b.n	8009050 <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009008:	f3ef 8310 	mrs	r3, PRIMASK
 800900c:	617b      	str	r3, [r7, #20]
    return(posture);
 800900e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009010:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009012:	b672      	cpsid	i
    return(int_posture);
 8009014:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 8009016:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 800901e:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	69da      	ldr	r2, [r3, #28]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8009030:	2b00      	cmp	r3, #0
 8009032:	d103      	bne.n	800903c <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f383 8810 	msr	PRIMASK, r3
}
 8009046:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 8009048:	69b9      	ldr	r1, [r7, #24]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff fc0c 	bl	8008868 <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1d6      	bne.n	8009008 <_nx_arp_queue_process+0xa>
    }
}
 800905a:	bf00      	nop
 800905c:	bf00      	nop
 800905e:	3720      	adds	r7, #32
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b090      	sub	sp, #64	; 0x40
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 800906e:	2300      	movs	r3, #0
 8009070:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009072:	f3ef 8310 	mrs	r3, PRIMASK
 8009076:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800907a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800907c:	b672      	cpsid	i
    return(int_posture);
 800907e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 8009080:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009086:	2b00      	cmp	r3, #0
 8009088:	d005      	beq.n	8009096 <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908e:	63fb      	str	r3, [r7, #60]	; 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2200      	movs	r2, #0
 8009094:	631a      	str	r2, [r3, #48]	; 0x30
 8009096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009098:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	f383 8810 	msr	PRIMASK, r3
}
 80090a0:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 80090a2:	e04c      	b.n	800913e <_nx_arp_queue_send+0xda>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 80090a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a6:	637b      	str	r3, [r7, #52]	; 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 80090a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80090ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b0:	2200      	movs	r2, #0
 80090b2:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c6:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 80090cc:	2300      	movs	r3, #0
 80090ce:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 80090d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d2:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80090d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80090da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d915      	bls.n	8009114 <_nx_arp_queue_send+0xb0>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d007      	beq.n	8009102 <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80090f8:	f107 0208 	add.w	r2, r7, #8
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	e01d      	b.n	800913e <_nx_arp_queue_send+0xda>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 800910c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800910e:	f003 fa15 	bl	800c53c <_nx_packet_transmit_release>
 8009112:	e014      	b.n	800913e <_nx_arp_queue_send+0xda>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	699a      	ldr	r2, [r3, #24]
 8009122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	4413      	add	r3, r2
 8009128:	f1a3 0214 	sub.w	r2, r3, #20
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	619a      	str	r2, [r3, #24]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8009130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009136:	f107 0208 	add.w	r2, r7, #8
 800913a:	4610      	mov	r0, r2
 800913c:	4798      	blx	r3
    while (queued_list_head)
 800913e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1af      	bne.n	80090a4 <_nx_arp_queue_send+0x40>
        }
    }
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop
 8009148:	3740      	adds	r7, #64	; 0x40
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
	...

08009150 <_nx_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a09      	ldr	r2, [pc, #36]	; (8009180 <_nx_icmp_enable+0x30>)
 800915c:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a08      	ldr	r2, [pc, #32]	; (8009184 <_nx_icmp_enable+0x34>)
 8009164:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364

    /* Setup the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a07      	ldr	r2, [pc, #28]	; (8009188 <_nx_icmp_enable+0x38>)
 800916c:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c

    /* Return a successful status!  */
    return(NX_SUCCESS);
 8009170:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8009172:	4618      	mov	r0, r3
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	08009289 	.word	0x08009289
 8009184:	080091c9 	.word	0x080091c9
 8009188:	080092e7 	.word	0x080092e7

0800918c <_nx_icmp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 800919c:	2b00      	cmp	r3, #0
 800919e:	d006      	beq.n	80091ae <_nx_icmp_packet_process+0x22>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	4798      	blx	r3
        return;
 80091ac:	e009      	b.n	80091c2 <_nx_icmp_packet_process+0x36>
    }

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80091b4:	1c5a      	adds	r2, r3, #1
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 80091bc:	6838      	ldr	r0, [r7, #0]
 80091be:	f003 f907 	bl	800c3d0 <_nx_packet_release>
}
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <_nx_icmp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP total messages received counter.  */
    ip_ptr -> nx_ip_icmp_total_messages_received++;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80091d8:	1c5a      	adds	r2, r3, #1
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMP_HEADER))
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	2b07      	cmp	r3, #7
 80091e6:	d80a      	bhi.n	80091fe <_nx_icmp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80091ee:	1c5a      	adds	r2, r3, #1
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 80091f6:	6838      	ldr	r0, [r7, #0]
 80091f8:	f003 f8ea 	bl	800c3d0 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 80091fc:	e03c      	b.n	8009278 <_nx_icmp_packet_receive+0xb0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80091fe:	f3ef 8305 	mrs	r3, IPSR
 8009202:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009204:	69ba      	ldr	r2, [r7, #24]
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 8009206:	4b1e      	ldr	r3, [pc, #120]	; (8009280 <_nx_icmp_packet_receive+0xb8>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4313      	orrs	r3, r2
 800920c:	2b00      	cmp	r3, #0
 800920e:	d106      	bne.n	800921e <_nx_icmp_packet_receive+0x56>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8009216:	4b1b      	ldr	r3, [pc, #108]	; (8009284 <_nx_icmp_packet_receive+0xbc>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d028      	beq.n	8009270 <_nx_icmp_packet_receive+0xa8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800921e:	f3ef 8310 	mrs	r3, PRIMASK
 8009222:	617b      	str	r3, [r7, #20]
    return(posture);
 8009224:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009226:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009228:	b672      	cpsid	i
    return(int_posture);
 800922a:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback. Just place the message at the
           end of the ICMP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800922c:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the ICMP message queue.  */
        if (ip_ptr -> nx_ip_icmp_queue_head)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <_nx_icmp_packet_receive+0x7c>
        {

            /* Link the current packet to the list head.  */
            packet_ptr -> nx_packet_queue_next =  ip_ptr -> nx_ip_icmp_queue_head;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 2370 	ldr.w	r2, [r3, #880]	; 0x370
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	61da      	str	r2, [r3, #28]
 8009242:	e002      	b.n	800924a <_nx_icmp_packet_receive+0x82>
        }
        else
        {

            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	2200      	movs	r2, #0
 8009248:	61da      	str	r2, [r3, #28]
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f383 8810 	msr	PRIMASK, r3
}
 800925c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009264:	2200      	movs	r2, #0
 8009266:	2104      	movs	r1, #4
 8009268:	4618      	mov	r0, r3
 800926a:	f005 febf 	bl	800efec <_tx_event_flags_set>
 800926e:	e003      	b.n	8009278 <_nx_icmp_packet_receive+0xb0>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the ICMP processing directly.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff ff8a 	bl	800918c <_nx_icmp_packet_process>
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 8009278:	3720      	adds	r7, #32
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	2000008c 	.word	0x2000008c
 8009284:	20008198 	.word	0x20008198

08009288 <_nx_icmp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b088      	sub	sp, #32
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009290:	f3ef 8310 	mrs	r3, PRIMASK
 8009294:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009296:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009298:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800929a:	b672      	cpsid	i
    return(int_posture);
 800929c:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 800929e:	61bb      	str	r3, [r7, #24]

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 80092a6:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f383 8810 	msr	PRIMASK, r3
}
 80092ba:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 80092bc:	e00b      	b.n	80092d6 <_nx_icmp_queue_process+0x4e>
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	2200      	movs	r2, #0
 80092cc:	61da      	str	r2, [r3, #28]

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 80092ce:	6979      	ldr	r1, [r7, #20]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff ff5b 	bl	800918c <_nx_icmp_packet_process>
    while (queue_head)
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1f0      	bne.n	80092be <_nx_icmp_queue_process+0x36>
    }
}
 80092dc:	bf00      	nop
 80092de:	bf00      	nop
 80092e0:	3720      	adds	r7, #32
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <_nx_icmpv4_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b086      	sub	sp, #24
 80092ea:	af02      	add	r7, sp, #8
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	60fb      	str	r3, [r7, #12]
#endif /* defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Calculate the ICMP message checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
                                            (UINT)packet_ptr -> nx_packet_length,
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 80092fa:	2300      	movs	r3, #0
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	2300      	movs	r3, #0
 8009300:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009304:	6838      	ldr	r0, [r7, #0]
 8009306:	f000 fb17 	bl	8009938 <_nx_ip_checksum_compute>
 800930a:	4603      	mov	r3, r0
 800930c:	817b      	strh	r3, [r7, #10]
                                            /* ICMPv4 checksum does not include
                                               src/dest addresses */
                                            NX_NULL, NX_NULL);

        checksum =  ((USHORT) ~checksum) & NX_LOWER_16_MASK;
 800930e:	897b      	ldrh	r3, [r7, #10]
 8009310:	43db      	mvns	r3, r3
 8009312:	817b      	strh	r3, [r7, #10]

        /* Determine if the checksum is valid.  */
        if (checksum)
 8009314:	897b      	ldrh	r3, [r7, #10]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d011      	beq.n	800933e <_nx_icmpv4_packet_process+0x58>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error.  */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

            /* Increment the ICMP checksum error count.  */
            ip_ptr -> nx_ip_icmp_checksum_errors++;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800932e:	1c5a      	adds	r2, r3, #1
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
#endif

            /* Nope, the checksum is invalid.  Toss this ICMP packet out.  */
            _nx_packet_release(packet_ptr);
 8009336:	6838      	ldr	r0, [r7, #0]
 8009338:	f003 f84a 	bl	800c3d0 <_nx_packet_release>
            return;
 800933c:	e01b      	b.n	8009376 <_nx_icmpv4_packet_process+0x90>
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d104      	bne.n	8009350 <_nx_icmpv4_packet_process+0x6a>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f817 	bl	800937c <_nx_icmpv4_process_echo_reply>
 800934e:	e012      	b.n	8009376 <_nx_icmpv4_packet_process+0x90>
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b08      	cmp	r3, #8
 8009356:	d104      	bne.n	8009362 <_nx_icmpv4_packet_process+0x7c>
    {
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f8cc 	bl	80094f8 <_nx_icmpv4_process_echo_request>
 8009360:	e009      	b.n	8009376 <_nx_icmpv4_packet_process+0x90>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP unhandled message count.  */
        ip_ptr -> nx_ip_icmp_unhandled_messages++;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 8009370:	6838      	ldr	r0, [r7, #0]
 8009372:	f003 f82d 	bl	800c3d0 <_nx_packet_release>
    }
}
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <_nx_icmpv4_process_echo_reply>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b090      	sub	sp, #64	; 0x40
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    echo_ptr =  (NX_ICMPV4_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009392:	1c5a      	adds	r2, r3, #1
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 800939a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939c:	88db      	ldrh	r3, [r3, #6]
 800939e:	867b      	strh	r3, [r7, #50]	; 0x32

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 80093a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80093a2:	ba5b      	rev16	r3, r3
 80093a4:	867b      	strh	r3, [r7, #50]	; 0x32
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80093a6:	f3ef 8310 	mrs	r3, PRIMASK
 80093aa:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80093ae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80093b0:	b672      	cpsid	i
    return(int_posture);
 80093b2:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts.  */
    TX_DISABLE
 80093b4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80093bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80093c4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80093c6:	4b4b      	ldr	r3, [pc, #300]	; (80094f4 <_nx_icmpv4_process_echo_reply+0x178>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3301      	adds	r3, #1
 80093cc:	4a49      	ldr	r2, [pc, #292]	; (80094f4 <_nx_icmpv4_process_echo_reply+0x178>)
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80093d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d6:	f383 8810 	msr	PRIMASK, r3
}
 80093da:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 80093dc:	e05e      	b.n	800949c <_nx_icmpv4_process_echo_reply+0x120>
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 80093de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d155      	bne.n	8009496 <_nx_icmpv4_process_echo_reply+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80093ea:	f3ef 8310 	mrs	r3, PRIMASK
 80093ee:	61fb      	str	r3, [r7, #28]
    return(posture);
 80093f0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80093f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80093f4:	b672      	cpsid	i
    return(int_posture);
 80093f6:	69bb      	ldr	r3, [r7, #24]
        {

            /* Disable interrupts.  */
            TX_DISABLE
 80093f8:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80093fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009400:	429a      	cmp	r2, r3
 8009402:	d104      	bne.n	800940e <_nx_icmpv4_process_echo_reply+0x92>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 800940c:	e014      	b.n	8009438 <_nx_icmpv4_process_echo_reply+0xbc>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8009414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009416:	429a      	cmp	r2, r3
 8009418:	d104      	bne.n	8009424 <_nx_icmpv4_process_echo_reply+0xa8>
                {
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800941a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
                }

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 8009428:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800942a:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800942c:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800942e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 8009432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009434:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009436:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800943e:	1e5a      	subs	r2, r3, #1
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009448:	2200      	movs	r2, #0
 800944a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800944c:	4b29      	ldr	r3, [pc, #164]	; (80094f4 <_nx_icmpv4_process_echo_reply+0x178>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3301      	adds	r3, #1
 8009452:	4a28      	ldr	r2, [pc, #160]	; (80094f4 <_nx_icmpv4_process_echo_reply+0x178>)
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009458:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f383 8810 	msr	PRIMASK, r3
}
 8009460:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to remove the ICMP header that is still in front of
               the response message.  */
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	f1a3 0208 	sub.w	r2, r3, #8
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f103 0208 	add.w	r2, r3, #8
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	609a      	str	r2, [r3, #8]

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800947a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	601a      	str	r2, [r3, #0]

            /* Clear packet pointer so we don't try to release it below.  */
            packet_ptr =  NX_NULL;
 8009482:	2300      	movs	r3, #0
 8009484:	603b      	str	r3, [r7, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8009486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009488:	2200      	movs	r2, #0
 800948a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800948e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009490:	f007 fca0 	bl	8010dd4 <_tx_thread_system_resume>

            /* Get out of the loop.  */
            break;
 8009494:	e007      	b.n	80094a6 <_nx_icmpv4_process_echo_reply+0x12a>
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8009496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (suspended--)
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	1e5a      	subs	r2, r3, #1
 80094a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d19b      	bne.n	80093de <_nx_icmpv4_process_echo_reply+0x62>
        }
    }

    /* Determine if no match was made and we just have to release the packet.  */
    if (packet_ptr)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d009      	beq.n	80094c0 <_nx_icmpv4_process_echo_reply+0x144>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 80094ba:	6838      	ldr	r0, [r7, #0]
 80094bc:	f002 ff88 	bl	800c3d0 <_nx_packet_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80094c0:	f3ef 8310 	mrs	r3, PRIMASK
 80094c4:	60fb      	str	r3, [r7, #12]
    return(posture);
 80094c6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80094c8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80094ca:	b672      	cpsid	i
    return(int_posture);
 80094cc:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 80094ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 80094d0:	4b08      	ldr	r3, [pc, #32]	; (80094f4 <_nx_icmpv4_process_echo_reply+0x178>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	4a07      	ldr	r2, [pc, #28]	; (80094f4 <_nx_icmpv4_process_echo_reply+0x178>)
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f383 8810 	msr	PRIMASK, r3
}
 80094e4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80094e6:	f007 fc3b 	bl	8010d60 <_tx_thread_system_preempt_check>
}
 80094ea:	bf00      	nop
 80094ec:	3740      	adds	r7, #64	; 0x40
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20008230 	.word	0x20008230

080094f8 <_nx_icmpv4_process_echo_request>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b08c      	sub	sp, #48	; 0x30
 80094fc:	af04      	add	r7, sp, #16
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	61fb      	str	r3, [r7, #28]

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009510:	61bb      	str	r3, [r7, #24]

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	2200      	movs	r2, #0
 8009524:	701a      	strb	r2, [r3, #0]
           m'  - new value of a 16-bit field
           HC' = ~(C + (-m) + m')
           = ~(~HC + ~m + m') */

        /* Endian swapping logic.  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	885b      	ldrh	r3, [r3, #2]
 800952a:	ba5b      	rev16	r3, r3
 800952c:	b29a      	uxth	r2, r3
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	805a      	strh	r2, [r3, #2]

        /* Get the old checksum (HC) in header. */
        checksum = header_ptr -> nx_icmpv4_header_checksum;
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	885b      	ldrh	r3, [r3, #2]
 8009536:	617b      	str	r3, [r7, #20]

        /* Get the old type(m). */
        old_m = (ULONG)(NX_ICMP_ECHO_REQUEST_TYPE << 8);
 8009538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800953c:	613b      	str	r3, [r7, #16]

        /* Update the checksum, get the new checksum(HC'). */
        /* The m' is value of echo reply type. It is zero so can be ignored. */
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	43db      	mvns	r3, r3
 8009542:	b29a      	uxth	r2, r3
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	43db      	mvns	r3, r3
 8009548:	b29b      	uxth	r3, r3
 800954a:	4413      	add	r3, r2
 800954c:	617b      	str	r3, [r7, #20]

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	0c1a      	lsrs	r2, r3, #16
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	b29b      	uxth	r3, r3
 8009556:	4413      	add	r3, r2
 8009558:	617b      	str	r3, [r7, #20]

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	0c1a      	lsrs	r2, r3, #16
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	b29b      	uxth	r3, r3
 8009562:	4413      	add	r3, r2
 8009564:	617b      	str	r3, [r7, #20]

        /* Store the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	b29b      	uxth	r3, r3
 800956a:	43db      	mvns	r3, r3
 800956c:	b29a      	uxth	r2, r3
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	805a      	strh	r2, [r3, #2]

        /* If NX_LITTLE_ENDIAN is defined, the header need to be swapped back
           for output (network byte order).  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	885b      	ldrh	r3, [r3, #2]
 8009576:	ba5b      	rev16	r3, r3
 8009578:	b29a      	uxth	r2, r3
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	805a      	strh	r2, [r3, #2]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	68d9      	ldr	r1, [r3, #12]
                      &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8009588:	f107 030c 	add.w	r3, r7, #12
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 fbf3 	bl	800ad78 <_nx_ip_route_find>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ipv4_header -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings responded to count.  */
    ip_ptr -> nx_ip_pings_responded_to++;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	68da      	ldr	r2, [r3, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	9303      	str	r3, [sp, #12]
 80095a8:	2300      	movs	r3, #0
 80095aa:	9302      	str	r3, [sp, #8]
 80095ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	2380      	movs	r3, #128	; 0x80
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	2300      	movs	r3, #0
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f001 fb65 	bl	800ac8a <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 80095c0:	bf00      	nop
 80095c2:	3720      	adds	r7, #32
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b094      	sub	sp, #80	; 0x50
 80095cc:	af04      	add	r7, sp, #16
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 80095d6:	2300      	movs	r3, #0
 80095d8:	613b      	str	r3, [r7, #16]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 8100 	beq.w	80097e6 <_nx_icmpv4_send_error_message+0x21e>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 80095ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80095f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009600:	f000 80f3 	beq.w	80097ea <_nx_icmpv4_send_error_message+0x222>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8009604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800960c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009610:	f000 80eb 	beq.w	80097ea <_nx_icmpv4_send_error_message+0x222>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8009614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009616:	691a      	ldr	r2, [r3, #16]
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8009622:	429a      	cmp	r2, r3
 8009624:	d10b      	bne.n	800963e <_nx_icmpv4_send_error_message+0x76>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 8009626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009628:	691a      	ldr	r2, [r3, #16]
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	43db      	mvns	r3, r3
 8009630:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 8009638:	429a      	cmp	r2, r3
 800963a:	f000 80d8 	beq.w	80097ee <_nx_icmpv4_send_error_message+0x226>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009646:	2b00      	cmp	r3, #0
 8009648:	f040 80d3 	bne.w	80097f2 <_nx_icmpv4_send_error_message+0x22a>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 800964c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 80d0 	beq.w	80097f6 <_nx_icmpv4_send_error_message+0x22e>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8009656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009658:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 800965a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800965e:	d304      	bcc.n	800966a <_nx_icmpv4_send_error_message+0xa2>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8009660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009662:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8009664:	2b00      	cmp	r3, #0
 8009666:	f280 80c6 	bge.w	80097f6 <_nx_icmpv4_send_error_message+0x22e>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 800966a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966c:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 800966e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009672:	f000 80c0 	beq.w	80097f6 <_nx_icmpv4_send_error_message+0x22e>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8009676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 800967e:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009682:	f000 80b8 	beq.w	80097f6 <_nx_icmpv4_send_error_message+0x22e>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 800968c:	f107 0114 	add.w	r1, r7, #20
 8009690:	2300      	movs	r3, #0
 8009692:	2224      	movs	r2, #36	; 0x24
 8009694:	f002 fa0e 	bl	800bab4 <_nx_packet_allocate>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	f040 80ad 	bne.w	80097fa <_nx_icmpv4_send_error_message+0x232>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2204      	movs	r2, #4
 80096a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	623b      	str	r3, [r7, #32]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	0e1b      	lsrs	r3, r3, #24
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	0c1b      	lsrs	r3, r3, #16
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	2200      	movs	r2, #0
 80096c6:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	061a      	lsls	r2, r3, #24
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	ba1a      	rev	r2, r3
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	0e1b      	lsrs	r3, r3, #24
 80096e0:	f003 030f 	and.w	r3, r3, #15
 80096e4:	61fb      	str	r3, [r7, #28]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	3302      	adds	r3, #2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096f2:	3208      	adds	r2, #8
 80096f4:	625a      	str	r2, [r3, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	6899      	ldr	r1, [r3, #8]
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	440a      	add	r2, r1
 8009702:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009708:	637b      	str	r3, [r7, #52]	; 0x34

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	3308      	adds	r3, #8
 800970e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8009710:	2300      	movs	r3, #0
 8009712:	63bb      	str	r3, [r7, #56]	; 0x38
 8009714:	e00a      	b.n	800972c <_nx_icmpv4_send_error_message+0x164>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8009716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	ba1a      	rev	r2, r3
 800971c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971e:	601a      	str	r2, [r3, #0]
        src_packet++;
 8009720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009722:	3304      	adds	r3, #4
 8009724:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8009726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009728:	3301      	adds	r3, #1
 800972a:	63bb      	str	r3, [r7, #56]	; 0x38
 800972c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972e:	2b04      	cmp	r3, #4
 8009730:	d9f1      	bls.n	8009716 <_nx_icmpv4_send_error_message+0x14e>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009736:	637b      	str	r3, [r7, #52]	; 0x34

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8009738:	e00a      	b.n	8009750 <_nx_icmpv4_send_error_message+0x188>
    {

        *dest_packet++ = *src_packet++;
 800973a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800973c:	1d13      	adds	r3, r2, #4
 800973e:	637b      	str	r3, [r7, #52]	; 0x34
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	1d19      	adds	r1, r3, #4
 8009744:	6339      	str	r1, [r7, #48]	; 0x30
 8009746:	6812      	ldr	r2, [r2, #0]
 8009748:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 800974a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974c:	3b04      	subs	r3, #4
 800974e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1f1      	bne.n	800973a <_nx_icmpv4_send_error_message+0x172>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 800975c:	2300      	movs	r3, #0
 800975e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009760:	e00a      	b.n	8009778 <_nx_icmpv4_send_error_message+0x1b0>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8009762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	ba1a      	rev	r2, r3
 8009768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976a:	601a      	str	r2, [r3, #0]
        src_packet++;
 800976c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976e:	3304      	adds	r3, #4
 8009770:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	3301      	adds	r3, #1
 8009776:	63bb      	str	r3, [r7, #56]	; 0x38
 8009778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977a:	2b04      	cmp	r3, #4
 800977c:	d9f1      	bls.n	8009762 <_nx_icmpv4_send_error_message+0x19a>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009784:	631a      	str	r2, [r3, #48]	; 0x30

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, src_ip,
 800978c:	f107 0310 	add.w	r3, r7, #16
 8009790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f001 faf0 	bl	800ad78 <_nx_ip_route_find>
    if (compute_checksum)
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8009798:	6978      	ldr	r0, [r7, #20]
                                           (UINT)pkt_ptr -> nx_packet_length,
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 800979e:	2300      	movs	r3, #0
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	2300      	movs	r3, #0
 80097a4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80097a8:	f000 f8c6 	bl	8009938 <_nx_ip_checksum_compute>
 80097ac:	4603      	mov	r3, r0
 80097ae:	837b      	strh	r3, [r7, #26]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 80097b0:	8b7b      	ldrh	r3, [r7, #26]
 80097b2:	43db      	mvns	r3, r3
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	885b      	ldrh	r3, [r3, #2]
 80097be:	ba5b      	rev16	r3, r3
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	805a      	strh	r2, [r3, #2]
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 80097c6:	6979      	ldr	r1, [r7, #20]
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	9303      	str	r3, [sp, #12]
 80097cc:	2300      	movs	r3, #0
 80097ce:	9302      	str	r3, [sp, #8]
 80097d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	23ff      	movs	r3, #255	; 0xff
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	2300      	movs	r3, #0
 80097dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f001 fa53 	bl	800ac8a <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 80097e4:	e00a      	b.n	80097fc <_nx_icmpv4_send_error_message+0x234>
        return;
 80097e6:	bf00      	nop
 80097e8:	e008      	b.n	80097fc <_nx_icmpv4_send_error_message+0x234>
        return;
 80097ea:	bf00      	nop
 80097ec:	e006      	b.n	80097fc <_nx_icmpv4_send_error_message+0x234>
        return;
 80097ee:	bf00      	nop
 80097f0:	e004      	b.n	80097fc <_nx_icmpv4_send_error_message+0x234>
        return;
 80097f2:	bf00      	nop
 80097f4:	e002      	b.n	80097fc <_nx_icmpv4_send_error_message+0x234>
        return;
 80097f6:	bf00      	nop
 80097f8:	e000      	b.n	80097fc <_nx_icmpv4_send_error_message+0x234>
        return;
 80097fa:	bf00      	nop
}
 80097fc:	3740      	adds	r7, #64	; 0x40
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4a18      	ldr	r2, [pc, #96]	; (8009874 <_nx_igmp_multicast_check+0x70>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d101      	bne.n	800981c <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 8009818:	2301      	movs	r3, #1
 800981a:	e025      	b.n	8009868 <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 800981c:	2300      	movs	r3, #0
 800981e:	617b      	str	r3, [r7, #20]
 8009820:	e01e      	b.n	8009860 <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8009822:	68f9      	ldr	r1, [r7, #12]
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	4613      	mov	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	440b      	add	r3, r1
 8009830:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	429a      	cmp	r2, r3
 800983a:	d10e      	bne.n	800985a <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 800983c:	68f9      	ldr	r1, [r7, #12]
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	4613      	mov	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	440b      	add	r3, r1
 800984a:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800984e:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	429a      	cmp	r2, r3
 8009854:	d101      	bne.n	800985a <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 8009856:	2301      	movs	r3, #1
 8009858:	e006      	b.n	8009868 <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	3301      	adds	r3, #1
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	2b06      	cmp	r3, #6
 8009864:	d9dd      	bls.n	8009822 <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	371c      	adds	r7, #28
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	e0000001 	.word	0xe0000001

08009878 <_nx_ip_address_change_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_change_notify(NX_IP *ip_ptr, VOID (*ip_address_change_notify)(NX_IP *, VOID *), VOID *additional_info)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_CHANGE_NOTIFY, ip_ptr, ip_address_change_notify, additional_info, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800988a:	f04f 31ff 	mov.w	r1, #4294967295
 800988e:	4618      	mov	r0, r3
 8009890:	f005 fff0 	bl	800f874 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009894:	f3ef 8310 	mrs	r3, PRIMASK
 8009898:	617b      	str	r3, [r7, #20]
    return(posture);
 800989a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800989c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800989e:	b672      	cpsid	i
    return(int_posture);
 80098a0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80098a2:	61fb      	str	r3, [r7, #28]

    /* Setup the IP address change callback function and the additional information pointers. */
    ip_ptr -> nx_ip_address_change_notify =                  ip_address_change_notify;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    ip_ptr -> nx_ip_address_change_notify_additional_info =  additional_info;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	f383 8810 	msr	PRIMASK, r3
}
 80098be:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80098c6:	4618      	mov	r0, r3
 80098c8:	f006 fa4c 	bl	800fd64 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 80098cc:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address_change_notify);
    NX_PARAMETER_NOT_USED(additional_info);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3720      	adds	r7, #32
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <_nx_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b088      	sub	sp, #32
 80098da:	af00      	add	r7, sp, #0
 80098dc:	60f8      	str	r0, [r7, #12]
 80098de:	60b9      	str	r1, [r7, #8]
 80098e0:	607a      	str	r2, [r7, #4]

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80098e8:	f04f 31ff 	mov.w	r1, #4294967295
 80098ec:	4618      	mov	r0, r3
 80098ee:	f005 ffc1 	bl	800f874 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80098f2:	f3ef 8310 	mrs	r3, PRIMASK
 80098f6:	617b      	str	r3, [r7, #20]
    return(posture);
 80098f8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80098fa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80098fc:	b672      	cpsid	i
    return(int_posture);
 80098fe:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8009900:	61fb      	str	r3, [r7, #28]

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8d3 2730 	ldr.w	r2, [r3, #1840]	; 0x730
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8d3 2734 	ldr.w	r2, [r3, #1844]	; 0x734
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	f383 8810 	msr	PRIMASK, r3
}
 8009920:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009928:	4618      	mov	r0, r3
 800992a:	f006 fa1b 	bl	800fd64 <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_GET, ip_ptr, ip_ptr -> nx_ip_interface[0].nx_interface_ip_address,
                            ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Return completion status.  */
    return(NX_SUCCESS);
 800992e:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8009930:	4618      	mov	r0, r3
 8009932:	3720      	adds	r7, #32
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08e      	sub	sp, #56	; 0x38
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	637b      	str	r3, [r7, #52]	; 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	2b11      	cmp	r3, #17
 800994e:	d002      	beq.n	8009956 <_nx_ip_checksum_compute+0x1e>
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b06      	cmp	r3, #6
 8009954:	d141      	bne.n	80099da <_nx_ip_checksum_compute+0xa2>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	637b      	str	r3, [r7, #52]	; 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <_nx_ip_checksum_compute+0x2e>
 8009960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009962:	2b00      	cmp	r3, #0
 8009964:	d104      	bne.n	8009970 <_nx_ip_checksum_compute+0x38>
 8009966:	f04f 30ff 	mov.w	r0, #4294967295
 800996a:	f007 f909 	bl	8010b80 <_tx_thread_sleep>
 800996e:	e7fa      	b.n	8009966 <_nx_ip_checksum_compute+0x2e>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	623b      	str	r3, [r7, #32]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 8009974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009976:	61fb      	str	r3, [r7, #28]


        checksum += src_ip_short[0];
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	461a      	mov	r2, r3
 800997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009980:	4413      	add	r3, r2
 8009982:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += src_ip_short[1];
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	3302      	adds	r3, #2
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998e:	4413      	add	r3, r2
 8009990:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[0];
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999a:	4413      	add	r3, r2
 800999c:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[1];
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	3302      	adds	r3, #2
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a8:	4413      	add	r3, r2
 80099aa:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 80099ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4413      	add	r3, r2
 80099b2:	637b      	str	r3, [r7, #52]	; 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 80099b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b6:	0c1a      	lsrs	r2, r3, #16
 80099b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	4413      	add	r3, r2
 80099be:	637b      	str	r3, [r7, #52]	; 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 80099c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c2:	0c1a      	lsrs	r2, r3, #16
 80099c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	4413      	add	r3, r2
 80099ca:	637b      	str	r3, [r7, #52]	; 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 80099cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ce:	837b      	strh	r3, [r7, #26]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 80099d0:	8b7b      	ldrh	r3, [r7, #26]
 80099d2:	ba5b      	rev16	r3, r3
 80099d4:	837b      	strh	r3, [r7, #26]
        checksum = tmp;
 80099d6:	8b7b      	ldrh	r3, [r7, #26]
 80099d8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 80099e4:	e058      	b.n	8009a98 <_nx_ip_checksum_compute+0x160>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	68da      	ldr	r2, [r3, #12]
 80099ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	617b      	str	r3, [r7, #20]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d905      	bls.n	8009a06 <_nx_ip_checksum_compute+0xce>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 80099fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f023 0303 	bic.w	r3, r3, #3
 8009a02:	627b      	str	r3, [r7, #36]	; 0x24
 8009a04:	e006      	b.n	8009a14 <_nx_ip_checksum_compute+0xdc>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 8009a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4413      	add	r3, r2
 8009a10:	3b03      	subs	r3, #3
 8009a12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 8009a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d91c      	bls.n	8009a5c <_nx_ip_checksum_compute+0x124>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 8009a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	3303      	adds	r3, #3
 8009a28:	f023 0303 	bic.w	r3, r3, #3
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	4413      	add	r3, r2
 8009a32:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8009a34:	e00e      	b.n	8009a54 <_nx_ip_checksum_compute+0x11c>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 8009a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a3e:	4413      	add	r3, r2
 8009a40:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 8009a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	0c1b      	lsrs	r3, r3, #16
 8009a48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a4a:	4413      	add	r3, r2
 8009a4c:	637b      	str	r3, [r7, #52]	; 0x34
                long_ptr++;
 8009a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a50:	3304      	adds	r3, #4
 8009a52:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8009a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d8ec      	bhi.n	8009a36 <_nx_ip_checksum_compute+0xfe>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d018      	beq.n	8009a94 <_nx_ip_checksum_compute+0x15c>
 8009a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d014      	beq.n	8009a94 <_nx_ip_checksum_compute+0x15c>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d10a      	bne.n	8009a8c <_nx_ip_checksum_compute+0x154>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 8009a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a78:	633b      	str	r3, [r7, #48]	; 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a82:	4413      	add	r3, r2
 8009a84:	637b      	str	r3, [r7, #52]	; 0x34
                data_length -= 2;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	3b02      	subs	r3, #2
 8009a8a:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a92:	e001      	b.n	8009a98 <_nx_ip_checksum_compute+0x160>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 8009a94:	2300      	movs	r3, #0
 8009a96:	62bb      	str	r3, [r7, #40]	; 0x28
    while (current_packet)
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1a3      	bne.n	80099e6 <_nx_ip_checksum_compute+0xae>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d01f      	beq.n	8009ae4 <_nx_ip_checksum_compute+0x1ac>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 8009aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the data length.  */
        if (data_length == 1)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d104      	bne.n	8009ab8 <_nx_ip_checksum_compute+0x180>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	e00f      	b.n	8009ad8 <_nx_ip_checksum_compute+0x1a0>
        }
        else if (data_length == 3)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d10c      	bne.n	8009ad8 <_nx_ip_checksum_compute+0x1a0>
        {
            checksum += *short_ptr;
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac6:	4413      	add	r3, r2
 8009ac8:	637b      	str	r3, [r7, #52]	; 0x34
            short_ptr++;
 8009aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009acc:	3302      	adds	r3, #2
 8009ace:	633b      	str	r3, [r7, #48]	; 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	461a      	mov	r2, r3
 8009ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae0:	4413      	add	r3, r2
 8009ae2:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8009ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae6:	0c1a      	lsrs	r2, r3, #16
 8009ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	4413      	add	r3, r2
 8009aee:	637b      	str	r3, [r7, #52]	; 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8009af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af2:	0c1a      	lsrs	r2, r3, #16
 8009af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	4413      	add	r3, r2
 8009afa:	637b      	str	r3, [r7, #52]	; 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 8009afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afe:	837b      	strh	r3, [r7, #26]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 8009b00:	8b7b      	ldrh	r3, [r7, #26]
 8009b02:	ba5b      	rev16	r3, r3
 8009b04:	837b      	strh	r3, [r7, #26]

    /* Return the computed checksum.  */
    return(tmp);
 8009b06:	8b7b      	ldrh	r3, [r7, #26]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3738      	adds	r7, #56	; 0x38
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b092      	sub	sp, #72	; 0x48
 8009b14:	af06      	add	r7, sp, #24
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8009b22:	4b87      	ldr	r3, [pc, #540]	; (8009d40 <_nx_ip_create+0x230>)
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	4b87      	ldr	r3, [pc, #540]	; (8009d44 <_nx_ip_create+0x234>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	4b86      	ldr	r3, [pc, #536]	; (8009d48 <_nx_ip_create+0x238>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8009b32:	4b86      	ldr	r3, [pc, #536]	; (8009d4c <_nx_ip_create+0x23c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8009b36:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8009b38:	4b85      	ldr	r3, [pc, #532]	; (8009d50 <_nx_ip_create+0x240>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	4a85      	ldr	r2, [pc, #532]	; (8009d54 <_nx_ip_create+0x244>)
 8009b40:	7812      	ldrb	r2, [r2, #0]
 8009b42:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 8009b48:	234a      	movs	r3, #74	; 0x4a
 8009b4a:	e0f5      	b.n	8009d38 <_nx_ip_create+0x228>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 8009b4c:	f240 72bc 	movw	r2, #1980	; 0x7bc
 8009b50:	2100      	movs	r1, #0
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f009 f9a4 	bl	8012ea0 <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	f8c3 2730 	str.w	r2, [r3, #1840]	; 0x730

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	401a      	ands	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f8c3 2738 	str.w	r2, [r3, #1848]	; 0x738

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b88:	f8c3 2758 	str.w	r2, [r3, #1880]	; 0x758

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4a72      	ldr	r2, [pc, #456]	; (8009d58 <_nx_ip_create+0x248>)
 8009b90:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8009b94:	2300      	movs	r3, #0
 8009b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b98:	e00e      	b.n	8009bb8 <_nx_ip_create+0xa8>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 8009b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9c:	b2d8      	uxtb	r0, r3
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba2:	214c      	movs	r1, #76	; 0x4c
 8009ba4:	fb01 f303 	mul.w	r3, r1, r3
 8009ba8:	4413      	add	r3, r2
 8009baa:	f203 7323 	addw	r3, r3, #1827	; 0x723
 8009bae:	4602      	mov	r2, r0
 8009bb0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8009bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d9ed      	bls.n	8009b9a <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	4a66      	ldr	r2, [pc, #408]	; (8009d5c <_nx_ip_create+0x24c>)
 8009bc2:	f8c3 2768 	str.w	r2, [r3, #1896]	; 0x768


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4a63      	ldr	r2, [pc, #396]	; (8009d60 <_nx_ip_create+0x250>)
 8009bd2:	f8c3 277c 	str.w	r2, [r3, #1916]	; 0x77c
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8009bdc:	f8c3 2780 	str.w	r2, [r3, #1920]	; 0x780
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f04f 42fe 	mov.w	r2, #2130706432	; 0x7f000000
 8009be6:	f8c3 2784 	str.w	r2, [r3, #1924]	; 0x784
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 276d 	strb.w	r2, [r3, #1901]	; 0x76d

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c00:	f8c3 278c 	str.w	r2, [r3, #1932]	; 0x78c

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c1e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009c28:	2200      	movs	r2, #0
 8009c2a:	68b9      	ldr	r1, [r7, #8]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f005 fd1d 	bl	800f66c <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009c38:	68b9      	ldr	r1, [r7, #8]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f005 f8a6 	bl	800ed8c <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8009c40:	f006 fdbe 	bl	80107c0 <_tx_thread_identify>
 8009c44:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d006      	beq.n	8009c5a <_nx_ip_create+0x14a>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 8009c4c:	f107 0310 	add.w	r3, r7, #16
 8009c50:	461a      	mov	r2, r3
 8009c52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c56:	f006 fe0d 	bl	8010874 <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	2301      	movs	r3, #1
 8009c64:	9305      	str	r3, [sp, #20]
 8009c66:	2301      	movs	r3, #1
 8009c68:	9304      	str	r3, [sp, #16]
 8009c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c6c:	9303      	str	r3, [sp, #12]
 8009c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c70:	9302      	str	r3, [sp, #8]
 8009c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c74:	9301      	str	r3, [sp, #4]
 8009c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	4a39      	ldr	r2, [pc, #228]	; (8009d64 <_nx_ip_create+0x254>)
 8009c7e:	68b9      	ldr	r1, [r7, #8]
 8009c80:	f006 fc4e 	bl	8010520 <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	9202      	str	r2, [sp, #8]
 8009c90:	2264      	movs	r2, #100	; 0x64
 8009c92:	9201      	str	r2, [sp, #4]
 8009c94:	2264      	movs	r2, #100	; 0x64
 8009c96:	9200      	str	r2, [sp, #0]
 8009c98:	4a33      	ldr	r2, [pc, #204]	; (8009d68 <_nx_ip_create+0x258>)
 8009c9a:	68b9      	ldr	r1, [r7, #8]
 8009c9c:	f007 fb6c 	bl	8011378 <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4a32      	ldr	r2, [pc, #200]	; (8009d6c <_nx_ip_create+0x25c>)
 8009ca4:	f8c3 27b4 	str.w	r2, [r3, #1972]	; 0x7b4
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8009cac:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009cae:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009cb0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009cb2:	b672      	cpsid	i
    return(int_posture);
 8009cb4:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 8009cb6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	4a2d      	ldr	r2, [pc, #180]	; (8009d70 <_nx_ip_create+0x260>)
 8009cbc:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 8009cbe:	4b2d      	ldr	r3, [pc, #180]	; (8009d74 <_nx_ip_create+0x264>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d017      	beq.n	8009cf6 <_nx_ip_create+0x1e6>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 8009cc6:	4b2b      	ldr	r3, [pc, #172]	; (8009d74 <_nx_ip_create+0x264>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 8009cce:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 8009cd0:	4b28      	ldr	r3, [pc, #160]	; (8009d74 <_nx_ip_create+0x264>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6a3a      	ldr	r2, [r7, #32]
 8009ce6:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 8009cea:	4b22      	ldr	r3, [pc, #136]	; (8009d74 <_nx_ip_create+0x264>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
 8009cf4:	e00a      	b.n	8009d0c <_nx_ip_create+0x1fc>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 8009cf6:	4a1f      	ldr	r2, [pc, #124]	; (8009d74 <_nx_ip_create+0x264>)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 8009d0c:	4b1a      	ldr	r3, [pc, #104]	; (8009d78 <_nx_ip_create+0x268>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3301      	adds	r3, #1
 8009d12:	4a19      	ldr	r2, [pc, #100]	; (8009d78 <_nx_ip_create+0x268>)
 8009d14:	6013      	str	r3, [r2, #0]
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f383 8810 	msr	PRIMASK, r3
}
 8009d20:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 8009d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d006      	beq.n	8009d36 <_nx_ip_create+0x226>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f107 0210 	add.w	r2, r7, #16
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d32:	f006 fd9f 	bl	8010874 <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3730      	adds	r7, #48	; 0x30
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	2000814c 	.word	0x2000814c
 8009d44:	20008150 	.word	0x20008150
 8009d48:	20008154 	.word	0x20008154
 8009d4c:	20008158 	.word	0x20008158
 8009d50:	2000815c 	.word	0x2000815c
 8009d54:	20000024 	.word	0x20000024
 8009d58:	080140b8 	.word	0x080140b8
 8009d5c:	080140bc 	.word	0x080140bc
 8009d60:	7f000001 	.word	0x7f000001
 8009d64:	0800b071 	.word	0x0800b071
 8009d68:	0800ad53 	.word	0x0800ad53
 8009d6c:	0800b609 	.word	0x0800b609
 8009d70:	49502020 	.word	0x49502020
 8009d74:	2000813c 	.word	0x2000813c
 8009d78:	20008140 	.word	0x20008140

08009d7c <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08c      	sub	sp, #48	; 0x30
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 37b8 	ldr.w	r3, [r3, #1976]	; 0x7b8
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d04e      	beq.n	8009e2c <_nx_ip_deferred_link_status_process+0xb0>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009d8e:	2300      	movs	r3, #0
 8009d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d92:	e047      	b.n	8009e24 <_nx_ip_deferred_link_status_process+0xa8>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	214c      	movs	r1, #76	; 0x4c
 8009d9a:	fb01 f303 	mul.w	r3, r1, r3
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d039      	beq.n	8009e1e <_nx_ip_deferred_link_status_process+0xa2>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dae:	214c      	movs	r1, #76	; 0x4c
 8009db0:	fb01 f303 	mul.w	r3, r1, r3
 8009db4:	4413      	add	r3, r2
 8009db6:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8009dba:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d02e      	beq.n	8009e1e <_nx_ip_deferred_link_status_process+0xa2>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc4:	214c      	movs	r1, #76	; 0x4c
 8009dc6:	fb01 f303 	mul.w	r3, r1, r3
 8009dca:	4413      	add	r3, r2
 8009dcc:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	627b      	str	r3, [r7, #36]	; 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 8009dd8:	230a      	movs	r3, #10
 8009dda:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dde:	224c      	movs	r2, #76	; 0x4c
 8009de0:	fb02 f303 	mul.w	r3, r2, r3
 8009de4:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	4413      	add	r3, r2
 8009dec:	3304      	adds	r3, #4
 8009dee:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 8009df0:	f107 0308 	add.w	r3, r7, #8
 8009df4:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfa:	214c      	movs	r1, #76	; 0x4c
 8009dfc:	fb01 f303 	mul.w	r3, r1, r3
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f107 020c 	add.w	r2, r7, #12
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 37b8 	ldr.w	r3, [r3, #1976]	; 0x7b8
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	3301      	adds	r3, #1
 8009e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d0b4      	beq.n	8009d94 <_nx_ip_deferred_link_status_process+0x18>
 8009e2a:	e000      	b.n	8009e2e <_nx_ip_deferred_link_status_process+0xb2>
        return;
 8009e2c:	bf00      	nop
        }
    }
}
 8009e2e:	3730      	adds	r7, #48	; 0x30
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <_nx_ip_dispatch_process>:
/*                                            packet,                     */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 8009e44:	e09a      	b.n	8009f7c <_nx_ip_dispatch_process+0x148>

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b32      	cmp	r3, #50	; 0x32
 8009e4a:	d005      	beq.n	8009e58 <_nx_ip_dispatch_process+0x24>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b33      	cmp	r3, #51	; 0x33
 8009e50:	d104      	bne.n	8009e5c <_nx_ip_dispatch_process+0x28>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 8009e52:	2301      	movs	r3, #1
 8009e54:	617b      	str	r3, [r7, #20]
#endif /* NX_IPSEC_ENABLE */

            break;
 8009e56:	e07d      	b.n	8009f54 <_nx_ip_dispatch_process+0x120>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e094      	b.n	8009f86 <_nx_ip_dispatch_process+0x152>
                    return(0);
                }
            }
#endif /* defined(NX_ENABLE_IP_RAW_PACKET_ALL_STACK) && defined(NX_ENABLE_IP_RAW_PACKET_FILTER) */

            if (protocol == NX_PROTOCOL_TCP)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b06      	cmp	r3, #6
 8009e60:	d10f      	bne.n	8009e82 <_nx_ip_dispatch_process+0x4e>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d007      	beq.n	8009e7c <_nx_ip_dispatch_process+0x48>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009e72:	68b9      	ldr	r1, [r7, #8]
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 8009e78:	2300      	movs	r3, #0
 8009e7a:	e084      	b.n	8009f86 <_nx_ip_dispatch_process+0x152>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	617b      	str	r3, [r7, #20]
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 8009e80:	e067      	b.n	8009f52 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e88:	2b04      	cmp	r3, #4
 8009e8a:	d112      	bne.n	8009eb2 <_nx_ip_dispatch_process+0x7e>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d10f      	bne.n	8009eb2 <_nx_ip_dispatch_process+0x7e>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d007      	beq.n	8009eac <_nx_ip_dispatch_process+0x78>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8009ea2:	68b9      	ldr	r1, [r7, #8]
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	4798      	blx	r3
                    return(0);
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	e06c      	b.n	8009f86 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8009eac:	2301      	movs	r3, #1
 8009eae:	617b      	str	r3, [r7, #20]
 8009eb0:	e04f      	b.n	8009f52 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d112      	bne.n	8009ee2 <_nx_ip_dispatch_process+0xae>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d10f      	bne.n	8009ee2 <_nx_ip_dispatch_process+0xae>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d007      	beq.n	8009edc <_nx_ip_dispatch_process+0xa8>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8009ed2:	68b9      	ldr	r1, [r7, #8]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	4798      	blx	r3
                    return(0);
 8009ed8:	2300      	movs	r3, #0
 8009eda:	e054      	b.n	8009f86 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8009edc:	2301      	movs	r3, #1
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	e037      	b.n	8009f52 <_nx_ip_dispatch_process+0x11e>
            else if (protocol == NX_PROTOCOL_UDP)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b11      	cmp	r3, #17
 8009ee6:	d10f      	bne.n	8009f08 <_nx_ip_dispatch_process+0xd4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d007      	beq.n	8009f02 <_nx_ip_dispatch_process+0xce>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ef8:	68b9      	ldr	r1, [r7, #8]
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	4798      	blx	r3
                        return(0);
 8009efe:	2300      	movs	r3, #0
 8009f00:	e041      	b.n	8009f86 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8009f02:	2301      	movs	r3, #1
 8009f04:	617b      	str	r3, [r7, #20]
            break;
 8009f06:	e024      	b.n	8009f52 <_nx_ip_dispatch_process+0x11e>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00c      	beq.n	8009f2c <_nx_ip_dispatch_process+0xf8>
                        if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	0411      	lsls	r1, r2, #16
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	4798      	blx	r3
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d101      	bne.n	8009f2c <_nx_ip_dispatch_process+0xf8>
                            return(0);
 8009f28:	2300      	movs	r3, #0
 8009f2a:	e02c      	b.n	8009f86 <_nx_ip_dispatch_process+0x152>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d105      	bne.n	8009f42 <_nx_ip_dispatch_process+0x10e>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 8009f36:	2300      	movs	r3, #0
 8009f38:	4a15      	ldr	r2, [pc, #84]	; (8009f90 <_nx_ip_dispatch_process+0x15c>)
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f7ff fb43 	bl	80095c8 <_nx_icmpv4_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	641a      	str	r2, [r3, #64]	; 0x40
                drop_packet = 1;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	617b      	str	r3, [r7, #20]
            break;
 8009f50:	e7ff      	b.n	8009f52 <_nx_ip_dispatch_process+0x11e>
 8009f52:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d010      	beq.n	8009f7c <_nx_ip_dispatch_process+0x148>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	1e5a      	subs	r2, r3, #1
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	621a      	str	r2, [r3, #32]

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6c:	1ad2      	subs	r2, r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	625a      	str	r2, [r3, #36]	; 0x24

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f76:	1c5a      	adds	r2, r3, #1
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	64da      	str	r2, [r3, #76]	; 0x4c
    while (!drop_packet)
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f43f af61 	beq.w	8009e46 <_nx_ip_dispatch_process+0x12>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 8009f84:	697b      	ldr	r3, [r7, #20]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	03020000 	.word	0x03020000

08009f94 <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f005 f81f 	bl	800efec <_tx_event_flags_set>
}
 8009fae:	bf00      	nop
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <_nx_ip_driver_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_driver_direct_command(NX_IP *ip_ptr, UINT command, ULONG *return_value_ptr)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b084      	sub	sp, #16
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	607a      	str	r2, [r7, #4]

    return(_nx_ip_driver_interface_direct_command(ip_ptr, command, 0, return_value_ptr));
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	68b9      	ldr	r1, [r7, #8]
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 f805 	bl	8009fd8 <_nx_ip_driver_interface_direct_command>
 8009fce:	4603      	mov	r3, r0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <_nx_ip_driver_interface_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_driver_interface_direct_command(NX_IP *ip_ptr, UINT command, UINT interface_index, ULONG *return_value_ptr)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b08c      	sub	sp, #48	; 0x30
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_DRIVER_DIRECT_COMMAND, ip_ptr, command, 0, 0, NX_TRACE_IP_EVENTS, &trace_event, &trace_timestamp);

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009fec:	f04f 31ff 	mov.w	r1, #4294967295
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f005 fc3f 	bl	800f874 <_tx_mutex_get>

    /* Build the driver request structure.  */
    driver_request.nx_ip_driver_ptr =         ip_ptr;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =     command;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_return_ptr =  return_value_ptr;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
    driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	224c      	movs	r2, #76	; 0x4c
 800a006:	fb02 f303 	mul.w	r3, r2, r3
 800a00a:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	4413      	add	r3, r2
 800a012:	3304      	adds	r3, #4
 800a014:	62fb      	str	r3, [r7, #44]	; 0x2c
    (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	214c      	movs	r1, #76	; 0x4c
 800a01c:	fb01 f303 	mul.w	r3, r1, r3
 800a020:	4413      	add	r3, r2
 800a022:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f107 0210 	add.w	r2, r7, #16
 800a02c:	4610      	mov	r0, r2
 800a02e:	4798      	blx	r3

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a036:	4618      	mov	r0, r3
 800a038:	f005 fe94 	bl	800fd64 <_tx_mutex_put>
    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_IP_DRIVER_DIRECT_COMMAND, 0, 0, driver_request.nx_ip_driver_status, 0);

    /* Return status to the caller.  */
    /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
    return(driver_request.nx_ip_driver_status);
 800a03c:	697b      	ldr	r3, [r7, #20]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3730      	adds	r7, #48	; 0x30
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b09e      	sub	sp, #120	; 0x78
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	60f8      	str	r0, [r7, #12]
 800a04e:	60b9      	str	r1, [r7, #8]
 800a050:	607a      	str	r2, [r7, #4]
 800a052:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 800a054:	2300      	movs	r3, #0
 800a056:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	633b      	str	r3, [r7, #48]	; 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a066:	637b      	str	r3, [r7, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 800a068:	2300      	movs	r3, #0
 800a06a:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a070:	795b      	ldrb	r3, [r3, #5]
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 8179 	beq.w	800a36a <_nx_ip_driver_packet_send+0x324>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	65fb      	str	r3, [r7, #92]	; 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08e:	d00d      	beq.n	800a0ac <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a094:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800a096:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a098:	429a      	cmp	r2, r3
 800a09a:	d110      	bne.n	800a0be <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 800a09c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a09e:	43da      	mvns	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	401a      	ands	r2, r3
 800a0a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0a6:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d108      	bne.n	800a0be <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 800a0ac:	2304      	movs	r3, #4
 800a0ae:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 800a0b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0b4:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 800a0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a0bc:	e167      	b.n	800a38e <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c2:	695b      	ldr	r3, [r3, #20]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d105      	bne.n	800a0d6 <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a0d4:	e15b      	b.n	800a38e <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a0dc:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800a0e0:	d133      	bne.n	800a14a <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 800a0e6:	e00f      	b.n	800a108 <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 800a0e8:	68f9      	ldr	r1, [r7, #12]
 800a0ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	440b      	add	r3, r1
 800a0f6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d006      	beq.n	800a110 <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 800a102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a104:	3301      	adds	r3, #1
 800a106:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 800a108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a10a:	2b06      	cmp	r3, #6
 800a10c:	d9ec      	bls.n	800a0e8 <_nx_ip_driver_packet_send+0xa2>
 800a10e:	e000      	b.n	800a112 <_nx_ip_driver_packet_send+0xcc>
                    break;
 800a110:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 800a112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a114:	2b06      	cmp	r3, #6
 800a116:	d80e      	bhi.n	800a136 <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 800a118:	68f9      	ldr	r1, [r7, #12]
 800a11a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a11c:	4613      	mov	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4413      	add	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	440b      	add	r3, r1
 800a126:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 800a130:	2301      	movs	r3, #1
 800a132:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 800a136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a13a:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a142:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 800a146:	627b      	str	r3, [r7, #36]	; 0x24
 800a148:	e121      	b.n	800a38e <_nx_ip_driver_packet_send+0x348>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 800a14a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a14e:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	0a1a      	lsrs	r2, r3, #8
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4413      	add	r3, r2
 800a158:	f003 031f 	and.w	r3, r3, #31
 800a15c:	677b      	str	r3, [r7, #116]	; 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a162:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	4413      	add	r3, r2
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 800a16e:	e014      	b.n	800a19a <_nx_ip_driver_packet_send+0x154>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 800a170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a172:	6a1b      	ldr	r3, [r3, #32]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	429a      	cmp	r2, r3
 800a178:	d013      	beq.n	800a1a2 <_nx_ip_driver_packet_send+0x15c>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 800a17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a184:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a190:	429a      	cmp	r2, r3
 800a192:	d102      	bne.n	800a19a <_nx_ip_driver_packet_send+0x154>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 800a194:	2300      	movs	r3, #0
 800a196:	66fb      	str	r3, [r7, #108]	; 0x6c
                    break;
 800a198:	e004      	b.n	800a1a4 <_nx_ip_driver_packet_send+0x15e>
            while (arp_ptr)
 800a19a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1e7      	bne.n	800a170 <_nx_ip_driver_packet_send+0x12a>
 800a1a0:	e000      	b.n	800a1a4 <_nx_ip_driver_packet_send+0x15e>
                    break;
 800a1a2:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 800a1a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d023      	beq.n	800a1f2 <_nx_ip_driver_packet_send+0x1ac>
 800a1aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d01c      	beq.n	800a1f2 <_nx_ip_driver_packet_send+0x1ac>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a1b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a1bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800a1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800a1c0:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800a1c2:	b672      	cpsid	i
    return(int_posture);
 800a1c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 800a1c6:	657b      	str	r3, [r7, #84]	; 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 800a1c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1cc:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 800a1ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d2:	627b      	str	r3, [r7, #36]	; 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1d8:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1e2:	605a      	str	r2, [r3, #4]
 800a1e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1e6:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ea:	f383 8810 	msr	PRIMASK, r3
}
 800a1ee:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 800a1f0:	e0cd      	b.n	800a38e <_nx_ip_driver_packet_send+0x348>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d910      	bls.n	800a222 <_nx_ip_driver_packet_send+0x1dc>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <_nx_ip_driver_packet_send+0x1ca>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d008      	beq.n	800a222 <_nx_ip_driver_packet_send+0x1dc>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	655a      	str	r2, [r3, #84]	; 0x54
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 800a21a:	68b8      	ldr	r0, [r7, #8]
 800a21c:	f002 f98e 	bl	800c53c <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 800a220:	e12c      	b.n	800a47c <_nx_ip_driver_packet_send+0x436>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 800a222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a224:	2b00      	cmp	r3, #0
 800a226:	d052      	beq.n	800a2ce <_nx_ip_driver_packet_send+0x288>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a228:	f3ef 8310 	mrs	r3, PRIMASK
 800a22c:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 800a22e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 800a230:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 800a232:	b672      	cpsid	i
    return(int_posture);
 800a234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 800a236:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2200      	movs	r2, #0
 800a23c:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 800a23e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <_nx_ip_driver_packet_send+0x214>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 800a246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	631a      	str	r2, [r3, #48]	; 0x30
 800a24c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a24e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a252:	f383 8810 	msr	PRIMASK, r3
}
 800a256:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 800a258:	e10f      	b.n	800a47a <_nx_ip_driver_packet_send+0x434>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 800a25a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25e:	66bb      	str	r3, [r7, #104]	; 0x68
                        queued_count = 1;
 800a260:	2301      	movs	r3, #1
 800a262:	663b      	str	r3, [r7, #96]	; 0x60
                        while (last_packet -> nx_packet_queue_next)
 800a264:	e005      	b.n	800a272 <_nx_ip_driver_packet_send+0x22c>
                            queued_count++;
 800a266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a268:	3301      	adds	r3, #1
 800a26a:	663b      	str	r3, [r7, #96]	; 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 800a26c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	66bb      	str	r3, [r7, #104]	; 0x68
                        while (last_packet -> nx_packet_queue_next)
 800a272:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1f5      	bne.n	800a266 <_nx_ip_driver_packet_send+0x220>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 800a27a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 800a280:	2300      	movs	r3, #0
 800a282:	667b      	str	r3, [r7, #100]	; 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 800a284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a286:	2b03      	cmp	r3, #3
 800a288:	d913      	bls.n	800a2b2 <_nx_ip_driver_packet_send+0x26c>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 800a28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28e:	667b      	str	r3, [r7, #100]	; 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 800a290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a292:	69da      	ldr	r2, [r3, #28]
 800a294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a296:	631a      	str	r2, [r3, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 800a298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a29a:	2200      	movs	r2, #0
 800a29c:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a2:	1c5a      	adds	r2, r3, #1
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	645a      	str	r2, [r3, #68]	; 0x44
                            ip_ptr -> nx_ip_send_packets_dropped++;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ac:	1c5a      	adds	r2, r3, #1
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	655a      	str	r2, [r3, #84]	; 0x54
 800a2b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2b4:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b8:	f383 8810 	msr	PRIMASK, r3
}
 800a2bc:	bf00      	nop
                        if (remove_packet)
 800a2be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 80da 	beq.w	800a47a <_nx_ip_driver_packet_send+0x434>
                            _nx_packet_transmit_release(remove_packet);
 800a2c6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a2c8:	f002 f938 	bl	800c53c <_nx_packet_transmit_release>
                return;
 800a2cc:	e0d5      	b.n	800a47a <_nx_ip_driver_packet_send+0x434>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00f      	beq.n	800a2f8 <_nx_ip_driver_packet_send+0x2b2>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 800a2de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a2e0:	f502 72c9 	add.w	r2, r2, #402	; 0x192
 800a2e4:	0092      	lsls	r2, r2, #2
 800a2e6:	68f9      	ldr	r1, [r7, #12]
 800a2e8:	440a      	add	r2, r1
 800a2ea:	1d11      	adds	r1, r2, #4
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	4798      	blx	r3
 800a2f2:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00d      	beq.n	800a314 <_nx_ip_driver_packet_send+0x2ce>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	645a      	str	r2, [r3, #68]	; 0x44
                        ip_ptr -> nx_ip_send_packets_dropped++;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	655a      	str	r2, [r3, #84]	; 0x54
                        _nx_packet_transmit_release(packet_ptr);
 800a30c:	68b8      	ldr	r0, [r7, #8]
 800a30e:	f002 f915 	bl	800c53c <_nx_packet_transmit_release>
                        return;
 800a312:	e0b3      	b.n	800a47c <_nx_ip_driver_packet_send+0x436>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a318:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	699b      	ldr	r3, [r3, #24]
 800a324:	66fb      	str	r3, [r7, #108]	; 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 800a326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 800a32c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a32e:	2200      	movs	r2, #0
 800a330:	625a      	str	r2, [r3, #36]	; 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 800a332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a334:	2200      	movs	r2, #0
 800a336:	629a      	str	r2, [r3, #40]	; 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 800a338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a33a:	220a      	movs	r2, #10
 800a33c:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 800a33e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a340:	2200      	movs	r2, #0
 800a342:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a34a:	62da      	str	r2, [r3, #44]	; 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	2200      	movs	r2, #0
 800a350:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 800a352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	631a      	str	r2, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a362:	6879      	ldr	r1, [r7, #4]
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	4798      	blx	r3
                return;
 800a368:	e087      	b.n	800a47a <_nx_ip_driver_packet_send+0x434>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a370:	d302      	bcc.n	800a378 <_nx_ip_driver_packet_send+0x332>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 800a372:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800a374:	2b00      	cmp	r3, #0
 800a376:	da05      	bge.n	800a384 <_nx_ip_driver_packet_send+0x33e>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37c:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d104      	bne.n	800a38e <_nx_ip_driver_packet_send+0x348>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 800a384:	2301      	movs	r3, #1
 800a386:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 800a38a:	2300      	movs	r3, #0
 800a38c:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 800a38e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800a392:	2b01      	cmp	r3, #1
 800a394:	d129      	bne.n	800a3ea <_nx_ip_driver_packet_send+0x3a4>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800a39c:	f107 0114 	add.w	r1, r7, #20
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	68b8      	ldr	r0, [r7, #8]
 800a3a4:	f001 fc4e 	bl	800bc44 <_nx_packet_copy>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d113      	bne.n	800a3d6 <_nx_ip_driver_packet_send+0x390>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	699a      	ldr	r2, [r3, #24]
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f1a3 0214 	sub.w	r2, r3, #20
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	619a      	str	r2, [r3, #24]
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f000 fbd7 	bl	800ab82 <_nx_ip_packet_deferred_receive>
 800a3d4:	e009      	b.n	800a3ea <_nx_ip_driver_packet_send+0x3a4>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3da:	1c5a      	adds	r2, r3, #1
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	655a      	str	r2, [r3, #84]	; 0x54

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e4:	1c5a      	adds	r2, r3, #1
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	645a      	str	r2, [r3, #68]	; 0x44
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d040      	beq.n	800a472 <_nx_ip_driver_packet_send+0x42c>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d919      	bls.n	800a432 <_nx_ip_driver_packet_send+0x3ec>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00b      	beq.n	800a420 <_nx_ip_driver_packet_send+0x3da>
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a40e:	d007      	beq.n	800a420 <_nx_ip_driver_packet_send+0x3da>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a416:	f107 0218 	add.w	r2, r7, #24
 800a41a:	4610      	mov	r0, r2
 800a41c:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 800a41e:	e02d      	b.n	800a47c <_nx_ip_driver_packet_send+0x436>
                ip_ptr -> nx_ip_send_packets_dropped++;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	655a      	str	r2, [r3, #84]	; 0x54
                _nx_packet_transmit_release(packet_ptr);
 800a42a:	68b8      	ldr	r0, [r7, #8]
 800a42c:	f002 f886 	bl	800c53c <_nx_packet_transmit_release>
            return;
 800a430:	e024      	b.n	800a47c <_nx_ip_driver_packet_send+0x436>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	615a      	str	r2, [r3, #20]

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	699a      	ldr	r2, [r3, #24]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	4413      	add	r3, r2
 800a446:	f1a3 0214 	sub.w	r2, r3, #20
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	619a      	str	r2, [r3, #24]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a454:	2b00      	cmp	r3, #0
 800a456:	d104      	bne.n	800a462 <_nx_ip_driver_packet_send+0x41c>
 800a458:	f04f 30ff 	mov.w	r0, #4294967295
 800a45c:	f006 fb90 	bl	8010b80 <_tx_thread_sleep>
 800a460:	e7fa      	b.n	800a458 <_nx_ip_driver_packet_send+0x412>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a468:	f107 0218 	add.w	r2, r7, #24
 800a46c:	4610      	mov	r0, r2
 800a46e:	4798      	blx	r3
 800a470:	e004      	b.n	800a47c <_nx_ip_driver_packet_send+0x436>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 800a472:	68b8      	ldr	r0, [r7, #8]
 800a474:	f002 f862 	bl	800c53c <_nx_packet_transmit_release>
 800a478:	e000      	b.n	800a47c <_nx_ip_driver_packet_send+0x436>
                return;
 800a47a:	bf00      	nop
    }
}
 800a47c:	3778      	adds	r7, #120	; 0x78
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <_nx_ip_gateway_address_clear>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_clear(NX_IP *ip_ptr)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b086      	sub	sp, #24
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, 0, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be cleared.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a490:	f04f 31ff 	mov.w	r1, #4294967295
 800a494:	4618      	mov	r0, r3
 800a496:	f005 f9ed 	bl	800f874 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a49a:	f3ef 8310 	mrs	r3, PRIMASK
 800a49e:	60fb      	str	r3, [r7, #12]
    return(posture);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800a4a2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a4a4:	b672      	cpsid	i
    return(int_posture);
 800a4a6:	68bb      	ldr	r3, [r7, #8]

    /* Disable interrupts.  */
    TX_DISABLE
 800a4a8:	617b      	str	r3, [r7, #20]

    /* Clear the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  0;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	609a      	str	r2, [r3, #8]

    ip_ptr -> nx_ip_gateway_interface = NX_NULL;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	60da      	str	r2, [r3, #12]
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	f383 8810 	msr	PRIMASK, r3
}
 800a4c0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f005 fc4b 	bl	800fd64 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 800a4ce:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3718      	adds	r7, #24
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <_nx_ip_gateway_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_get(NX_IP *ip_ptr, ULONG *ip_address)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
UINT status;


    /* Initialize the return value to be NX_NOT_FOUND.  If the gateway address
       is set, the return value changes to NX_SUCCESS. */
    status = NX_NOT_FOUND;
 800a4e2:	234e      	movs	r3, #78	; 0x4e
 800a4e4:	60fb      	str	r3, [r7, #12]

    /* Obtain the IP internal mutex to get the Gateway IP address.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a4ec:	f04f 31ff 	mov.w	r1, #4294967295
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f005 f9bf 	bl	800f874 <_tx_mutex_get>

    if (ip_ptr -> nx_ip_gateway_address)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d005      	beq.n	800a50a <_nx_ip_gateway_address_get+0x32>
    {

        /* Setup the Gateway IP address.  */
        *ip_address = ip_ptr -> nx_ip_gateway_address;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	689a      	ldr	r2, [r3, #8]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	601a      	str	r2, [r3, #0]

        status = NX_SUCCESS;
 800a506:	2300      	movs	r3, #0
 800a508:	60fb      	str	r3, [r7, #12]
    }

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a510:	4618      	mov	r0, r3
 800a512:	f005 fc27 	bl	800fd64 <_tx_mutex_put>

    /* Return completion status.  */
    return(status);
 800a516:	68fb      	ldr	r3, [r7, #12]
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <_nx_ip_gateway_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_set(NX_IP *ip_ptr, ULONG ip_address)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]

#ifndef NX_DISABLE_IPV4
INT           i;
TX_INTERRUPT_SAVE_AREA

NX_INTERFACE *ip_interface_ptr = NX_NULL;
 800a52a:	2300      	movs	r3, #0
 800a52c:	61bb      	str	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, ip_address, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be setup.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a534:	f04f 31ff 	mov.w	r1, #4294967295
 800a538:	4618      	mov	r0, r3
 800a53a:	f005 f99b 	bl	800f874 <_tx_mutex_get>

    /* Loop through all the interfaces to find the one for the input gateway address. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a53e:	2300      	movs	r3, #0
 800a540:	61fb      	str	r3, [r7, #28]
 800a542:	e02e      	b.n	800a5a2 <_nx_ip_gateway_address_set+0x82>
    {

        /* Must be a valid interface. Match the network subnet of the interface and input address. */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	214c      	movs	r1, #76	; 0x4c
 800a54a:	fb01 f303 	mul.w	r3, r1, r3
 800a54e:	4413      	add	r3, r2
 800a550:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d020      	beq.n	800a59c <_nx_ip_gateway_address_set+0x7c>
            ((ip_address & (ip_ptr -> nx_ip_interface[i].nx_interface_ip_network_mask)) ==
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	214c      	movs	r1, #76	; 0x4c
 800a560:	fb01 f303 	mul.w	r3, r1, r3
 800a564:	4413      	add	r3, r2
 800a566:	f203 7334 	addw	r3, r3, #1844	; 0x734
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	401a      	ands	r2, r3
             ip_ptr -> nx_ip_interface[i].nx_interface_ip_network))
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	204c      	movs	r0, #76	; 0x4c
 800a576:	fb00 f303 	mul.w	r3, r0, r3
 800a57a:	440b      	add	r3, r1
 800a57c:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 800a580:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800a582:	429a      	cmp	r2, r3
 800a584:	d10a      	bne.n	800a59c <_nx_ip_gateway_address_set+0x7c>
        {

            /* This is the interface for the gateway.  */
            ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	224c      	movs	r2, #76	; 0x4c
 800a58a:	fb02 f303 	mul.w	r3, r2, r3
 800a58e:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	4413      	add	r3, r2
 800a596:	3304      	adds	r3, #4
 800a598:	61bb      	str	r3, [r7, #24]

            /* Break out of the search. */
            break;
 800a59a:	e005      	b.n	800a5a8 <_nx_ip_gateway_address_set+0x88>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	61fb      	str	r3, [r7, #28]
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	ddcd      	ble.n	800a544 <_nx_ip_gateway_address_set+0x24>
        }
    }

    /* Check if we found an interface. */
    if (ip_interface_ptr == NX_NULL)
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d107      	bne.n	800a5be <_nx_ip_gateway_address_set+0x9e>
    {

        /* None found. Unlock the mutex, and return the error status. */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f005 fbd5 	bl	800fd64 <_tx_mutex_put>

        return(NX_IP_ADDRESS_ERROR);
 800a5ba:	2321      	movs	r3, #33	; 0x21
 800a5bc:	e01a      	b.n	800a5f4 <_nx_ip_gateway_address_set+0xd4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a5be:	f3ef 8310 	mrs	r3, PRIMASK
 800a5c2:	60fb      	str	r3, [r7, #12]
    return(posture);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800a5c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a5c8:	b672      	cpsid	i
    return(int_posture);
 800a5ca:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800a5cc:	617b      	str	r3, [r7, #20]

    /* Setup the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  ip_address;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	609a      	str	r2, [r3, #8]

    ip_ptr -> nx_ip_gateway_interface = ip_interface_ptr;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	69ba      	ldr	r2, [r7, #24]
 800a5d8:	60da      	str	r2, [r3, #12]
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	f383 8810 	msr	PRIMASK, r3
}
 800a5e4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f005 fbb9 	bl	800fd64 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 800a5f2:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3720      	adds	r7, #32
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <_nx_ip_header_add>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG source_ip, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08a      	sub	sp, #40	; 0x28
 800a600:	af02      	add	r7, sp, #8
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	61fb      	str	r3, [r7, #28]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a614:	d106      	bne.n	800a624 <_nx_ip_header_add+0x28>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d101      	bne.n	800a624 <_nx_ip_header_add+0x28>
    {
        router_alert = 4;
 800a620:	2304      	movs	r3, #4
 800a622:	61fb      	str	r3, [r7, #28]
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	69f9      	ldr	r1, [r7, #28]
 800a62a:	f06f 0313 	mvn.w	r3, #19
 800a62e:	1a5b      	subs	r3, r3, r1
 800a630:	441a      	add	r2, r3
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	4413      	add	r3, r2
 800a63e:	f103 0214 	add.w	r2, r3, #20
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	625a      	str	r2, [r3, #36]	; 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	689a      	ldr	r2, [r3, #8]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d204      	bcs.n	800a65c <_nx_ip_header_add+0x60>
 800a652:	f04f 30ff 	mov.w	r0, #4294967295
 800a656:	f006 fa93 	bl	8010b80 <_tx_thread_sleep>
 800a65a:	e7fa      	b.n	800a652 <_nx_ip_header_add+0x56>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	61bb      	str	r3, [r7, #24]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	689a      	ldr	r2, [r3, #8]
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	635a      	str	r2, [r3, #52]	; 0x34
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	4413      	add	r3, r2
 800a676:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800a678:	3314      	adds	r3, #20
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d101      	bne.n	800a690 <_nx_ip_header_add+0x94>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 800a68c:	2300      	movs	r3, #0
 800a68e:	e076      	b.n	800a77e <_nx_ip_header_add+0x182>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d009      	beq.n	800a6aa <_nx_ip_header_add+0xae>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69a:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 800a69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	f043 428c 	orr.w	r2, r3, #1174405120	; 0x46000000
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	601a      	str	r2, [r3, #0]
 800a6a8:	e008      	b.n	800a6bc <_nx_ip_header_add+0xc0>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a6c2:	1c59      	adds	r1, r3, #1
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 800a6ca:	041a      	lsls	r2, r3, #16
 800a6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ce:	431a      	orrs	r2, r3
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 800a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d6:	061a      	lsls	r2, r3, #24
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6da:	431a      	orrs	r2, r3
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  source_ip;
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d004      	beq.n	800a6fc <_nx_ip_header_add+0x100>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	3314      	adds	r3, #20
 800a6f8:	4a23      	ldr	r2, [pc, #140]	; (800a788 <_nx_ip_header_add+0x18c>)
 800a6fa:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	ba1a      	rev	r2, r3
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	ba1a      	rev	r2, r3
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	ba1a      	rev	r2, r3
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	ba1a      	rev	r2, r3
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	ba1a      	rev	r2, r3
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d008      	beq.n	800a746 <_nx_ip_header_add+0x14a>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	3314      	adds	r3, #20
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	3314      	adds	r3, #20
 800a742:	ba12      	rev	r2, r2
 800a744:	601a      	str	r2, [r3, #0]
    if (compute_checksum)
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800a74c:	2300      	movs	r3, #0
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	2300      	movs	r3, #0
 800a752:	2104      	movs	r1, #4
 800a754:	68b8      	ldr	r0, [r7, #8]
 800a756:	f7ff f8ef 	bl	8009938 <_nx_ip_checksum_compute>
 800a75a:	4603      	mov	r3, r0
 800a75c:	617b      	str	r3, [r7, #20]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	43db      	mvns	r3, r3
 800a762:	613b      	str	r3, [r7, #16]
        val = val & NX_LOWER_16_MASK;
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	b29b      	uxth	r3, r3
 800a768:	613b      	str	r3, [r7, #16]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	ba1b      	rev	r3, r3
 800a76e:	613b      	str	r3, [r7, #16]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	431a      	orrs	r2, r3
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3720      	adds	r7, #32
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	94040000 	.word	0x94040000

0800a78c <_nx_ip_interface_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_get(NX_IP *ip_ptr, UINT interface_index, ULONG *ip_address, ULONG *network_mask)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	603b      	str	r3, [r7, #0]
                            ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);



    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a7a0:	f04f 31ff 	mov.w	r1, #4294967295
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f005 f865 	bl	800f874 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a7aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a7ae:	617b      	str	r3, [r7, #20]
    return(posture);
 800a7b0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a7b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a7b4:	b672      	cpsid	i
    return(int_posture);
 800a7b6:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800a7b8:	61fb      	str	r3, [r7, #28]


    /* Pickup the IP address and the network mask. */
    *ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	214c      	movs	r1, #76	; 0x4c
 800a7c0:	fb01 f303 	mul.w	r3, r1, r3
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	214c      	movs	r1, #76	; 0x4c
 800a7d6:	fb01 f303 	mul.w	r3, r1, r3
 800a7da:	4413      	add	r3, r2
 800a7dc:	f203 7334 	addw	r3, r3, #1844	; 0x734
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	f383 8810 	msr	PRIMASK, r3
}
 800a7f0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f005 fab3 	bl	800fd64 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 800a7fe:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a800:	4618      	mov	r0, r3
 800a802:	3720      	adds	r7, #32
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <_nx_ip_interface_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_set(NX_IP *ip_ptr, UINT interface_index, ULONG ip_address, ULONG network_mask)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08c      	sub	sp, #48	; 0x30
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
 800a814:	603b      	str	r3, [r7, #0]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_SET, ip_ptr, ip_address, network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);


    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a81c:	f04f 31ff 	mov.w	r1, #4294967295
 800a820:	4618      	mov	r0, r3
 800a822:	f005 f827 	bl	800f874 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a826:	f3ef 8310 	mrs	r3, PRIMASK
 800a82a:	617b      	str	r3, [r7, #20]
    return(posture);
 800a82c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a82e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a830:	b672      	cpsid	i
    return(int_posture);
 800a832:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800a834:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Save previous IP address and network mask.  */
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	214c      	movs	r1, #76	; 0x4c
 800a83c:	fb01 f303 	mul.w	r3, r1, r3
 800a840:	4413      	add	r3, r2
 800a842:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	62bb      	str	r3, [r7, #40]	; 0x28
    previous_network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	214c      	movs	r1, #76	; 0x4c
 800a850:	fb01 f303 	mul.w	r3, r1, r3
 800a854:	4413      	add	r3, r2
 800a856:	f203 7334 	addw	r3, r3, #1844	; 0x734
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the current notification callback and additional information pointers.  */
    address_change_notify =  ip_ptr -> nx_ip_address_change_notify;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a864:	623b      	str	r3, [r7, #32]
    additional_info =        ip_ptr -> nx_ip_address_change_notify_additional_info;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a86c:	61fb      	str	r3, [r7, #28]

    /* Setup the IP address and the network mask. */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address      =  ip_address;
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	214c      	movs	r1, #76	; 0x4c
 800a874:	fb01 f303 	mul.w	r3, r1, r3
 800a878:	4413      	add	r3, r2
 800a87a:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask =  network_mask;
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	214c      	movs	r1, #76	; 0x4c
 800a888:	fb01 f303 	mul.w	r3, r1, r3
 800a88c:	4413      	add	r3, r2
 800a88e:	f203 7334 	addw	r3, r3, #1844	; 0x734
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network      =  ip_address & network_mask;
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	401a      	ands	r2, r3
 800a89c:	68f9      	ldr	r1, [r7, #12]
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	204c      	movs	r0, #76	; 0x4c
 800a8a2:	fb00 f303 	mul.w	r3, r0, r3
 800a8a6:	440b      	add	r3, r1
 800a8a8:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 800a8ac:	601a      	str	r2, [r3, #0]

    /* Ensure the RARP function is disabled.  */
    ip_ptr -> nx_ip_rarp_periodic_update =  NX_NULL;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
    ip_ptr -> nx_ip_rarp_queue_process =    NX_NULL;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
 800a8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	f383 8810 	msr	PRIMASK, r3
}
 800a8c8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f005 fa47 	bl	800fd64 <_tx_mutex_put>

    /* Determine if the application should be notified of the IP address and/or
       network mask change.  */
    if ((address_change_notify) &&
 800a8d6:	6a3b      	ldr	r3, [r7, #32]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00b      	beq.n	800a8f4 <_nx_ip_interface_address_set+0xec>
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d103      	bne.n	800a8ec <_nx_ip_interface_address_set+0xe4>
        ((ip_address != previous_ip_address) || (network_mask != previous_network_mask)))
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d003      	beq.n	800a8f4 <_nx_ip_interface_address_set+0xec>
    {

        /* Yes, call the application's IP address change notify function.  */
        (address_change_notify)(ip_ptr, additional_info);
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
 800a8ee:	69f9      	ldr	r1, [r7, #28]
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	4798      	blx	r3
    }

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_arp_defend_timeout = 0;
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	214c      	movs	r1, #76	; 0x4c
 800a8fa:	fb01 f303 	mul.w	r3, r1, r3
 800a8fe:	4413      	add	r3, r2
 800a900:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800a904:	2200      	movs	r2, #0
 800a906:	601a      	str	r2, [r3, #0]

    /* Return completion status.  */
    return(NX_SUCCESS);
 800a908:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3730      	adds	r7, #48	; 0x30
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <_nx_ip_interface_status_check>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_status_check(NX_IP *ip_ptr, UINT interface_index, ULONG needed_status,
                                    ULONG *actual_status, ULONG wait_option)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b08e      	sub	sp, #56	; 0x38
 800a916:	af00      	add	r7, sp, #0
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	60b9      	str	r1, [r7, #8]
 800a91c:	607a      	str	r2, [r7, #4]
 800a91e:	603b      	str	r3, [r7, #0]
    /* Loop to keep checking for the proper status bits.  */
    for (;;)
    {

        /* Clear the current status.  */
        current_status =  0;
 800a920:	2300      	movs	r3, #0
 800a922:	637b      	str	r3, [r7, #52]	; 0x34

        /*  Process according to the status option specified.  */

        if (needed_status & NX_IP_INITIALIZE_DONE)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d008      	beq.n	800a940 <_nx_ip_interface_status_check+0x2e>
        {

            /* Check for initialization complete.  */
            if (ip_ptr -> nx_ip_initialize_done)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800a934:	2b00      	cmp	r3, #0
 800a936:	d003      	beq.n	800a940 <_nx_ip_interface_status_check+0x2e>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_INITIALIZE_DONE;
 800a938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a93a:	f043 0301 	orr.w	r3, r3, #1
 800a93e:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

#ifndef NX_DISABLE_IPV4
        if (needed_status & NX_IP_ADDRESS_RESOLVED)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f003 0302 	and.w	r3, r3, #2
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00e      	beq.n	800a968 <_nx_ip_interface_status_check+0x56>
        {

            /* Check for a non-zero IP address.  */
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	214c      	movs	r1, #76	; 0x4c
 800a950:	fb01 f303 	mul.w	r3, r1, r3
 800a954:	4413      	add	r3, r2
 800a956:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d003      	beq.n	800a968 <_nx_ip_interface_status_check+0x56>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_ADDRESS_RESOLVED;
 800a960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a962:	f043 0302 	orr.w	r3, r3, #2
 800a966:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_ARP_ENABLED)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f003 0308 	and.w	r3, r3, #8
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d008      	beq.n	800a984 <_nx_ip_interface_status_check+0x72>
        {

            /* Check for ARP being enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d003      	beq.n	800a984 <_nx_ip_interface_status_check+0x72>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_ARP_ENABLED;
 800a97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a97e:	f043 0308 	orr.w	r3, r3, #8
 800a982:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_RARP_COMPLETE)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00e      	beq.n	800a9ac <_nx_ip_interface_status_check+0x9a>
        {

            /* This is effectively the same as the IP address resolved...  */

            /* Check for a non-zero IP address.  */
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	214c      	movs	r1, #76	; 0x4c
 800a994:	fb01 f303 	mul.w	r3, r1, r3
 800a998:	4413      	add	r3, r2
 800a99a:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d003      	beq.n	800a9ac <_nx_ip_interface_status_check+0x9a>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_RARP_COMPLETE;
 800a9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9aa:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_IGMP_ENABLED)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d008      	beq.n	800a9c8 <_nx_ip_interface_status_check+0xb6>
        {

            /* Check for IGMP being enabled.  */
            if (ip_ptr -> nx_ip_igmp_packet_receive)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d003      	beq.n	800a9c8 <_nx_ip_interface_status_check+0xb6>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_IGMP_ENABLED;
 800a9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c6:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        if (needed_status & NX_IP_LINK_ENABLED)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f003 0304 	and.w	r3, r3, #4
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d048      	beq.n	800aa64 <_nx_ip_interface_status_check+0x152>
        {

            /* Get mutex protection.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a9d8:	f04f 31ff 	mov.w	r1, #4294967295
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f004 ff49 	bl	800f874 <_tx_mutex_get>

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 800a9e6:	230a      	movs	r3, #10
 800a9e8:	617b      	str	r3, [r7, #20]
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 800a9ea:	f107 0310 	add.w	r3, r7, #16
 800a9ee:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	224c      	movs	r2, #76	; 0x4c
 800a9f4:	fb02 f303 	mul.w	r3, r2, r3
 800a9f8:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	3304      	adds	r3, #4
 800aa02:	633b      	str	r3, [r7, #48]	; 0x30

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_GET_STATUS, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Call link level driver.  */
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	214c      	movs	r1, #76	; 0x4c
 800aa0a:	fb01 f303 	mul.w	r3, r1, r3
 800aa0e:	4413      	add	r3, r2
 800aa10:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f107 0214 	add.w	r2, r7, #20
 800aa1a:	4610      	mov	r0, r2
 800aa1c:	4798      	blx	r3

            /* If the driver does not recognize this keyword, we fall back to reading the IP link status.*/
            /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d012      	beq.n	800aa4a <_nx_ip_interface_status_check+0x138>
            {
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	2b44      	cmp	r3, #68	; 0x44
 800aa28:	d116      	bne.n	800aa58 <_nx_ip_interface_status_check+0x146>
                {
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	214c      	movs	r1, #76	; 0x4c
 800aa30:	fb01 f303 	mul.w	r3, r1, r3
 800aa34:	4413      	add	r3, r2
 800aa36:	f203 7322 	addw	r3, r3, #1826	; 0x722
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <_nx_ip_interface_status_check+0x146>
                    {
                        current_status = current_status | NX_IP_LINK_ENABLED;
 800aa40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa42:	f043 0304 	orr.w	r3, r3, #4
 800aa46:	637b      	str	r3, [r7, #52]	; 0x34
 800aa48:	e006      	b.n	800aa58 <_nx_ip_interface_status_check+0x146>
            else
            {

                /* Check for a link up condition.  */
                /*lint -e{644} suppress variable might not be initialized, since "return_value" was initialized in nx_interface_link_driver_entry. */
                if (return_value == NX_TRUE)
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d103      	bne.n	800aa58 <_nx_ip_interface_status_check+0x146>
                {

                    /* Yes, set the appropriate bit in the current status.  */
                    current_status =  current_status | NX_IP_LINK_ENABLED;
 800aa50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa52:	f043 0304 	orr.w	r3, r3, #4
 800aa56:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f005 f980 	bl	800fd64 <_tx_mutex_put>
        }

        if (needed_status &  NX_IP_UDP_ENABLED)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f003 0310 	and.w	r3, r3, #16
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d008      	beq.n	800aa80 <_nx_ip_interface_status_check+0x16e>
        {

            /* Check for UDP being enabled.  */
            if (ip_ptr -> nx_ip_udp_packet_receive)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d003      	beq.n	800aa80 <_nx_ip_interface_status_check+0x16e>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_UDP_ENABLED;
 800aa78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7a:	f043 0310 	orr.w	r3, r3, #16
 800aa7e:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_TCP_ENABLED)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f003 0320 	and.w	r3, r3, #32
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d008      	beq.n	800aa9c <_nx_ip_interface_status_check+0x18a>
        {

            /* Check for TCP being enabled.  */
            if (ip_ptr -> nx_ip_tcp_packet_receive)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <_nx_ip_interface_status_check+0x18a>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_TCP_ENABLED;
 800aa94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa96:	f043 0320 	orr.w	r3, r3, #32
 800aa9a:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d048      	beq.n	800ab38 <_nx_ip_interface_status_check+0x226>
        {

            /* Get mutex protection.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800aaac:	f04f 31ff 	mov.w	r1, #4294967295
 800aab0:	4618      	mov	r0, r3
 800aab2:	f004 fedf 	bl	800f874 <_tx_mutex_get>

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	62fb      	str	r3, [r7, #44]	; 0x2c
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 800aaba:	230a      	movs	r3, #10
 800aabc:	617b      	str	r3, [r7, #20]
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 800aabe:	f107 0310 	add.w	r3, r7, #16
 800aac2:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	224c      	movs	r2, #76	; 0x4c
 800aac8:	fb02 f303 	mul.w	r3, r2, r3
 800aacc:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	4413      	add	r3, r2
 800aad4:	3304      	adds	r3, #4
 800aad6:	633b      	str	r3, [r7, #48]	; 0x30

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_GET_STATUS, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Call link level driver.  */
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	214c      	movs	r1, #76	; 0x4c
 800aade:	fb01 f303 	mul.w	r3, r1, r3
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f107 0214 	add.w	r2, r7, #20
 800aaee:	4610      	mov	r0, r2
 800aaf0:	4798      	blx	r3

            /* If the driver does not recognize this keyword, we fall back to reading the IP link status.*/
            /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d012      	beq.n	800ab1e <_nx_ip_interface_status_check+0x20c>
            {
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	2b44      	cmp	r3, #68	; 0x44
 800aafc:	d116      	bne.n	800ab2c <_nx_ip_interface_status_check+0x21a>
                {
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	214c      	movs	r1, #76	; 0x4c
 800ab04:	fb01 f303 	mul.w	r3, r1, r3
 800ab08:	4413      	add	r3, r2
 800ab0a:	f203 7322 	addw	r3, r3, #1826	; 0x722
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00b      	beq.n	800ab2c <_nx_ip_interface_status_check+0x21a>
                    {
                        current_status = current_status | NX_IP_INTERFACE_LINK_ENABLED;
 800ab14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab1c:	e006      	b.n	800ab2c <_nx_ip_interface_status_check+0x21a>
            else
            {

                /* Check for a link up condition.  */
                /*lint -e{644} suppress variable might not be initialized, since "return_value" was initialized in nx_interface_link_driver_entry. */
                if (return_value == NX_TRUE)
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d103      	bne.n	800ab2c <_nx_ip_interface_status_check+0x21a>
                {

                    /* Yes, set the appropriate bit in the current status.  */
                    current_status =  current_status | NX_IP_INTERFACE_LINK_ENABLED;
 800ab24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab2a:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ab32:	4618      	mov	r0, r3
 800ab34:	f005 f916 	bl	800fd64 <_tx_mutex_put>
        }

        /* Determine if current status is the same.  If so, break out
           of this polling loop.  */
        if (current_status == needed_status)
 800ab38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d00f      	beq.n	800ab60 <_nx_ip_interface_status_check+0x24e>
        {
            break;
        }

        /* Check for suspension request.  */
        if (wait_option)
 800ab40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00e      	beq.n	800ab64 <_nx_ip_interface_status_check+0x252>
        {

            /* Decrease the wait time and sleep.  */
            if (wait_option > NX_IP_STATUS_CHECK_WAIT_TIME)
 800ab46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d903      	bls.n	800ab54 <_nx_ip_interface_status_check+0x242>
            {
                wait_option -= NX_IP_STATUS_CHECK_WAIT_TIME;
 800ab4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	643b      	str	r3, [r7, #64]	; 0x40
 800ab52:	e001      	b.n	800ab58 <_nx_ip_interface_status_check+0x246>
            }
            else
            {
                wait_option = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* Sleep for a tick and check again.  */
            tx_thread_sleep(NX_IP_STATUS_CHECK_WAIT_TIME);
 800ab58:	2001      	movs	r0, #1
 800ab5a:	f006 f811 	bl	8010b80 <_tx_thread_sleep>
        current_status =  0;
 800ab5e:	e6df      	b.n	800a920 <_nx_ip_interface_status_check+0xe>
            break;
 800ab60:	bf00      	nop
 800ab62:	e000      	b.n	800ab66 <_nx_ip_interface_status_check+0x254>
        }
        else
        {

            /* Get out of the loop.  */
            break;
 800ab64:	bf00      	nop
        }
    }

    /* Place the current status in the return destination.  */
    *actual_status =  current_status;
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab6a:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_IP_STATUS_CHECK, 0, 0, current_status, 0);

    /* Determine what status to return.  */
    if (needed_status == current_status)
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d101      	bne.n	800ab78 <_nx_ip_interface_status_check+0x266>
    {

        /* Return a success.  */
        return(NX_SUCCESS);
 800ab74:	2300      	movs	r3, #0
 800ab76:	e000      	b.n	800ab7a <_nx_ip_interface_status_check+0x268>
    }
    else
    {

        /* Return an error.  */
        return(NX_NOT_SUCCESSFUL);
 800ab78:	2343      	movs	r3, #67	; 0x43
    }
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3738      	adds	r7, #56	; 0x38
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b088      	sub	sp, #32
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab8c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab90:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ab92:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ab94:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab96:	b672      	cpsid	i
    return(int_posture);
 800ab98:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800ab9a:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d011      	beq.n	800abca <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2200      	movs	r2, #0
 800abb4:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f383 8810 	msr	PRIMASK, r3
}
 800abc8:	e019      	b.n	800abfe <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	683a      	ldr	r2, [r7, #0]
 800abd6:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2200      	movs	r2, #0
 800abde:	61da      	str	r2, [r3, #28]
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f383 8810 	msr	PRIMASK, r3
}
 800abea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800abf2:	2200      	movs	r2, #0
 800abf4:	2108      	movs	r1, #8
 800abf6:	4618      	mov	r0, r3
 800abf8:	f004 f9f8 	bl	800efec <_tx_event_flags_set>
    }
}
 800abfc:	bf00      	nop
 800abfe:	bf00      	nop
 800ac00:	3720      	adds	r7, #32
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <_nx_ip_packet_receive>:
/*                                            added new ip filter,        */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b084      	sub	sp, #16
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	69db      	ldr	r3, [r3, #28]
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	61da      	str	r2, [r3, #28]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d104      	bne.n	800ac2c <_nx_ip_packet_receive+0x26>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f203 721c 	addw	r2, r3, #1820	; 0x71c
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	091b      	lsrs	r3, r3, #4
 800ac38:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	7bba      	ldrb	r2, [r7, #14]
 800ac3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	689a      	ldr	r2, [r3, #8]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	2b04      	cmp	r3, #4
 800ac4e:	d10b      	bne.n	800ac68 <_nx_ip_packet_receive+0x62>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 37b4 	ldr.w	r3, [r3, #1972]	; 0x7b4
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d006      	beq.n	800ac68 <_nx_ip_packet_receive+0x62>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 37b4 	ldr.w	r3, [r3, #1972]	; 0x7b4
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	4798      	blx	r3
        return;
 800ac66:	e00d      	b.n	800ac84 <_nx_ip_packet_receive+0x7e>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac6c:	1c5a      	adds	r2, r3, #1
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

    _nx_packet_release(packet_ptr);
 800ac7c:	6838      	ldr	r0, [r7, #0]
 800ac7e:	f001 fba7 	bl	800c3d0 <_nx_packet_release>

    return;
 800ac82:	bf00      	nop
}
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b088      	sub	sp, #32
 800ac8e:	af04      	add	r7, sp, #16
 800ac90:	60f8      	str	r0, [r7, #12]
 800ac92:	60b9      	str	r1, [r7, #8]
 800ac94:	607a      	str	r2, [r7, #4]
 800ac96:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	1c5a      	adds	r2, r3, #1
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	611a      	str	r2, [r3, #16]
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d114      	bne.n	800acd4 <_nx_ip_packet_send+0x4a>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	1c5a      	adds	r2, r3, #1
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	f1a3 0214 	sub.w	r2, r3, #20
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc4:	f103 0214 	add.w	r2, r3, #20
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	625a      	str	r2, [r3, #36]	; 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 800accc:	68b8      	ldr	r0, [r7, #8]
 800acce:	f001 fc35 	bl	800c53c <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 800acd2:	e03b      	b.n	800ad4c <_nx_ip_packet_send+0xc2>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address,
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd8:	695a      	ldr	r2, [r3, #20]
 800acda:	6a3b      	ldr	r3, [r7, #32]
 800acdc:	9303      	str	r3, [sp, #12]
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	9302      	str	r3, [sp, #8]
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68b9      	ldr	r1, [r7, #8]
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f7ff fc84 	bl	800a5fc <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d120      	bne.n	800ad3c <_nx_ip_packet_send+0xb2>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00b      	beq.n	800ad1c <_nx_ip_packet_send+0x92>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2200      	movs	r2, #0
 800ad08:	631a      	str	r2, [r3, #48]	; 0x30

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 f82e 	bl	800ad78 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <_nx_ip_packet_send+0xa0>
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d108      	bne.n	800ad3c <_nx_ip_packet_send+0xb2>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2e:	1c5a      	adds	r2, r3, #1
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 800ad34:	68b8      	ldr	r0, [r7, #8]
 800ad36:	f001 fc01 	bl	800c53c <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 800ad3a:	e007      	b.n	800ad4c <_nx_ip_packet_send+0xc2>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	6a3b      	ldr	r3, [r7, #32]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	68b9      	ldr	r1, [r7, #8]
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7ff f97d 	bl	800a046 <_nx_ip_driver_packet_send>
}
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ad64:	2200      	movs	r2, #0
 800ad66:	2101      	movs	r1, #1
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f004 f93f 	bl	800efec <_tx_event_flags_set>
}
 800ad6e:	bf00      	nop
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
	...

0800ad78 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
 800ad84:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ad92:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800ad96:	d003      	beq.n	800ada0 <_nx_ip_route_find+0x28>
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9e:	d131      	bne.n	800ae04 <_nx_ip_route_find+0x8c>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d121      	bne.n	800adf2 <_nx_ip_route_find+0x7a>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800adae:	2300      	movs	r3, #0
 800adb0:	617b      	str	r3, [r7, #20]
 800adb2:	e01a      	b.n	800adea <_nx_ip_route_find+0x72>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	214c      	movs	r1, #76	; 0x4c
 800adba:	fb01 f303 	mul.w	r3, r1, r3
 800adbe:	4413      	add	r3, r2
 800adc0:	f203 7322 	addw	r3, r3, #1826	; 0x722
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00c      	beq.n	800ade4 <_nx_ip_route_find+0x6c>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	224c      	movs	r2, #76	; 0x4c
 800adce:	fb02 f303 	mul.w	r3, r2, r3
 800add2:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	4413      	add	r3, r2
 800adda:	1d1a      	adds	r2, r3, #4
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 800ade0:	2300      	movs	r3, #0
 800ade2:	e13b      	b.n	800b05c <_nx_ip_route_find+0x2e4>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	3301      	adds	r3, #1
 800ade8:	617b      	str	r3, [r7, #20]
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d0e1      	beq.n	800adb4 <_nx_ip_route_find+0x3c>
 800adf0:	e006      	b.n	800ae00 <_nx_ip_route_find+0x88>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	799b      	ldrb	r3, [r3, #6]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <_nx_ip_route_find+0x88>
        {
            return(NX_SUCCESS);
 800adfc:	2300      	movs	r3, #0
 800adfe:	e12d      	b.n	800b05c <_nx_ip_route_find+0x2e4>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 800ae00:	2321      	movs	r3, #33	; 0x21
 800ae02:	e12b      	b.n	800b05c <_nx_ip_route_find+0x2e4>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800ae04:	2300      	movs	r3, #0
 800ae06:	617b      	str	r3, [r7, #20]
 800ae08:	e02a      	b.n	800ae60 <_nx_ip_route_find+0xe8>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	224c      	movs	r2, #76	; 0x4c
 800ae0e:	fb02 f303 	mul.w	r3, r2, r3
 800ae12:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	4413      	add	r3, r2
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	791b      	ldrb	r3, [r3, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d019      	beq.n	800ae5a <_nx_ip_route_find+0xe2>
            (interface_ptr -> nx_interface_link_up) &&
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d015      	beq.n	800ae5a <_nx_ip_route_find+0xe2>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d110      	bne.n	800ae5a <_nx_ip_route_find+0xe2>
            ((*ip_interface_ptr == NX_NULL) ||
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d004      	beq.n	800ae4a <_nx_ip_route_find+0xd2>
             (*ip_interface_ptr == interface_ptr)))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d107      	bne.n	800ae5a <_nx_ip_route_find+0xe2>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 800ae56:	2300      	movs	r3, #0
 800ae58:	e100      	b.n	800b05c <_nx_ip_route_find+0x2e4>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	617b      	str	r3, [r7, #20]
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0d1      	beq.n	800ae0a <_nx_ip_route_find+0x92>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800ae66:	2300      	movs	r3, #0
 800ae68:	617b      	str	r3, [r7, #20]
 800ae6a:	e036      	b.n	800aeda <_nx_ip_route_find+0x162>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	224c      	movs	r2, #76	; 0x4c
 800ae70:	fb02 f303 	mul.w	r3, r2, r3
 800ae74:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	791b      	ldrb	r3, [r3, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d025      	beq.n	800aed4 <_nx_ip_route_find+0x15c>
            (interface_ptr -> nx_interface_link_up) &&
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d021      	beq.n	800aed4 <_nx_ip_route_find+0x15c>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	699a      	ldr	r2, [r3, #24]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	401a      	ands	r2, r3
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d119      	bne.n	800aed4 <_nx_ip_route_find+0x15c>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d103      	bne.n	800aeb0 <_nx_ip_route_find+0x138>
            {
                *ip_interface_ptr = interface_ptr;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	693a      	ldr	r2, [r7, #16]
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	e00b      	b.n	800aec8 <_nx_ip_route_find+0x150>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d103      	bne.n	800aebe <_nx_ip_route_find+0x146>
            {
                *ip_interface_ptr = interface_ptr;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	e004      	b.n	800aec8 <_nx_ip_route_find+0x150>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d104      	bne.n	800aed2 <_nx_ip_route_find+0x15a>
            {
                continue;
            }

            *next_hop_address = destination_address;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	68ba      	ldr	r2, [r7, #8]
 800aecc:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800aece:	2300      	movs	r3, #0
 800aed0:	e0c4      	b.n	800b05c <_nx_ip_route_find+0x2e4>
                continue;
 800aed2:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	3301      	adds	r3, #1
 800aed8:	617b      	str	r3, [r7, #20]
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d9c5      	bls.n	800ae6c <_nx_ip_route_find+0xf4>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	4b61      	ldr	r3, [pc, #388]	; (800b068 <_nx_ip_route_find+0x2f0>)
 800aee4:	4013      	ands	r3, r2
 800aee6:	4a61      	ldr	r2, [pc, #388]	; (800b06c <_nx_ip_route_find+0x2f4>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d141      	bne.n	800af70 <_nx_ip_route_find+0x1f8>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00e      	beq.n	800af12 <_nx_ip_route_find+0x19a>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	791b      	ldrb	r3, [r3, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d038      	beq.n	800af70 <_nx_ip_route_find+0x1f8>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800af04:	2b00      	cmp	r3, #0
 800af06:	d033      	beq.n	800af70 <_nx_ip_route_find+0x1f8>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800af0e:	2300      	movs	r3, #0
 800af10:	e0a4      	b.n	800b05c <_nx_ip_route_find+0x2e4>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800af12:	2300      	movs	r3, #0
 800af14:	617b      	str	r3, [r7, #20]
 800af16:	e028      	b.n	800af6a <_nx_ip_route_find+0x1f2>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	214c      	movs	r1, #76	; 0x4c
 800af1e:	fb01 f303 	mul.w	r3, r1, r3
 800af22:	4413      	add	r3, r2
 800af24:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d01a      	beq.n	800af64 <_nx_ip_route_find+0x1ec>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	214c      	movs	r1, #76	; 0x4c
 800af34:	fb01 f303 	mul.w	r3, r1, r3
 800af38:	4413      	add	r3, r2
 800af3a:	f203 7322 	addw	r3, r3, #1826	; 0x722
 800af3e:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00f      	beq.n	800af64 <_nx_ip_route_find+0x1ec>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	224c      	movs	r2, #76	; 0x4c
 800af48:	fb02 f303 	mul.w	r3, r2, r3
 800af4c:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	4413      	add	r3, r2
 800af54:	1d1a      	adds	r2, r3, #4
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 800af60:	2300      	movs	r3, #0
 800af62:	e07b      	b.n	800b05c <_nx_ip_route_find+0x2e4>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	3301      	adds	r3, #1
 800af68:	617b      	str	r3, [r7, #20]
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d9d3      	bls.n	800af18 <_nx_ip_route_find+0x1a0>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d02b      	beq.n	800afd0 <_nx_ip_route_find+0x258>
        (ip_ptr -> nx_ip_gateway_interface) &&
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d027      	beq.n	800afd0 <_nx_ip_route_find+0x258>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 800af86:	2b00      	cmp	r3, #0
 800af88:	d022      	beq.n	800afd0 <_nx_ip_route_find+0x258>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 800af9c:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d001      	beq.n	800afa6 <_nx_ip_route_find+0x22e>
        {
            return(NX_IP_ADDRESS_ERROR);
 800afa2:	2321      	movs	r3, #33	; 0x21
 800afa4:	e05a      	b.n	800b05c <_nx_ip_route_find+0x2e4>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d103      	bne.n	800afb6 <_nx_ip_route_find+0x23e>
        {
            *ip_interface_ptr = interface_ptr;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	e006      	b.n	800afc4 <_nx_ip_route_find+0x24c>
        }
        else if (*ip_interface_ptr != interface_ptr)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d001      	beq.n	800afc4 <_nx_ip_route_find+0x24c>
        {
            return(NX_IP_ADDRESS_ERROR);
 800afc0:	2321      	movs	r3, #33	; 0x21
 800afc2:	e04b      	b.n	800b05c <_nx_ip_route_find+0x2e4>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	689a      	ldr	r2, [r3, #8]
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 800afcc:	2300      	movs	r3, #0
 800afce:	e045      	b.n	800b05c <_nx_ip_route_find+0x2e4>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d016      	beq.n	800b006 <_nx_ip_route_find+0x28e>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	791b      	ldrb	r3, [r3, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d03b      	beq.n	800b05a <_nx_ip_route_find+0x2e2>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d036      	beq.n	800b05a <_nx_ip_route_find+0x2e2>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	695a      	ldr	r2, [r3, #20]
 800aff2:	4b1d      	ldr	r3, [pc, #116]	; (800b068 <_nx_ip_route_find+0x2f0>)
 800aff4:	4013      	ands	r3, r2
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800aff6:	4a1d      	ldr	r2, [pc, #116]	; (800b06c <_nx_ip_route_find+0x2f4>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d12e      	bne.n	800b05a <_nx_ip_route_find+0x2e2>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	68ba      	ldr	r2, [r7, #8]
 800b000:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800b002:	2300      	movs	r3, #0
 800b004:	e02a      	b.n	800b05c <_nx_ip_route_find+0x2e4>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800b006:	2300      	movs	r3, #0
 800b008:	617b      	str	r3, [r7, #20]
 800b00a:	e023      	b.n	800b054 <_nx_ip_route_find+0x2dc>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	224c      	movs	r2, #76	; 0x4c
 800b010:	fb02 f303 	mul.w	r3, r2, r3
 800b014:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	4413      	add	r3, r2
 800b01c:	3304      	adds	r3, #4
 800b01e:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	791b      	ldrb	r3, [r3, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d012      	beq.n	800b04e <_nx_ip_route_find+0x2d6>
                (interface_ptr -> nx_interface_link_up) &&
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00e      	beq.n	800b04e <_nx_ip_route_find+0x2d6>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	695a      	ldr	r2, [r3, #20]
 800b034:	4b0c      	ldr	r3, [pc, #48]	; (800b068 <_nx_ip_route_find+0x2f0>)
 800b036:	4013      	ands	r3, r2
                (interface_ptr -> nx_interface_link_up) &&
 800b038:	4a0c      	ldr	r2, [pc, #48]	; (800b06c <_nx_ip_route_find+0x2f4>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d107      	bne.n	800b04e <_nx_ip_route_find+0x2d6>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800b04a:	2300      	movs	r3, #0
 800b04c:	e006      	b.n	800b05c <_nx_ip_route_find+0x2e4>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	3301      	adds	r3, #1
 800b052:	617b      	str	r3, [r7, #20]
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d9d8      	bls.n	800b00c <_nx_ip_route_find+0x294>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 800b05a:	2321      	movs	r3, #33	; 0x21
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	371c      	adds	r7, #28
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr
 800b068:	ffff0000 	.word	0xffff0000
 800b06c:	a9fe0000 	.word	0xa9fe0000

0800b070 <_nx_ip_thread_entry>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b096      	sub	sp, #88	; 0x58
 800b074:	af02      	add	r7, sp, #8
 800b076:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b07c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b07e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b082:	f04f 31ff 	mov.w	r1, #4294967295
 800b086:	4618      	mov	r0, r3
 800b088:	f004 fbf4 	bl	800f874 <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 800b08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b08e:	2201      	movs	r2, #1
 800b090:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800b094:	2300      	movs	r3, #0
 800b096:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b098:	e05f      	b.n	800b15a <_nx_ip_thread_entry+0xea>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 800b09a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b09e:	214c      	movs	r1, #76	; 0x4c
 800b0a0:	fb01 f303 	mul.w	r3, r1, r3
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d051      	beq.n	800b154 <_nx_ip_thread_entry+0xe4>
 800b0b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0b4:	214c      	movs	r1, #76	; 0x4c
 800b0b6:	fb01 f303 	mul.w	r3, r1, r3
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d046      	beq.n	800b154 <_nx_ip_thread_entry+0xe4>
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 800b0c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ca:	214c      	movs	r1, #76	; 0x4c
 800b0cc:	fb01 f303 	mul.w	r3, r1, r3
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f203 7322 	addw	r3, r3, #1826	; 0x722
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 800b0da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0dc:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 800b0de:	2313      	movs	r3, #19
 800b0e0:	613b      	str	r3, [r7, #16]
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 800b0e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0e4:	224c      	movs	r2, #76	; 0x4c
 800b0e6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ea:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800b0ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0f0:	4413      	add	r3, r2
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800b0f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0fa:	214c      	movs	r1, #76	; 0x4c
 800b0fc:	fb01 f303 	mul.w	r3, r1, r3
 800b100:	4413      	add	r3, r2
 800b102:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f107 0210 	add.w	r2, r7, #16
 800b10c:	4610      	mov	r0, r2
 800b10e:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800b110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b112:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 800b114:	2301      	movs	r3, #1
 800b116:	613b      	str	r3, [r7, #16]
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800b118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b11c:	214c      	movs	r1, #76	; 0x4c
 800b11e:	fb01 f303 	mul.w	r3, r1, r3
 800b122:	4413      	add	r3, r2
 800b124:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f107 0210 	add.w	r2, r7, #16
 800b12e:	4610      	mov	r0, r2
 800b130:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800b132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b134:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 800b136:	2302      	movs	r3, #2
 800b138:	613b      	str	r3, [r7, #16]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800b13a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b13c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b13e:	214c      	movs	r1, #76	; 0x4c
 800b140:	fb01 f303 	mul.w	r3, r1, r3
 800b144:	4413      	add	r3, r2
 800b146:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f107 0210 	add.w	r2, r7, #16
 800b150:	4610      	mov	r0, r2
 800b152:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800b154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b156:	3301      	adds	r3, #1
 800b158:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b15a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d09c      	beq.n	800b09a <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b162:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b166:	4618      	mov	r0, r3
 800b168:	f004 fdfc 	bl	800fd64 <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 800b16c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b16e:	f503 7012 	add.w	r0, r3, #584	; 0x248
 800b172:	f107 030c 	add.w	r3, r7, #12
 800b176:	f04f 32ff 	mov.w	r2, #4294967295
 800b17a:	9200      	str	r2, [sp, #0]
 800b17c:	2201      	movs	r2, #1
 800b17e:	f04f 31ff 	mov.w	r1, #4294967295
 800b182:	f003 fe51 	bl	800ee28 <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b188:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b18c:	f04f 31ff 	mov.w	r1, #4294967295
 800b190:	4618      	mov	r0, r3
 800b192:	f004 fb6f 	bl	800f874 <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f003 0308 	and.w	r3, r3, #8
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d031      	beq.n	800b204 <_nx_ip_thread_entry+0x194>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800b1a0:	e023      	b.n	800b1ea <_nx_ip_thread_entry+0x17a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b1a6:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800b1aa:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1ac:	b672      	cpsid	i
    return(int_posture);
 800b1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 800b1b0:	643b      	str	r3, [r7, #64]	; 0x40

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 800b1b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1b4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800b1b8:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 800b1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1bc:	69da      	ldr	r2, [r3, #28]
 800b1be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1c0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 800b1c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1c6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d103      	bne.n	800b1d6 <_nx_ip_thread_entry+0x166>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 800b1ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 800b1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1d8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1dc:	f383 8810 	msr	PRIMASK, r3
}
 800b1e0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 800b1e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b1e6:	f7ff fd0e 	bl	800ac06 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800b1ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ec:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1d6      	bne.n	800b1a2 <_nx_ip_thread_entry+0x132>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f023 0308 	bic.w	r3, r3, #8
 800b1fa:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f000 812d 	beq.w	800b45e <_nx_ip_thread_entry+0x3ee>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00c      	beq.n	800b228 <_nx_ip_thread_entry+0x1b8>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 800b20e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b210:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 800b214:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b216:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b21e:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b00      	cmp	r3, #0
 800b224:	f000 811d 	beq.w	800b462 <_nx_ip_thread_entry+0x3f2>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d011      	beq.n	800b256 <_nx_ip_thread_entry+0x1e6>
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 800b232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b234:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d004      	beq.n	800b246 <_nx_ip_thread_entry+0x1d6>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 800b23c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b23e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800b242:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b244:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b24c:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 8108 	beq.w	800b466 <_nx_ip_thread_entry+0x3f6>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d039      	beq.n	800b2d4 <_nx_ip_thread_entry+0x264>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800b260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b262:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800b266:	2b00      	cmp	r3, #0
 800b268:	d004      	beq.n	800b274 <_nx_ip_thread_entry+0x204>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 800b26a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b26c:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800b270:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b272:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 800b274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b276:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d004      	beq.n	800b288 <_nx_ip_thread_entry+0x218>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 800b27e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b280:	f8d3 36fc 	ldr.w	r3, [r3, #1788]	; 0x6fc
 800b284:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b286:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 800b288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b28a:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d004      	beq.n	800b29c <_nx_ip_thread_entry+0x22c>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 800b292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b294:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800b298:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b29a:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 800b29c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b29e:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d004      	beq.n	800b2b0 <_nx_ip_thread_entry+0x240>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 800b2a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2a8:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 800b2ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b2ae:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 800b2b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2b2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d004      	beq.n	800b2c4 <_nx_ip_thread_entry+0x254>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 800b2ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2bc:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800b2c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b2c2:	4798      	blx	r3
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f023 0301 	bic.w	r3, r3, #1
 800b2ca:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f000 80cb 	beq.w	800b46a <_nx_ip_thread_entry+0x3fa>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f003 0310 	and.w	r3, r3, #16
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d009      	beq.n	800b2f2 <_nx_ip_thread_entry+0x282>
 800b2de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2e0:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d004      	beq.n	800b2f2 <_nx_ip_thread_entry+0x282>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 800b2e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ea:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 800b2ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b2f0:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f003 0320 	and.w	r3, r3, #32
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d009      	beq.n	800b310 <_nx_ip_thread_entry+0x2a0>
 800b2fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2fe:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800b302:	2b00      	cmp	r3, #0
 800b304:	d004      	beq.n	800b310 <_nx_ip_thread_entry+0x2a0>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 800b306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b308:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800b30c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b30e:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b316:	2b00      	cmp	r3, #0
 800b318:	d004      	beq.n	800b324 <_nx_ip_thread_entry+0x2b4>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 800b31a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b31c:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 800b320:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b322:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d033      	beq.n	800b396 <_nx_ip_thread_entry+0x326>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800b32e:	2300      	movs	r3, #0
 800b330:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b332:	e02d      	b.n	800b390 <_nx_ip_thread_entry+0x320>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 800b334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b338:	214c      	movs	r1, #76	; 0x4c
 800b33a:	fb01 f303 	mul.w	r3, r1, r3
 800b33e:	4413      	add	r3, r2
 800b340:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d01f      	beq.n	800b38a <_nx_ip_thread_entry+0x31a>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 800b34a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b34c:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 800b34e:	2308      	movs	r3, #8
 800b350:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 800b352:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b356:	61bb      	str	r3, [r7, #24]
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 800b358:	4b45      	ldr	r3, [pc, #276]	; (800b470 <_nx_ip_thread_entry+0x400>)
 800b35a:	61fb      	str	r3, [r7, #28]
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 800b35c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b35e:	224c      	movs	r2, #76	; 0x4c
 800b360:	fb02 f303 	mul.w	r3, r2, r3
 800b364:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800b368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b36a:	4413      	add	r3, r2
 800b36c:	3304      	adds	r3, #4
 800b36e:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800b370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b374:	214c      	movs	r1, #76	; 0x4c
 800b376:	fb01 f303 	mul.w	r3, r1, r3
 800b37a:	4413      	add	r3, r2
 800b37c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f107 0210 	add.w	r2, r7, #16
 800b386:	4610      	mov	r0, r2
 800b388:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800b38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b38c:	3301      	adds	r3, #1
 800b38e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b392:	2b00      	cmp	r3, #0
 800b394:	d0ce      	beq.n	800b334 <_nx_ip_thread_entry+0x2c4>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f003 0302 	and.w	r3, r3, #2
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d009      	beq.n	800b3b4 <_nx_ip_thread_entry+0x344>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 800b3a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3a2:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d004      	beq.n	800b3b4 <_nx_ip_thread_entry+0x344>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 800b3aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ac:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800b3b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b3b2:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f003 0304 	and.w	r3, r3, #4
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d004      	beq.n	800b3c8 <_nx_ip_thread_entry+0x358>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 800b3be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3c0:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 800b3c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b3c6:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d031      	beq.n	800b436 <_nx_ip_thread_entry+0x3c6>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3d6:	e02b      	b.n	800b430 <_nx_ip_thread_entry+0x3c0>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 800b3d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3dc:	214c      	movs	r1, #76	; 0x4c
 800b3de:	fb01 f303 	mul.w	r3, r1, r3
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d01d      	beq.n	800b42a <_nx_ip_thread_entry+0x3ba>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 800b3ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3f0:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 800b3f2:	2312      	movs	r3, #18
 800b3f4:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 800b3f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3f8:	224c      	movs	r2, #76	; 0x4c
 800b3fa:	fb02 f303 	mul.w	r3, r2, r3
 800b3fe:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800b402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b404:	4413      	add	r3, r2
 800b406:	3304      	adds	r3, #4
 800b408:	62fb      	str	r3, [r7, #44]	; 0x2c
                    driver_request.nx_ip_driver_return_ptr = &foo;
 800b40a:	f107 0308 	add.w	r3, r7, #8
 800b40e:	627b      	str	r3, [r7, #36]	; 0x24

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 800b410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b414:	214c      	movs	r1, #76	; 0x4c
 800b416:	fb01 f303 	mul.w	r3, r1, r3
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f107 0210 	add.w	r2, r7, #16
 800b426:	4610      	mov	r0, r2
 800b428:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800b42a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b42c:	3301      	adds	r3, #1
 800b42e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0d0      	beq.n	800b3d8 <_nx_ip_thread_entry+0x368>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d004      	beq.n	800b44a <_nx_ip_thread_entry+0x3da>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 800b440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b442:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 800b446:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b448:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b450:	2b00      	cmp	r3, #0
 800b452:	f43f ae85 	beq.w	800b160 <_nx_ip_thread_entry+0xf0>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 800b456:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b458:	f7fe fc90 	bl	8009d7c <_nx_ip_deferred_link_status_process>
 800b45c:	e680      	b.n	800b160 <_nx_ip_thread_entry+0xf0>
                continue;
 800b45e:	bf00      	nop
 800b460:	e67e      	b.n	800b160 <_nx_ip_thread_entry+0xf0>
                continue;
 800b462:	bf00      	nop
 800b464:	e67c      	b.n	800b160 <_nx_ip_thread_entry+0xf0>
                continue;
 800b466:	bf00      	nop
 800b468:	e67a      	b.n	800b160 <_nx_ip_thread_entry+0xf0>
                continue;
 800b46a:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b46c:	e678      	b.n	800b160 <_nx_ip_thread_entry+0xf0>
 800b46e:	bf00      	nop
 800b470:	5e000001 	.word	0x5e000001

0800b474 <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b08a      	sub	sp, #40	; 0x28
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 800b47e:	2314      	movs	r3, #20
 800b480:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	3314      	adds	r3, #20
 800b496:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	0e1b      	lsrs	r3, r3, #24
 800b49e:	f003 030f 	and.w	r3, r3, #15
 800b4a2:	3b05      	subs	r3, #5
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 800b4aa:	e0a3      	b.n	800b5f4 <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 800b4b2:	7bfb      	ldrb	r3, [r7, #15]
 800b4b4:	2b44      	cmp	r3, #68	; 0x44
 800b4b6:	d010      	beq.n	800b4da <_nx_ipv4_option_process+0x66>
 800b4b8:	2b44      	cmp	r3, #68	; 0x44
 800b4ba:	f300 8082 	bgt.w	800b5c2 <_nx_ipv4_option_process+0x14e>
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d002      	beq.n	800b4c8 <_nx_ipv4_option_process+0x54>
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d002      	beq.n	800b4cc <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 800b4c6:	e07c      	b.n	800b5c2 <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e099      	b.n	800b600 <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	627b      	str	r3, [r7, #36]	; 0x24
            index++;
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	623b      	str	r3, [r7, #32]
            continue;
 800b4d8:	e08c      	b.n	800b5f4 <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d90b      	bls.n	800b4fe <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800b4e6:	69ba      	ldr	r2, [r7, #24]
 800b4e8:	6a3b      	ldr	r3, [r7, #32]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	3302      	adds	r3, #2
 800b4ee:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7fe f867 	bl	80095c8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	e080      	b.n	800b600 <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	785b      	ldrb	r3, [r3, #1]
 800b502:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 800b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b506:	789b      	ldrb	r3, [r3, #2]
 800b508:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 800b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50c:	3303      	adds	r3, #3
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	091b      	lsrs	r3, r3, #4
 800b512:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 800b514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b516:	3303      	adds	r3, #3
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	f003 030f 	and.w	r3, r3, #15
 800b51e:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 800b520:	7bbb      	ldrb	r3, [r7, #14]
 800b522:	2b07      	cmp	r3, #7
 800b524:	d908      	bls.n	800b538 <_nx_ipv4_option_process+0xc4>
 800b526:	7bbb      	ldrb	r3, [r7, #14]
 800b528:	2b28      	cmp	r3, #40	; 0x28
 800b52a:	d805      	bhi.n	800b538 <_nx_ipv4_option_process+0xc4>
 800b52c:	7bbb      	ldrb	r3, [r7, #14]
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00b      	beq.n	800b550 <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800b538:	69ba      	ldr	r2, [r7, #24]
 800b53a:	6a3b      	ldr	r3, [r7, #32]
 800b53c:	4413      	add	r3, r2
 800b53e:	3302      	adds	r3, #2
 800b540:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7fe f83e 	bl	80095c8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b54c:	2300      	movs	r3, #0
 800b54e:	e057      	b.n	800b600 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 800b550:	7b7b      	ldrb	r3, [r7, #13]
 800b552:	2b04      	cmp	r3, #4
 800b554:	d905      	bls.n	800b562 <_nx_ipv4_option_process+0xee>
 800b556:	7b7b      	ldrb	r3, [r7, #13]
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10b      	bne.n	800b57a <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	6a3b      	ldr	r3, [r7, #32]
 800b566:	4413      	add	r3, r2
 800b568:	3303      	adds	r3, #3
 800b56a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f7fe f829 	bl	80095c8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b576:	2300      	movs	r3, #0
 800b578:	e042      	b.n	800b600 <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 800b57a:	7b3b      	ldrb	r3, [r7, #12]
 800b57c:	2b0f      	cmp	r3, #15
 800b57e:	d10b      	bne.n	800b598 <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 800b580:	69ba      	ldr	r2, [r7, #24]
 800b582:	6a3b      	ldr	r3, [r7, #32]
 800b584:	4413      	add	r3, r2
 800b586:	3304      	adds	r3, #4
 800b588:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b58c:	6839      	ldr	r1, [r7, #0]
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7fe f81a 	bl	80095c8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b594:	2300      	movs	r3, #0
 800b596:	e033      	b.n	800b600 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 800b598:	7afb      	ldrb	r3, [r7, #11]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d013      	beq.n	800b5c6 <_nx_ipv4_option_process+0x152>
 800b59e:	7afb      	ldrb	r3, [r7, #11]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d010      	beq.n	800b5c6 <_nx_ipv4_option_process+0x152>
 800b5a4:	7afb      	ldrb	r3, [r7, #11]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d00d      	beq.n	800b5c6 <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 800b5aa:	69ba      	ldr	r2, [r7, #24]
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b5b6:	6839      	ldr	r1, [r7, #0]
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7fe f805 	bl	80095c8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800b5be:	2300      	movs	r3, #0
 800b5c0:	e01e      	b.n	800b600 <_nx_ipv4_option_process+0x18c>
            break;
 800b5c2:	bf00      	nop
 800b5c4:	e000      	b.n	800b5c8 <_nx_ipv4_option_process+0x154>
            break;
 800b5c6:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	785b      	ldrb	r3, [r3, #1]
 800b5cc:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 800b5ce:	7bbb      	ldrb	r3, [r7, #14]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d905      	bls.n	800b5e0 <_nx_ipv4_option_process+0x16c>
 800b5d4:	7bba      	ldrb	r2, [r7, #14]
 800b5d6:	6a3b      	ldr	r3, [r7, #32]
 800b5d8:	4413      	add	r3, r2
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d201      	bcs.n	800b5e4 <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	e00d      	b.n	800b600 <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 800b5e4:	7bbb      	ldrb	r3, [r7, #14]
 800b5e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5e8:	4413      	add	r3, r2
 800b5ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* Update the index.  */
        index += op_length;
 800b5ec:	7bbb      	ldrb	r3, [r7, #14]
 800b5ee:	6a3a      	ldr	r2, [r7, #32]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 800b5f4:	6a3a      	ldr	r2, [r7, #32]
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	f4ff af57 	bcc.w	800b4ac <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 800b5fe:	2301      	movs	r3, #1
}
 800b600:	4618      	mov	r0, r3
 800b602:	3728      	adds	r7, #40	; 0x28
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b096      	sub	sp, #88	; 0x58
 800b60c:	af02      	add	r7, sp, #8
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	64bb      	str	r3, [r7, #72]	; 0x48
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 800b618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 800b61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b620:	ba1b      	rev	r3, r3
 800b622:	643b      	str	r3, [r7, #64]	; 0x40

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 800b624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b626:	b29b      	uxth	r3, r3
 800b628:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b630:	429a      	cmp	r2, r3
 800b632:	d066      	beq.n	800b702 <_nx_ipv4_packet_receive+0xfa>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d90d      	bls.n	800b65a <_nx_ipv4_packet_receive+0x52>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b64c:	1c5a      	adds	r2, r3, #1
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 800b652:	6838      	ldr	r0, [r7, #0]
 800b654:	f000 febc 	bl	800c3d0 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 800b658:	e228      	b.n	800baac <_nx_ipv4_packet_receive+0x4a4>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	647b      	str	r3, [r7, #68]	; 0x44

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b66a:	1ad2      	subs	r2, r2, r3
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 800b670:	e044      	b.n	800b6fc <_nx_ipv4_packet_receive+0xf4>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d107      	bne.n	800b68a <_nx_ipv4_packet_receive+0x82>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68da      	ldr	r2, [r3, #12]
 800b67e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b680:	425b      	negs	r3, r3
 800b682:	441a      	add	r2, r3
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 800b688:	e03b      	b.n	800b702 <_nx_ipv4_packet_receive+0xfa>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	699b      	ldr	r3, [r3, #24]
 800b68e:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	461a      	mov	r2, r3
 800b69c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d207      	bcs.n	800b6b2 <_nx_ipv4_packet_receive+0xaa>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a4:	68da      	ldr	r2, [r3, #12]
 800b6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6a8:	425b      	negs	r3, r3
 800b6aa:	441a      	add	r2, r3
 800b6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ae:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 800b6b0:	e027      	b.n	800b702 <_nx_ipv4_packet_receive+0xfa>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 800b6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b4:	68da      	ldr	r2, [r3, #12]
 800b6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	1ad3      	subs	r3, r2, r3
 800b6bc:	461a      	mov	r2, r3
 800b6be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6c0:	1a9b      	subs	r3, r3, r2
 800b6c2:	647b      	str	r3, [r7, #68]	; 0x44

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	64fb      	str	r3, [r7, #76]	; 0x4c
                while (before_last_packet -> nx_packet_next != last_packet)
 800b6c8:	e002      	b.n	800b6d0 <_nx_ipv4_packet_receive+0xc8>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 800b6ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	64fb      	str	r3, [r7, #76]	; 0x4c
                while (before_last_packet -> nx_packet_next != last_packet)
 800b6d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d1f7      	bne.n	800b6ca <_nx_ipv4_packet_receive+0xc2>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 800b6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6dc:	2200      	movs	r2, #0
 800b6de:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d003      	beq.n	800b6f0 <_nx_ipv4_packet_receive+0xe8>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6ec:	619a      	str	r2, [r3, #24]
 800b6ee:	e002      	b.n	800b6f6 <_nx_ipv4_packet_receive+0xee>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 800b6f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6f8:	f000 fe6a 	bl	800c3d0 <_nx_packet_release>
        while (delta)
 800b6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1b7      	bne.n	800b672 <_nx_ipv4_packet_receive+0x6a>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b706:	637b      	str	r3, [r7, #52]	; 0x34

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 800b708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b70a:	0e1b      	lsrs	r3, r3, #24
 800b70c:	f003 030f 	and.w	r3, r3, #15
 800b710:	633b      	str	r3, [r7, #48]	; 0x30
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d902      	bls.n	800b724 <_nx_ipv4_packet_receive+0x11c>
 800b71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b720:	2b04      	cmp	r3, #4
 800b722:	d80d      	bhi.n	800b740 <_nx_ipv4_packet_receive+0x138>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800b738:	6838      	ldr	r0, [r7, #0]
 800b73a:	f000 fe49 	bl	800c3d0 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800b73e:	e1b5      	b.n	800baac <_nx_ipv4_packet_receive+0x4a4>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 800b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b742:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800b744:	2300      	movs	r3, #0
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	2300      	movs	r3, #0
 800b74a:	2104      	movs	r1, #4
 800b74c:	6838      	ldr	r0, [r7, #0]
 800b74e:	f7fe f8f3 	bl	8009938 <_nx_ip_checksum_compute>
 800b752:	4603      	mov	r3, r0
 800b754:	62fb      	str	r3, [r7, #44]	; 0x2c
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 800b756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b758:	43db      	mvns	r3, r3
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the checksum again.  */
        if (checksum)
 800b75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b760:	2b00      	cmp	r3, #0
 800b762:	d012      	beq.n	800b78a <_nx_ipv4_packet_receive+0x182>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b772:	1c5a      	adds	r2, r3, #1
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	651a      	str	r2, [r3, #80]	; 0x50

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b77c:	1c5a      	adds	r2, r3, #1
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 800b782:	6838      	ldr	r0, [r7, #0]
 800b784:	f000 fe24 	bl	800c3d0 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 800b788:	e190      	b.n	800baac <_nx_ipv4_packet_receive+0x4a4>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800b78a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	ba1a      	rev	r2, r3
 800b790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b792:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800b794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	ba1a      	rev	r2, r3
 800b79a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b79c:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800b79e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	ba1a      	rev	r2, r3
 800b7a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7a6:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800b7a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	ba1a      	rev	r2, r3
 800b7ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7b0:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800b7b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	ba1a      	rev	r2, r3
 800b7b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ba:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 800b7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7be:	2b05      	cmp	r3, #5
 800b7c0:	d949      	bls.n	800b856 <_nx_ipv4_packet_receive+0x24e>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7ff fe55 	bl	800b474 <_nx_ipv4_option_process>
 800b7ca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 800b7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d108      	bne.n	800b7e4 <_nx_ipv4_packet_receive+0x1dc>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7d6:	1c5a      	adds	r2, r3, #1
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 800b7dc:	6838      	ldr	r0, [r7, #0]
 800b7de:	f000 fdf7 	bl	800c3d0 <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800b7e2:	e163      	b.n	800baac <_nx_ipv4_packet_receive+0x4a4>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 800b7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7e6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b7ea:	4413      	add	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7f0:	4413      	add	r3, r2
 800b7f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	1f1a      	subs	r2, r3, #4
 800b7f8:	627a      	str	r2, [r7, #36]	; 0x24
 800b7fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7fc:	6912      	ldr	r2, [r2, #16]
 800b7fe:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	1f1a      	subs	r2, r3, #4
 800b804:	627a      	str	r2, [r7, #36]	; 0x24
 800b806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b808:	68d2      	ldr	r2, [r2, #12]
 800b80a:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	1f1a      	subs	r2, r3, #4
 800b810:	627a      	str	r2, [r7, #36]	; 0x24
 800b812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b814:	6892      	ldr	r2, [r2, #8]
 800b816:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81a:	1f1a      	subs	r2, r3, #4
 800b81c:	627a      	str	r2, [r7, #36]	; 0x24
 800b81e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b820:	6852      	ldr	r2, [r2, #4]
 800b822:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 800b824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f023 439e 	bic.w	r3, r3, #1325400064	; 0x4f000000
 800b82c:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	64bb      	str	r3, [r7, #72]	; 0x48

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b83c:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	689a      	ldr	r2, [r3, #8]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	635a      	str	r2, [r3, #52]	; 0x34
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84c:	3b05      	subs	r3, #5
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	1ad2      	subs	r2, r2, r3
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800b856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b858:	691a      	ldr	r2, [r3, #16]
 800b85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b85c:	695b      	ldr	r3, [r3, #20]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d02f      	beq.n	800b8c2 <_nx_ipv4_packet_receive+0x2ba>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800b862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b864:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800b866:	2b00      	cmp	r3, #0
 800b868:	d02b      	beq.n	800b8c2 <_nx_ipv4_packet_receive+0x2ba>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 800b86a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b86c:	691a      	ldr	r2, [r3, #16]
 800b86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 800b874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b876:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800b878:	429a      	cmp	r2, r3
 800b87a:	d10a      	bne.n	800b892 <_nx_ipv4_packet_receive+0x28a>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800b87c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b87e:	691a      	ldr	r2, [r3, #16]
 800b880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	43db      	mvns	r3, r3
 800b886:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800b888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 800b88e:	429a      	cmp	r2, r3
 800b890:	d017      	beq.n	800b8c2 <_nx_ipv4_packet_receive+0x2ba>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800b892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b894:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800b896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89a:	d012      	beq.n	800b8c2 <_nx_ipv4_packet_receive+0x2ba>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800b89c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b89e:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800b8a0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b8a4:	d303      	bcc.n	800b8ae <_nx_ipv4_packet_receive+0x2a6>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800b8a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8a8:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	da09      	bge.n	800b8c2 <_nx_ipv4_packet_receive+0x2ba>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 800b8ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7fd ffa4 	bl	8009804 <_nx_igmp_multicast_check>
 800b8bc:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d076      	beq.n	800b9b0 <_nx_ipv4_packet_receive+0x3a8>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 800b8c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d046      	beq.n	800b95c <_nx_ipv4_packet_receive+0x354>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8d2:	1c5a      	adds	r2, r3, #1
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	669a      	str	r2, [r3, #104]	; 0x68
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d033      	beq.n	800b94a <_nx_ipv4_packet_receive+0x342>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b8e2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8e6:	613b      	str	r3, [r7, #16]
    return(posture);
 800b8e8:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800b8ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b8ec:	b672      	cpsid	i
    return(int_posture);
 800b8ee:	68fb      	ldr	r3, [r7, #12]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 800b8f0:	617b      	str	r3, [r7, #20]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00c      	beq.n	800b916 <_nx_ipv4_packet_receive+0x30e>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2200      	movs	r2, #0
 800b90a:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 800b914:	e00a      	b.n	800b92c <_nx_ipv4_packet_receive+0x324>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	683a      	ldr	r2, [r7, #0]
 800b922:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2200      	movs	r2, #0
 800b92a:	61da      	str	r2, [r3, #28]
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	f383 8810 	msr	PRIMASK, r3
}
 800b936:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b93e:	2200      	movs	r2, #0
 800b940:	2102      	movs	r1, #2
 800b942:	4618      	mov	r0, r3
 800b944:	f003 fb52 	bl	800efec <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800b948:	e0b0      	b.n	800baac <_nx_ipv4_packet_receive+0x4a4>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b94e:	1c5a      	adds	r2, r3, #1
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	64da      	str	r2, [r3, #76]	; 0x4c
                _nx_packet_release(packet_ptr);
 800b954:	6838      	ldr	r0, [r7, #0]
 800b956:	f000 fd3b 	bl	800c3d0 <_nx_packet_release>
            return;
 800b95a:	e0a7      	b.n	800baac <_nx_ipv4_packet_receive+0x4a4>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 800b95c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	0c1b      	lsrs	r3, r3, #16
 800b962:	b2db      	uxtb	r3, r3
 800b964:	623b      	str	r3, [r7, #32]

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	f103 0214 	add.w	r2, r3, #20
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b976:	f1a3 0214 	sub.w	r2, r3, #20
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a1b      	ldr	r3, [r3, #32]
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	621a      	str	r2, [r3, #32]

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	441a      	add	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	625a      	str	r2, [r3, #36]	; 0x24
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800b996:	6a3a      	ldr	r2, [r7, #32]
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7fe fa4a 	bl	8009e34 <_nx_ip_dispatch_process>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 8082 	beq.w	800baac <_nx_ipv4_packet_receive+0x4a4>
        {
            _nx_packet_release(packet_ptr);
 800b9a8:	6838      	ldr	r0, [r7, #0]
 800b9aa:	f000 fd11 	bl	800c3d0 <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800b9ae:	e07d      	b.n	800baac <_nx_ipv4_packet_receive+0x4a4>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 800b9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b2:	695b      	ldr	r3, [r3, #20]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d15a      	bne.n	800ba6e <_nx_ipv4_packet_receive+0x466>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 800b9b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9c0:	623b      	str	r3, [r7, #32]

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800b9c8:	d137      	bne.n	800ba3a <_nx_ipv4_packet_receive+0x432>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	f103 0214 	add.w	r2, r3, #20
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9da:	f1a3 0214 	sub.w	r2, r3, #20
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	621a      	str	r2, [r3, #32]

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f4:	441a      	add	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	625a      	str	r2, [r3, #36]	; 0x24
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	ba1a      	rev	r2, r3
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	61bb      	str	r3, [r7, #24]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	ba1a      	rev	r2, r3
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	2b44      	cmp	r3, #68	; 0x44
 800ba20:	d10b      	bne.n	800ba3a <_nx_ipv4_packet_receive+0x432>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d006      	beq.n	800ba3a <_nx_ipv4_packet_receive+0x432>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	4798      	blx	r3

                    return;
 800ba38:	e038      	b.n	800baac <_nx_ipv4_packet_receive+0x4a4>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a1b      	ldr	r3, [r3, #32]
 800ba3e:	1e5a      	subs	r2, r3, #1
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	621a      	str	r2, [r3, #32]

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4c:	1ad2      	subs	r2, r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba60:	1c5a      	adds	r2, r3, #1
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 800ba66:	6838      	ldr	r0, [r7, #0]
 800ba68:	f000 fcb2 	bl	800c3d0 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800ba6c:	e01e      	b.n	800baac <_nx_ipv4_packet_receive+0x4a4>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00b      	beq.n	800ba90 <_nx_ipv4_packet_receive+0x488>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba7c:	1c5a      	adds	r2, r3, #1
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	629a      	str	r2, [r3, #40]	; 0x28
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800ba88:	6839      	ldr	r1, [r7, #0]
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	4798      	blx	r3
 800ba8e:	e00d      	b.n	800baac <_nx_ipv4_packet_receive+0x4a4>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba94:	1c5a      	adds	r2, r3, #1
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba9e:	1c5a      	adds	r2, r3, #1
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 800baa4:	6838      	ldr	r0, [r7, #0]
 800baa6:	f000 fc93 	bl	800c3d0 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800baaa:	bf00      	nop
    }
}
 800baac:	3750      	adds	r7, #80	; 0x50
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b08c      	sub	sp, #48	; 0x30
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
 800bac0:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d901      	bls.n	800bad0 <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 800bacc:	234d      	movs	r3, #77	; 0x4d
 800bace:	e0ae      	b.n	800bc2e <_nx_packet_allocate+0x17a>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2200      	movs	r2, #0
 800bad4:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bad6:	f3ef 8310 	mrs	r3, PRIMASK
 800bada:	61fb      	str	r3, [r7, #28]
    return(posture);
 800badc:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bade:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bae0:	b672      	cpsid	i
    return(int_posture);
 800bae2:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 800bae4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d03a      	beq.n	800bb64 <_nx_packet_allocate+0xb0>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	1e5a      	subs	r2, r3, #1
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 800bafe:	6a3b      	ldr	r3, [r7, #32]
 800bb00:	69da      	ldr	r2, [r3, #28]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 800bb06:	6a3b      	ldr	r3, [r7, #32]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 800bb0c:	6a3b      	ldr	r3, [r7, #32]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 800bb12:	6a3b      	ldr	r3, [r7, #32]
 800bb14:	2200      	movs	r2, #0
 800bb16:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 800bb18:	6a3b      	ldr	r3, [r7, #32]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	625a      	str	r2, [r3, #36]	; 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 800bb1e:	6a3b      	ldr	r3, [r7, #32]
 800bb20:	691a      	ldr	r2, [r3, #16]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	441a      	add	r2, r3
 800bb26:	6a3b      	ldr	r3, [r7, #32]
 800bb28:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 800bb2a:	6a3b      	ldr	r3, [r7, #32]
 800bb2c:	689a      	ldr	r2, [r3, #8]
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800bb32:	6a3b      	ldr	r3, [r7, #32]
 800bb34:	2200      	movs	r2, #0
 800bb36:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800bb38:	6a3b      	ldr	r3, [r7, #32]
 800bb3a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800bb3e:	621a      	str	r2, [r3, #32]
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	2204      	movs	r2, #4
 800bb44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 800bb48:	6a3b      	ldr	r3, [r7, #32]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 800bb50:	6a3b      	ldr	r3, [r7, #32]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	6a3a      	ldr	r2, [r7, #32]
 800bb5c:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb62:	e05d      	b.n	800bc20 <_nx_packet_allocate+0x16c>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	691b      	ldr	r3, [r3, #16]
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d053      	beq.n	800bc1c <_nx_packet_allocate+0x168>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	695b      	ldr	r3, [r3, #20]
 800bb78:	1c5a      	adds	r2, r3, #1
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 800bb7e:	4b2e      	ldr	r3, [pc, #184]	; (800bc38 <_nx_packet_allocate+0x184>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	4a2d      	ldr	r2, [pc, #180]	; (800bc3c <_nx_packet_allocate+0x188>)
 800bb88:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 800bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	679a      	str	r2, [r3, #120]	; 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d012      	beq.n	800bbca <_nx_packet_allocate+0x116>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =
 800bba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbaa:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb4:	675a      	str	r2, [r3, #116]	; 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbbe:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbc6:	675a      	str	r2, [r3, #116]	; 0x74
 800bbc8:	e008      	b.n	800bbdc <_nx_packet_allocate+0x128>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbce:	62da      	str	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbd4:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbda:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe0:	1c5a      	adds	r2, r3, #1
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe8:	220c      	movs	r2, #12
 800bbea:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbee:	2201      	movs	r2, #1
 800bbf0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bbf2:	4b13      	ldr	r3, [pc, #76]	; (800bc40 <_nx_packet_allocate+0x18c>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	4a11      	ldr	r2, [pc, #68]	; (800bc40 <_nx_packet_allocate+0x18c>)
 800bbfa:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	64da      	str	r2, [r3, #76]	; 0x4c
 800bc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc04:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	f383 8810 	msr	PRIMASK, r3
}
 800bc0c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800bc0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc10:	f005 f9e0 	bl	8010fd4 <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc1a:	e008      	b.n	800bc2e <_nx_packet_allocate+0x17a>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	f383 8810 	msr	PRIMASK, r3
}
 800bc2a:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 800bc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3730      	adds	r7, #48	; 0x30
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20008198 	.word	0x20008198
 800bc3c:	0800c055 	.word	0x0800c055
 800bc40:	20008230 	.word	0x20008230

0800bc44 <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b08e      	sub	sp, #56	; 0x38
 800bc48:	af02      	add	r7, sp, #8
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	607a      	str	r2, [r7, #4]
 800bc50:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	2200      	movs	r2, #0
 800bc56:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d101      	bne.n	800bc68 <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 800bc64:	2312      	movs	r3, #18
 800bc66:	e075      	b.n	800bd54 <_nx_packet_copy+0x110>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800bc68:	f107 0114 	add.w	r1, r7, #20
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7ff ff1f 	bl	800bab4 <_nx_packet_allocate>
 800bc76:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 800bc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 800bc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc80:	e068      	b.n	800bd54 <_nx_packet_copy+0x110>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc88:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	627b      	str	r3, [r7, #36]	; 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d110      	bne.n	800bcb6 <_nx_packet_copy+0x72>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	68da      	ldr	r2, [r3, #12]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 800bca0:	6978      	ldr	r0, [r7, #20]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	6919      	ldr	r1, [r3, #16]
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a3a      	ldr	r2, [r7, #32]
 800bcae:	f000 f855 	bl	800bd5c <_nx_packet_data_append>
 800bcb2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bcb4:	e00f      	b.n	800bcd6 <_nx_packet_copy+0x92>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	68da      	ldr	r2, [r3, #12]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	1ad3      	subs	r3, r2, r3
 800bcc0:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 800bcc2:	6978      	ldr	r0, [r7, #20]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6899      	ldr	r1, [r3, #8]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a3a      	ldr	r2, [r7, #32]
 800bcd0:	f000 f844 	bl	800bd5c <_nx_packet_data_append>
 800bcd4:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d005      	beq.n	800bce8 <_nx_packet_copy+0xa4>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 fb76 	bl	800c3d0 <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 800bce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce6:	e035      	b.n	800bd54 <_nx_packet_copy+0x110>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (packet_ptr);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1ca      	bne.n	800bc8e <_nx_packet_copy+0x4a>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfa:	689a      	ldr	r2, [r3, #8]
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	6919      	ldr	r1, [r3, #16]
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	69fa      	ldr	r2, [r7, #28]
 800bd0c:	440a      	add	r2, r1
 800bd0e:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	69fa      	ldr	r2, [r7, #28]
 800bd18:	1a8a      	subs	r2, r1, r2
 800bd1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	6919      	ldr	r1, [r3, #16]
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	69ba      	ldr	r2, [r7, #24]
 800bd30:	440a      	add	r2, r1
 800bd32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 800bd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d005      	beq.n	800bd4c <_nx_packet_copy+0x108>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 fb44 	bl	800c3d0 <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 800bd48:	2312      	movs	r3, #18
 800bd4a:	e003      	b.n	800bd54 <_nx_packet_copy+0x110>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 800bd4c:	697a      	ldr	r2, [r7, #20]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 800bd52:	2300      	movs	r3, #0
    }
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3730      	adds	r7, #48	; 0x30
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08c      	sub	sp, #48	; 0x30
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d016      	beq.n	800bda4 <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 800bd76:	2300      	movs	r3, #0
 800bd78:	627b      	str	r3, [r7, #36]	; 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	695a      	ldr	r2, [r3, #20]
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	4413      	add	r3, r2
 800bd90:	627b      	str	r3, [r7, #36]	; 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1ee      	bne.n	800bd80 <_nx_packet_data_append+0x24>
 800bda2:	e005      	b.n	800bdb0 <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	695a      	ldr	r2, [r3, #20]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 800bdb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d247      	bcs.n	800be48 <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 800bdbc:	e033      	b.n	800be26 <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800bdbe:	f107 0114 	add.w	r1, r7, #20
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	6838      	ldr	r0, [r7, #0]
 800bdc8:	f7ff fe74 	bl	800bab4 <_nx_packet_allocate>
 800bdcc:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d007      	beq.n	800bde4 <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 800bdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d002      	beq.n	800bde0 <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 800bdda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bddc:	f000 faf8 	bl	800c3d0 <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	e078      	b.n	800bed6 <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d012      	beq.n	800be10 <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 800bdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d007      	beq.n	800be02 <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 800bdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfe:	619a      	str	r2, [r3, #24]
 800be00:	e008      	b.n	800be14 <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be06:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0c:	605a      	str	r2, [r3, #4]
 800be0e:	e001      	b.n	800be14 <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	62fb      	str	r3, [r7, #44]	; 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	695a      	ldr	r2, [r3, #20]
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800be20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be22:	4413      	add	r3, r2
 800be24:	627b      	str	r3, [r7, #36]	; 0x24
        while (available_bytes < data_size)
 800be26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d3c7      	bcc.n	800bdbe <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 800be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be30:	2b00      	cmp	r3, #0
 800be32:	d003      	beq.n	800be3c <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 800be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be38:	605a      	str	r2, [r3, #4]
 800be3a:	e002      	b.n	800be42 <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be40:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 800be42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be44:	2200      	movs	r2, #0
 800be46:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	441a      	add	r2, r3
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d003      	beq.n	800be68 <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	617b      	str	r3, [r7, #20]
 800be66:	e032      	b.n	800bece <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 800be6c:	e02f      	b.n	800bece <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	695a      	ldr	r2, [r3, #20]
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	461a      	mov	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d202      	bcs.n	800be86 <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	623b      	str	r3, [r7, #32]
 800be84:	e005      	b.n	800be92 <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	695a      	ldr	r2, [r3, #20]
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified. */
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	6a3a      	ldr	r2, [r7, #32]
 800be98:	69f9      	ldr	r1, [r7, #28]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f006 fff2 	bl	8012e84 <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	6a3b      	ldr	r3, [r7, #32]
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	68d9      	ldr	r1, [r3, #12]
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	6a3a      	ldr	r2, [r7, #32]
 800beb0:	440a      	add	r2, r1
 800beb2:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d009      	beq.n	800bece <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 800beba:	69fa      	ldr	r2, [r7, #28]
 800bebc:	6a3b      	ldr	r3, [r7, #32]
 800bebe:	4413      	add	r3, r2
 800bec0:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 800bec8:	697a      	ldr	r2, [r7, #20]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	619a      	str	r2, [r3, #24]
    while (data_size)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1cc      	bne.n	800be6e <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3730      	adds	r7, #48	; 0x30
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <_nx_packet_data_extract_offset>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_extract_offset(NX_PACKET *packet_ptr, ULONG offset, VOID *buffer_start, ULONG buffer_length, ULONG *bytes_copied)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b08c      	sub	sp, #48	; 0x30
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	60f8      	str	r0, [r7, #12]
 800bee6:	60b9      	str	r1, [r7, #8]
 800bee8:	607a      	str	r2, [r7, #4]
 800beea:	603b      	str	r3, [r7, #0]
#endif /* NX_DISABLE_PACKET_CHAIN */
ULONG      bytes_to_copy;
NX_PACKET *working_packet_ptr;


    working_packet_ptr =  packet_ptr;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	61bb      	str	r3, [r7, #24]

    /* Check for an invalid offset or packet length.  */
    if (offset >= working_packet_ptr -> nx_packet_length)
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef4:	68ba      	ldr	r2, [r7, #8]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d309      	bcc.n	800bf0e <_nx_packet_data_extract_offset+0x30>
    {

        /* Note: A zero offset with a packet of zero length is ok. */
        if (offset == 0)
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d104      	bne.n	800bf0a <_nx_packet_data_extract_offset+0x2c>
        {

            *bytes_copied = 0;
 800bf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf02:	2200      	movs	r2, #0
 800bf04:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 800bf06:	2300      	movs	r3, #0
 800bf08:	e064      	b.n	800bfd4 <_nx_packet_data_extract_offset+0xf6>
        }

        /* Otherwise, this is an invalid offset or packet length. */
        return(NX_PACKET_OFFSET_ERROR);
 800bf0a:	2353      	movs	r3, #83	; 0x53
 800bf0c:	e062      	b.n	800bfd4 <_nx_packet_data_extract_offset+0xf6>
    }


    /* Initialize the source pointer to NULL.  */
    source_ptr =  NX_NULL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Traverse packet chain to offset.  */
    offset_bytes =  offset;
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	623b      	str	r3, [r7, #32]
#ifndef NX_DISABLE_PACKET_CHAIN
    while (working_packet_ptr)
 800bf16:	e016      	b.n	800bf46 <_nx_packet_data_extract_offset+0x68>
    {

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_fragment_length =  (ULONG)((working_packet_ptr -> nx_packet_append_ptr - working_packet_ptr -> nx_packet_prepend_ptr));
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	68da      	ldr	r2, [r3, #12]
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	617b      	str	r3, [r7, #20]

        /* Determine if we are at the offset location fragment in the packet chain  */
        if (packet_fragment_length > offset_bytes)
 800bf24:	697a      	ldr	r2, [r7, #20]
 800bf26:	6a3b      	ldr	r3, [r7, #32]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d905      	bls.n	800bf38 <_nx_packet_data_extract_offset+0x5a>
        {

            /* Setup loop to copy from this packet.  */
            source_ptr =  working_packet_ptr -> nx_packet_prepend_ptr + offset_bytes;
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	689a      	ldr	r2, [r3, #8]
 800bf30:	6a3b      	ldr	r3, [r7, #32]
 800bf32:	4413      	add	r3, r2
 800bf34:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Yes, get out of this  loop.  */
            break;
 800bf36:	e009      	b.n	800bf4c <_nx_packet_data_extract_offset+0x6e>
        }


        /* Decrement the remaining offset bytes*/
        offset_bytes = offset_bytes - packet_fragment_length;
 800bf38:	6a3a      	ldr	r2, [r7, #32]
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	623b      	str	r3, [r7, #32]

        /* Move to next packet.  */
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	61bb      	str	r3, [r7, #24]
    while (working_packet_ptr)
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1e5      	bne.n	800bf18 <_nx_packet_data_extract_offset+0x3a>
    source_ptr =  working_packet_ptr -> nx_packet_prepend_ptr + offset_bytes;

#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Check for a valid source pointer.  */
    if (source_ptr == NX_NULL)
 800bf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d101      	bne.n	800bf56 <_nx_packet_data_extract_offset+0x78>
    {
        return(NX_PACKET_OFFSET_ERROR);
 800bf52:	2353      	movs	r3, #83	; 0x53
 800bf54:	e03e      	b.n	800bfd4 <_nx_packet_data_extract_offset+0xf6>
    }

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	627b      	str	r3, [r7, #36]	; 0x24
    bytes_to_copy =   (packet_ptr -> nx_packet_length - offset);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	61fb      	str	r3, [r7, #28]

    /* Pickup the amount of bytes to copy.  */
    if (bytes_to_copy < buffer_length)
 800bf64:	69fa      	ldr	r2, [r7, #28]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d205      	bcs.n	800bf78 <_nx_packet_data_extract_offset+0x9a>
    {
        *bytes_copied =  bytes_to_copy;     /* the amount of bytes returned to the caller */
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6e:	69fa      	ldr	r2, [r7, #28]
 800bf70:	601a      	str	r2, [r3, #0]
        remaining_bytes =  bytes_to_copy;   /* for use in the copy loop */
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf76:	e026      	b.n	800bfc6 <_nx_packet_data_extract_offset+0xe8>
    }
    else
    {
        *bytes_copied =  buffer_length;
 800bf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	601a      	str	r2, [r3, #0]
        remaining_bytes =  buffer_length;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (working_packet_ptr && remaining_bytes)
 800bf82:	e020      	b.n	800bfc6 <_nx_packet_data_extract_offset+0xe8>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate bytes to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(working_packet_ptr -> nx_packet_append_ptr - source_ptr);
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	68da      	ldr	r2, [r3, #12]
 800bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	61fb      	str	r3, [r7, #28]
        if (remaining_bytes < bytes_to_copy)
 800bf8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d201      	bcs.n	800bf9a <_nx_packet_data_extract_offset+0xbc>
        {
            bytes_to_copy = remaining_bytes;
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	61fb      	str	r3, [r7, #28]
        }

        /* Copy data from this packet.  */
        memcpy(destination_ptr, source_ptr, bytes_to_copy); /* Use case of memcpy is verified. */
 800bf9a:	69fa      	ldr	r2, [r7, #28]
 800bf9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfa0:	f006 ff70 	bl	8012e84 <memcpy>

        /* Update the pointers. */
        destination_ptr += bytes_to_copy;
 800bfa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	627b      	str	r3, [r7, #36]	; 0x24
        remaining_bytes -= bytes_to_copy;
 800bfac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	61bb      	str	r3, [r7, #24]

        /* Check for a next packet.  */
        if (working_packet_ptr)
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <_nx_packet_data_extract_offset+0xe8>
        {

            /* Setup new source pointer.  */
            source_ptr = working_packet_ptr -> nx_packet_prepend_ptr;
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	62bb      	str	r3, [r7, #40]	; 0x28
    while (working_packet_ptr && remaining_bytes)
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <_nx_packet_data_extract_offset+0xf4>
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d1d8      	bne.n	800bf84 <_nx_packet_data_extract_offset+0xa6>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_EXTRACT_OFFSET, packet_ptr, buffer_length, *bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3730      	adds	r7, #48	; 0x30
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <_nx_packet_data_retrieve>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_RETRIEVE, packet_ptr, buffer_start, bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	61bb      	str	r3, [r7, #24]

    /* Pickup the amount of bytes to copy.  */
    *bytes_copied =  packet_ptr -> nx_packet_length;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	601a      	str	r2, [r3, #0]

    /* Setup the remaining bytes.  */
    remaining_bytes =  packet_ptr -> nx_packet_length;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff8:	61fb      	str	r3, [r7, #28]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (packet_ptr)
 800bffa:	e017      	b.n	800c02c <_nx_packet_data_retrieve+0x50>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate the bytes to copy in this packet. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	68da      	ldr	r2, [r3, #12]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	1ad3      	subs	r3, r2, r3
 800c006:	617b      	str	r3, [r7, #20]

        /* Copy data to destination. */
        /* Note: The buffer size must be not less than packet_ptr -> nx_packet_length.  */
        memcpy(destination_ptr, packet_ptr -> nx_packet_prepend_ptr, bytes_to_copy); /* Use case of memcpy is verified. The buffer is provided by user.  */
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	4619      	mov	r1, r3
 800c010:	69b8      	ldr	r0, [r7, #24]
 800c012:	f006 ff37 	bl	8012e84 <memcpy>

        remaining_bytes -= bytes_to_copy;
 800c016:	69fa      	ldr	r2, [r7, #28]
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	61fb      	str	r3, [r7, #28]
        destination_ptr += bytes_to_copy;
 800c01e:	69ba      	ldr	r2, [r7, #24]
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	4413      	add	r3, r2
 800c024:	61bb      	str	r3, [r7, #24]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	60fb      	str	r3, [r7, #12]
    while (packet_ptr)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1e4      	bne.n	800bffc <_nx_packet_data_retrieve+0x20>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if the packet chain was valid.  */
    if (remaining_bytes)
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d007      	beq.n	800c048 <_nx_packet_data_retrieve+0x6c>
    {

        /* Invalid packet chain.  Calculate the actual number of bytes
           copied.  */
        *bytes_copied =  *bytes_copied - remaining_bytes;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	1ad2      	subs	r2, r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	601a      	str	r2, [r3, #0]

        /* Return an error.  */
        return(NX_INVALID_PACKET);
 800c044:	2312      	movs	r3, #18
 800c046:	e000      	b.n	800c04a <_nx_packet_data_retrieve+0x6e>
    }

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3720      	adds	r7, #32
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
	...

0800c054 <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c062:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c064:	f3ef 8310 	mrs	r3, PRIMASK
 800c068:	617b      	str	r3, [r7, #20]
    return(posture);
 800c06a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c06c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c06e:	b672      	cpsid	i
    return(int_posture);
 800c070:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 800c072:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d042      	beq.n	800c102 <_nx_packet_pool_cleanup+0xae>
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d03f      	beq.n	800c102 <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800c086:	4a23      	ldr	r2, [pc, #140]	; (800c114 <_nx_packet_pool_cleanup+0xc0>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d13a      	bne.n	800c102 <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d103      	bne.n	800c0a4 <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	62da      	str	r2, [r3, #44]	; 0x2c
 800c0a2:	e012      	b.n	800c0ca <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d103      	bne.n	800c0b6 <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	62da      	str	r2, [r3, #44]	; 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800c0be:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800c0c8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ce:	1e5a      	subs	r2, r3, #1
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d8:	2b0c      	cmp	r3, #12
 800c0da:	d112      	bne.n	800c102 <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c0e4:	4b0c      	ldr	r3, [pc, #48]	; (800c118 <_nx_packet_pool_cleanup+0xc4>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	4a0b      	ldr	r2, [pc, #44]	; (800c118 <_nx_packet_pool_cleanup+0xc4>)
 800c0ec:	6013      	str	r3, [r2, #0]
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f383 8810 	msr	PRIMASK, r3
}
 800c0f8:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f004 fe6a 	bl	8010dd4 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800c100:	e005      	b.n	800c10e <_nx_packet_pool_cleanup+0xba>
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	f383 8810 	msr	PRIMASK, r3
}
 800c10c:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800c10e:	3720      	adds	r7, #32
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	5041434b 	.word	0x5041434b
 800c118:	20008230 	.word	0x20008230

0800c11c <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b092      	sub	sp, #72	; 0x48
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
 800c128:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	3303      	adds	r3, #3
 800c132:	f023 0303 	bic.w	r3, r3, #3
 800c136:	637b      	str	r3, [r7, #52]	; 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13c:	1ad2      	subs	r2, r2, r3
 800c13e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c140:	4413      	add	r3, r2
 800c142:	f023 0303 	bic.w	r3, r3, #3
 800c146:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 800c148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14a:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800c14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14e:	3338      	adds	r3, #56	; 0x38
 800c150:	633b      	str	r3, [r7, #48]	; 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	3303      	adds	r3, #3
 800c156:	f023 0303 	bic.w	r3, r3, #3
 800c15a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800c15c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800c164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4413      	add	r3, r2
 800c16a:	3303      	adds	r3, #3
 800c16c:	f023 0203 	bic.w	r2, r3, #3
 800c170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c172:	1ad3      	subs	r3, r2, r3
 800c174:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 800c176:	223c      	movs	r2, #60	; 0x3c
 800c178:	2100      	movs	r1, #0
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f006 fe90 	bl	8012ea0 <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	62da      	str	r2, [r3, #44]	; 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	631a      	str	r2, [r3, #48]	; 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c19c:	625a      	str	r2, [r3, #36]	; 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 800c1a4:	683a      	ldr	r2, [r7, #0]
 800c1a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1a8:	4413      	add	r3, r2
 800c1aa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 800c1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b2:	643b      	str	r3, [r7, #64]	; 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	4413      	add	r3, r2
 800c1ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1bc:	4413      	add	r3, r2
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 800c1c0:	e023      	b.n	800c20a <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 800c1c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	647b      	str	r3, [r7, #68]	; 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 800c1c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1cc:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 800c1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 800c1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800c1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e0:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 800c1e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e6:	441a      	add	r2, r3
 800c1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ea:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 800c1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f0:	4413      	add	r3, r2
 800c1f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1f4:	441a      	add	r2, r3
 800c1f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f8:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 800c1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1fc:	643b      	str	r3, [r7, #64]	; 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c202:	4413      	add	r3, r2
 800c204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c206:	4413      	add	r3, r2
 800c208:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (next_packet_ptr <= end_of_pool)
 800c20a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20e:	429a      	cmp	r2, r3
 800c210:	d9d7      	bls.n	800c1c2 <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	4413      	add	r3, r2
 800c218:	425b      	negs	r3, r3
 800c21a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c21c:	4413      	add	r3, r2
 800c21e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 800c220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c222:	2200      	movs	r2, #0
 800c224:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c22a:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c230:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	683a      	ldr	r2, [r7, #0]
 800c236:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c238:	f3ef 8310 	mrs	r3, PRIMASK
 800c23c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c23e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c240:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c242:	b672      	cpsid	i
    return(int_posture);
 800c244:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 800c246:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	4a19      	ldr	r2, [pc, #100]	; (800c2b0 <_nx_packet_pool_create+0x194>)
 800c24c:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 800c24e:	4b19      	ldr	r3, [pc, #100]	; (800c2b4 <_nx_packet_pool_create+0x198>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d012      	beq.n	800c27c <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 800c256:	4b17      	ldr	r3, [pc, #92]	; (800c2b4 <_nx_packet_pool_create+0x198>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25c:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800c25e:	4b15      	ldr	r3, [pc, #84]	; (800c2b4 <_nx_packet_pool_create+0x198>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	639a      	str	r2, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 800c266:	6a3b      	ldr	r3, [r7, #32]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6a3a      	ldr	r2, [r7, #32]
 800c270:	639a      	str	r2, [r3, #56]	; 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 800c272:	4b10      	ldr	r3, [pc, #64]	; (800c2b4 <_nx_packet_pool_create+0x198>)
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	635a      	str	r2, [r3, #52]	; 0x34
 800c27a:	e008      	b.n	800c28e <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 800c27c:	4a0d      	ldr	r2, [pc, #52]	; (800c2b4 <_nx_packet_pool_create+0x198>)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	635a      	str	r2, [r3, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 800c28e:	4b0a      	ldr	r3, [pc, #40]	; (800c2b8 <_nx_packet_pool_create+0x19c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	3301      	adds	r3, #1
 800c294:	4a08      	ldr	r2, [pc, #32]	; (800c2b8 <_nx_packet_pool_create+0x19c>)
 800c296:	6013      	str	r3, [r2, #0]
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	f383 8810 	msr	PRIMASK, r3
}
 800c2a2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3748      	adds	r7, #72	; 0x48
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	5041434b 	.word	0x5041434b
 800c2b4:	20008144 	.word	0x20008144
 800c2b8:	20008148 	.word	0x20008148

0800c2bc <_nx_packet_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_delete(NX_PACKET_POOL *pool_ptr)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b08e      	sub	sp, #56	; 0x38
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2c4:	f3ef 8310 	mrs	r3, PRIMASK
 800c2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c2cc:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2ce:	b672      	cpsid	i
    return(int_posture);
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

TX_THREAD *thread_ptr;      /* Working thread pointer  */


    /* Disable interrupts to remove the packet pool from the created list.  */
    TX_DISABLE
 800c2d2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Decrement the number of packet pools created.  */
    _nx_packet_pool_created_count--;
 800c2d4:	4b3b      	ldr	r3, [pc, #236]	; (800c3c4 <_nx_packet_pool_delete+0x108>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	4a3a      	ldr	r2, [pc, #232]	; (800c3c4 <_nx_packet_pool_delete+0x108>)
 800c2dc:	6013      	str	r3, [r2, #0]

    /* Clear the packet pool ID to make it invalid.  */
    pool_ptr -> nx_packet_pool_id =  0;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	601a      	str	r2, [r3, #0]

    /* See if the packet pool only one on the list.  */
    if (pool_ptr == pool_ptr -> nx_packet_pool_created_next)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d103      	bne.n	800c2f6 <_nx_packet_pool_delete+0x3a>
    {

        /* Only created packet pool, just set the created list to NULL.  */
        _nx_packet_pool_created_ptr =  NX_NULL;
 800c2ee:	4b36      	ldr	r3, [pc, #216]	; (800c3c8 <_nx_packet_pool_delete+0x10c>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	601a      	str	r2, [r3, #0]
 800c2f4:	e012      	b.n	800c31c <_nx_packet_pool_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            pool_ptr -> nx_packet_pool_created_previous;
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 800c2fe:	639a      	str	r2, [r3, #56]	; 0x38
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            pool_ptr -> nx_packet_pool_created_next;
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	6b52      	ldr	r2, [r2, #52]	; 0x34
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 800c308:	635a      	str	r2, [r3, #52]	; 0x34

        /* See if we have to update the created list head pointer.  */
        if (_nx_packet_pool_created_ptr == pool_ptr)
 800c30a:	4b2f      	ldr	r3, [pc, #188]	; (800c3c8 <_nx_packet_pool_delete+0x10c>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	429a      	cmp	r2, r3
 800c312:	d103      	bne.n	800c31c <_nx_packet_pool_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _nx_packet_pool_created_ptr =  pool_ptr -> nx_packet_pool_created_next;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c318:	4a2b      	ldr	r2, [pc, #172]	; (800c3c8 <_nx_packet_pool_delete+0x10c>)
 800c31a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800c31c:	4b2b      	ldr	r3, [pc, #172]	; (800c3cc <_nx_packet_pool_delete+0x110>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3301      	adds	r3, #1
 800c322:	4a2a      	ldr	r2, [pc, #168]	; (800c3cc <_nx_packet_pool_delete+0x110>)
 800c324:	6013      	str	r3, [r2, #0]
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32c:	f383 8810 	msr	PRIMASK, r3
}
 800c330:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the packet pool suspension list to resume any and all
       threads suspended on this packet pool.  */
    thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c336:	637b      	str	r3, [r7, #52]	; 0x34
    while (pool_ptr -> nx_packet_pool_suspended_count)
 800c338:	e026      	b.n	800c388 <_nx_packet_pool_delete+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c33a:	f3ef 8310 	mrs	r3, PRIMASK
 800c33e:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c340:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c342:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c344:	b672      	cpsid	i
    return(int_posture);
 800c346:	69bb      	ldr	r3, [r7, #24]
    {
        /* Lockout interrupts.  */
        TX_DISABLE
 800c348:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c34c:	2200      	movs	r2, #0
 800c34e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800c350:	4b1e      	ldr	r3, [pc, #120]	; (800c3cc <_nx_packet_pool_delete+0x110>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	3301      	adds	r3, #1
 800c356:	4a1d      	ldr	r2, [pc, #116]	; (800c3cc <_nx_packet_pool_delete+0x110>)
 800c358:	6013      	str	r3, [r2, #0]
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c35e:	6a3b      	ldr	r3, [r7, #32]
 800c360:	f383 8810 	msr	PRIMASK, r3
}
 800c364:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the return status in the thread to NX_POOL_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  NX_POOL_DELETED;
 800c366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c368:	2230      	movs	r2, #48	; 0x30
 800c36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c372:	637b      	str	r3, [r7, #52]	; 0x34

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800c374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c378:	4618      	mov	r0, r3
 800c37a:	f004 fd2b 	bl	8010dd4 <_tx_thread_system_resume>

        /* Decrease the suspended count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c382:	1e5a      	subs	r2, r3, #1
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	631a      	str	r2, [r3, #48]	; 0x30
    while (pool_ptr -> nx_packet_pool_suspended_count)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d1d4      	bne.n	800c33a <_nx_packet_pool_delete+0x7e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c390:	f3ef 8310 	mrs	r3, PRIMASK
 800c394:	613b      	str	r3, [r7, #16]
    return(posture);
 800c396:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800c398:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c39a:	b672      	cpsid	i
    return(int_posture);
 800c39c:	68fb      	ldr	r3, [r7, #12]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800c39e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800c3a0:	4b0a      	ldr	r3, [pc, #40]	; (800c3cc <_nx_packet_pool_delete+0x110>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	4a09      	ldr	r2, [pc, #36]	; (800c3cc <_nx_packet_pool_delete+0x110>)
 800c3a8:	6013      	str	r3, [r2, #0]
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f383 8810 	msr	PRIMASK, r3
}
 800c3b4:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(pool_ptr);

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800c3b6:	f004 fcd3 	bl	8010d60 <_tx_thread_system_preempt_check>

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3738      	adds	r7, #56	; 0x38
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	20008148 	.word	0x20008148
 800c3c8:	20008144 	.word	0x20008144
 800c3cc:	20008230 	.word	0x20008230

0800c3d0 <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b08a      	sub	sp, #40	; 0x28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 800c3d8:	e0a2      	b.n	800c520 <_nx_packet_release+0x150>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800c3e2:	d011      	beq.n	800c408 <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d009      	beq.n	800c404 <_nx_packet_release+0x34>
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a4f      	ldr	r2, [pc, #316]	; (800c534 <_nx_packet_release+0x164>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d104      	bne.n	800c404 <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	699b      	ldr	r3, [r3, #24]
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 800c404:	2307      	movs	r3, #7
 800c406:	e090      	b.n	800c52a <_nx_packet_release+0x15a>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c40e:	f3ef 8310 	mrs	r3, PRIMASK
 800c412:	617b      	str	r3, [r7, #20]
    return(posture);
 800c414:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c416:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c418:	b672      	cpsid	i
    return(int_posture);
 800c41a:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 800c41c:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c428:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d05f      	beq.n	800c4f0 <_nx_packet_release+0x120>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c434:	69ba      	ldr	r2, [r7, #24]
 800c436:	429a      	cmp	r2, r3
 800c438:	d103      	bne.n	800c442 <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	2200      	movs	r2, #0
 800c43e:	62da      	str	r2, [r3, #44]	; 0x2c
 800c440:	e00d      	b.n	800c45e <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 800c44e:	69ba      	ldr	r2, [r7, #24]
 800c450:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800c452:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 800c458:	69ba      	ldr	r2, [r7, #24]
 800c45a:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800c45c:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c462:	1e5a      	subs	r2, r3, #1
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	631a      	str	r2, [r3, #48]	; 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	2200      	movs	r2, #0
 800c46c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c46e:	4b32      	ldr	r3, [pc, #200]	; (800c538 <_nx_packet_release+0x168>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	3301      	adds	r3, #1
 800c474:	4a30      	ldr	r2, [pc, #192]	; (800c538 <_nx_packet_release+0x168>)
 800c476:	6013      	str	r3, [r2, #0]
 800c478:	6a3b      	ldr	r3, [r7, #32]
 800c47a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f383 8810 	msr	PRIMASK, r3
}
 800c482:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	691a      	ldr	r2, [r3, #16]
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4a4:	441a      	add	r2, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	689a      	ldr	r2, [r3, #8]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800c4be:	621a      	str	r2, [r3, #32]
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800c4e8:	69b8      	ldr	r0, [r7, #24]
 800c4ea:	f004 fc73 	bl	8010dd4 <_tx_thread_system_resume>
 800c4ee:	e015      	b.n	800c51c <_nx_packet_release+0x14c>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f6:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	69da      	ldr	r2, [r3, #28]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	1c5a      	adds	r2, r3, #1
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	609a      	str	r2, [r3, #8]
 800c510:	6a3b      	ldr	r3, [r7, #32]
 800c512:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f383 8810 	msr	PRIMASK, r3
}
 800c51a:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 800c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51e:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	f47f af59 	bne.w	800c3da <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3728      	adds	r7, #40	; 0x28
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	5041434b 	.word	0x5041434b
 800c538:	20008230 	.word	0x20008230

0800c53c <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c544:	f3ef 8310 	mrs	r3, PRIMASK
 800c548:	617b      	str	r3, [r7, #20]
    return(posture);
 800c54a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c54c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c54e:	b672      	cpsid	i
    return(int_posture);
 800c550:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 800c552:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a1b      	ldr	r3, [r3, #32]
 800c558:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800c55c:	d025      	beq.n	800c5aa <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800c562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c566:	d020      	beq.n	800c5aa <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 800c56e:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800c57a:	441a      	add	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800c58a:	1a9a      	subs	r2, r3, r2
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f383 8810 	msr	PRIMASK, r3
}
 800c5a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	61fb      	str	r3, [r7, #28]
 800c5a8:	e009      	b.n	800c5be <_nx_packet_transmit_release+0x82>
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	f383 8810 	msr	PRIMASK, r3
}
 800c5b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7ff ff0a 	bl	800c3d0 <_nx_packet_release>
 800c5bc:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800c5be:	69fb      	ldr	r3, [r7, #28]
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3720      	adds	r7, #32
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b088      	sub	sp, #32
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5d2:	f3ef 8310 	mrs	r3, PRIMASK
 800c5d6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c5d8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c5da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5dc:	b672      	cpsid	i
    return(int_posture);
 800c5de:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800c5e0:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d110      	bne.n	800c60e <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c5f2:	1c5a      	adds	r2, r3, #1
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	f383 8810 	msr	PRIMASK, r3
}
 800c604:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800c606:	6838      	ldr	r0, [r7, #0]
 800c608:	f7ff fee2 	bl	800c3d0 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800c60c:	e02f      	b.n	800c66e <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 800c614:	2b00      	cmp	r3, #0
 800c616:	d011      	beq.n	800c63c <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2200      	movs	r2, #0
 800c626:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	683a      	ldr	r2, [r7, #0]
 800c62c:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f383 8810 	msr	PRIMASK, r3
}
 800c63a:	e018      	b.n	800c66e <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	683a      	ldr	r2, [r7, #0]
 800c640:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	683a      	ldr	r2, [r7, #0]
 800c648:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	2200      	movs	r2, #0
 800c650:	61da      	str	r2, [r3, #28]
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	f383 8810 	msr	PRIMASK, r3
}
 800c65c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c664:	2200      	movs	r2, #0
 800c666:	2120      	movs	r1, #32
 800c668:	4618      	mov	r0, r3
 800c66a:	f002 fcbf 	bl	800efec <_tx_event_flags_set>
    }
}
 800c66e:	3720      	adds	r7, #32
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b08a      	sub	sp, #40	; 0x28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c682:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c684:	f3ef 8310 	mrs	r3, PRIMASK
 800c688:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c68a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c68c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c68e:	b672      	cpsid	i
    return(int_posture);
 800c690:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800c692:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d043      	beq.n	800c724 <_nx_udp_bind_cleanup+0xb0>
 800c69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d040      	beq.n	800c724 <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a4:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800c6a6:	4a24      	ldr	r2, [pc, #144]	; (800c738 <_nx_udp_bind_cleanup+0xc4>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d13b      	bne.n	800c724 <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6bc:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d103      	bne.n	800c6d0 <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	661a      	str	r2, [r3, #96]	; 0x60
 800c6ce:	e00d      	b.n	800c6ec <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800c6e0:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800c6ea:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6f0:	1e5a      	subs	r2, r3, #1
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	665a      	str	r2, [r3, #100]	; 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6fa:	2b0c      	cmp	r3, #12
 800c6fc:	d112      	bne.n	800c724 <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2223      	movs	r2, #35	; 0x23
 800c702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c706:	4b0d      	ldr	r3, [pc, #52]	; (800c73c <_nx_udp_bind_cleanup+0xc8>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	3301      	adds	r3, #1
 800c70c:	4a0b      	ldr	r2, [pc, #44]	; (800c73c <_nx_udp_bind_cleanup+0xc8>)
 800c70e:	6013      	str	r3, [r2, #0]
 800c710:	6a3b      	ldr	r3, [r7, #32]
 800c712:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	f383 8810 	msr	PRIMASK, r3
}
 800c71a:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f004 fb59 	bl	8010dd4 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800c722:	e005      	b.n	800c730 <_nx_udp_bind_cleanup+0xbc>
 800c724:	6a3b      	ldr	r3, [r7, #32]
 800c726:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f383 8810 	msr	PRIMASK, r3
}
 800c72e:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800c730:	3728      	adds	r7, #40	; 0x28
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	55445020 	.word	0x55445020
 800c73c:	20008230 	.word	0x20008230

0800c740 <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a05      	ldr	r2, [pc, #20]	; (800c760 <_nx_udp_enable+0x20>)
 800c74c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800c750:	2300      	movs	r3, #0
}
 800c752:	4618      	mov	r0, r3
 800c754:	370c      	adds	r7, #12
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
 800c75e:	bf00      	nop
 800c760:	0800c859 	.word	0x0800c859

0800c764 <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b08a      	sub	sp, #40	; 0x28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	0a1a      	lsrs	r2, r3, #8
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	4413      	add	r3, r2
 800c77c:	f003 031f 	and.w	r3, r3, #31
 800c780:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800c788:	f04f 31ff 	mov.w	r1, #4294967295
 800c78c:	4618      	mov	r0, r3
 800c78e:	f003 f871 	bl	800f874 <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	33de      	adds	r3, #222	; 0xde
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	4413      	add	r3, r2
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 800c7a4:	6a3b      	ldr	r3, [r7, #32]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d010      	beq.n	800c7cc <_nx_udp_free_port_find+0x68>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 800c7ae:	6a3b      	ldr	r3, [r7, #32]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d102      	bne.n	800c7be <_nx_udp_free_port_find+0x5a>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	627b      	str	r3, [r7, #36]	; 0x24

                    /* Get out of the loop.  */
                    break;
 800c7bc:	e006      	b.n	800c7cc <_nx_udp_free_port_find+0x68>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800c7be:	6a3b      	ldr	r3, [r7, #32]
 800c7c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7c2:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 800c7c4:	6a3a      	ldr	r2, [r7, #32]
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d1f0      	bne.n	800c7ae <_nx_udp_free_port_find+0x4a>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f003 fac6 	bl	800fd64 <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d104      	bne.n	800c7e8 <_nx_udp_free_port_find+0x84>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	e00e      	b.n	800c806 <_nx_udp_free_port_find+0xa2>
        }

        /* Move to the next port.  */
        port++;
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7f4:	d302      	bcc.n	800c7fc <_nx_udp_free_port_find+0x98>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 800c7f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c7fa:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 800c7fc:	69fa      	ldr	r2, [r7, #28]
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	429a      	cmp	r2, r3
 800c802:	d1b7      	bne.n	800c774 <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 800c804:	2345      	movs	r3, #69	; 0x45
}
 800c806:	4618      	mov	r0, r3
 800c808:	3728      	adds	r7, #40	; 0x28
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <_nx_udp_packet_info_extract>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_packet_info_extract(NX_PACKET *packet_ptr, ULONG *ip_address,
                                  UINT *protocol, UINT *port, UINT *interface_index)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b08a      	sub	sp, #40	; 0x28
 800c812:	af02      	add	r7, sp, #8
 800c814:	60f8      	str	r0, [r7, #12]
 800c816:	60b9      	str	r1, [r7, #8]
 800c818:	607a      	str	r2, [r7, #4]
 800c81a:	603b      	str	r3, [r7, #0]
NXD_ADDRESS nxd_ip_address;
UINT        status;


    /* Call the NXD version of the service. */
    status = _nxd_udp_packet_info_extract(packet_ptr, &nxd_ip_address, protocol, port, interface_index);
 800c81c:	f107 0114 	add.w	r1, r7, #20
 800c820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f000 ffe6 	bl	800d7fa <_nxd_udp_packet_info_extract>
 800c82e:	61f8      	str	r0, [r7, #28]

    if (status == NX_SUCCESS)
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10b      	bne.n	800c84e <_nx_udp_packet_info_extract+0x40>
    {
        if (ip_address)
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d008      	beq.n	800c84e <_nx_udp_packet_info_extract+0x40>
        {

            /*lint -e{644} suppress variable might not be initialized, since "nxd_ip_address" was initialized in _nxd_udp_packet_info_extract. */
            if (nxd_ip_address.nxd_ip_version == NX_IP_VERSION_V4)
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	2b04      	cmp	r3, #4
 800c840:	d103      	bne.n	800c84a <_nx_udp_packet_info_extract+0x3c>
            {
                *ip_address = nxd_ip_address.nxd_ip_address.v4;
 800c842:	69ba      	ldr	r2, [r7, #24]
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	601a      	str	r2, [r3, #0]
 800c848:	e001      	b.n	800c84e <_nx_udp_packet_info_extract+0x40>
            }
            else
            {
                return(NX_INVALID_PACKET);
 800c84a:	2312      	movs	r3, #18
 800c84c:	e000      	b.n	800c850 <_nx_udp_packet_info_extract+0x42>
            }
        }
    }

    return(status);
 800c84e:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(port);
    NX_PARAMETER_NOT_USED(interface_index);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800c850:	4618      	mov	r0, r3
 800c852:	3720      	adds	r7, #32
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b094      	sub	sp, #80	; 0x50
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c868:	1c5a      	adds	r2, r3, #1
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c874:	2b07      	cmp	r3, #7
 800c876:	d80a      	bhi.n	800c88e <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c87e:	1c5a      	adds	r2, r3, #1
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800c886:	6838      	ldr	r0, [r7, #0]
 800c888:	f7ff fda2 	bl	800c3d0 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800c88c:	e1d8      	b.n	800cc40 <_nx_udp_packet_receive+0x3e8>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800c894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	ba1a      	rev	r2, r3
 800c89a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c89c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800c89e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	ba1a      	rev	r2, r3
 800c8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8a6:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	0c1b      	lsrs	r3, r3, #16
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d20a      	bcs.n	800c8cc <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c8bc:	1c5a      	adds	r2, r3, #1
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800c8c4:	6838      	ldr	r0, [r7, #0]
 800c8c6:	f7ff fd83 	bl	800c3d0 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800c8ca:	e1b9      	b.n	800cc40 <_nx_udp_packet_receive+0x3e8>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800c8cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800c8d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8d6:	0a1a      	lsrs	r2, r3, #8
 800c8d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8da:	4413      	add	r3, r2
 800c8dc:	f003 031f 	and.w	r3, r3, #31
 800c8e0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800c8e2:	4b8f      	ldr	r3, [pc, #572]	; (800cb20 <_nx_udp_packet_receive+0x2c8>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d010      	beq.n	800c90c <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c8ea:	f3ef 8305 	mrs	r3, IPSR
 800c8ee:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800c8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8f2:	4b8c      	ldr	r3, [pc, #560]	; (800cb24 <_nx_udp_packet_receive+0x2cc>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d107      	bne.n	800c90c <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800c902:	f04f 31ff 	mov.w	r1, #4294967295
 800c906:	4618      	mov	r0, r3
 800c908:	f002 ffb4 	bl	800f874 <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c910:	33de      	adds	r3, #222	; 0xde
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	4413      	add	r3, r2
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 800c91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d13e      	bne.n	800c99e <_nx_udp_packet_receive+0x146>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c926:	2b04      	cmp	r3, #4
 800c928:	d114      	bne.n	800c954 <_nx_udp_packet_receive+0xfc>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00f      	beq.n	800c954 <_nx_udp_packet_receive+0xfc>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800c934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	ba1a      	rev	r2, r3
 800c93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c93c:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800c93e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	ba1a      	rev	r2, r3
 800c944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c946:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800c948:	2300      	movs	r3, #0
 800c94a:	4a77      	ldr	r2, [pc, #476]	; (800cb28 <_nx_udp_packet_receive+0x2d0>)
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7fc fe3a 	bl	80095c8 <_nx_icmpv4_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c95a:	1c5a      	adds	r2, r3, #1
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c968:	1c5a      	adds	r2, r3, #1
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800c970:	4b6b      	ldr	r3, [pc, #428]	; (800cb20 <_nx_udp_packet_receive+0x2c8>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00e      	beq.n	800c996 <_nx_udp_packet_receive+0x13e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c978:	f3ef 8305 	mrs	r3, IPSR
 800c97c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800c97e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c980:	4b68      	ldr	r3, [pc, #416]	; (800cb24 <_nx_udp_packet_receive+0x2cc>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4313      	orrs	r3, r2
 800c986:	2b00      	cmp	r3, #0
 800c988:	d105      	bne.n	800c996 <_nx_udp_packet_receive+0x13e>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800c990:	4618      	mov	r0, r3
 800c992:	f003 f9e7 	bl	800fd64 <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800c996:	6838      	ldr	r0, [r7, #0]
 800c998:	f7ff fd1a 	bl	800c3d0 <_nx_packet_release>

        /* Just return.  */
        return;
 800c99c:	e150      	b.n	800cc40 <_nx_udp_packet_receive+0x3e8>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 800c99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d119      	bne.n	800c9dc <_nx_udp_packet_receive+0x184>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 800c9a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	1c5a      	adds	r2, r3, #1
 800c9ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9b0:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9bc:	4413      	add	r3, r2
 800c9be:	f1a3 0208 	sub.w	r2, r3, #8
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800c9c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9ca:	69da      	ldr	r2, [r3, #28]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d0:	4413      	add	r3, r2
 800c9d2:	f1a3 0208 	sub.w	r2, r3, #8
 800c9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9d8:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 800c9da:	e00b      	b.n	800c9f4 <_nx_udp_packet_receive+0x19c>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 800c9dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9e0:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9e6:	33de      	adds	r3, #222	; 0xde
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d1d4      	bne.n	800c99e <_nx_udp_packet_receive+0x146>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800c9f4:	4b4a      	ldr	r3, [pc, #296]	; (800cb20 <_nx_udp_packet_receive+0x2c8>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00e      	beq.n	800ca1a <_nx_udp_packet_receive+0x1c2>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c9fc:	f3ef 8305 	mrs	r3, IPSR
 800ca00:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800ca02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca04:	4b47      	ldr	r3, [pc, #284]	; (800cb24 <_nx_udp_packet_receive+0x2cc>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d105      	bne.n	800ca1a <_nx_udp_packet_receive+0x1c2>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ca14:	4618      	mov	r0, r3
 800ca16:	f003 f9a5 	bl	800fd64 <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 800ca1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d02b      	beq.n	800ca7c <_nx_udp_packet_receive+0x224>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ca2a:	1c5a      	adds	r2, r3, #1
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ca38:	1c5a      	adds	r2, r3, #1
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ca46:	2b04      	cmp	r3, #4
 800ca48:	d114      	bne.n	800ca74 <_nx_udp_packet_receive+0x21c>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d00f      	beq.n	800ca74 <_nx_udp_packet_receive+0x21c>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800ca54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	ba1a      	rev	r2, r3
 800ca5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca5c:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ca5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	ba1a      	rev	r2, r3
 800ca64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca66:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800ca68:	2300      	movs	r3, #0
 800ca6a:	4a2f      	ldr	r2, [pc, #188]	; (800cb28 <_nx_udp_packet_receive+0x2d0>)
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7fc fdaa 	bl	80095c8 <_nx_icmpv4_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800ca74:	6838      	ldr	r0, [r7, #0]
 800ca76:	f7ff fcab 	bl	800c3d0 <_nx_packet_release>
        return;
 800ca7a:	e0e1      	b.n	800cc40 <_nx_udp_packet_receive+0x3e8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca7c:	f3ef 8310 	mrs	r3, PRIMASK
 800ca80:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800ca82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800ca84:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca86:	b672      	cpsid	i
    return(int_posture);
 800ca88:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800ca8a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 800ca8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a26      	ldr	r2, [pc, #152]	; (800cb2c <_nx_udp_packet_receive+0x2d4>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d01c      	beq.n	800cad0 <_nx_udp_packet_receive+0x278>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ca9c:	1c5a      	adds	r2, r3, #1
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 800cab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab6:	1c5a      	adds	r2, r3, #1
 800cab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caba:	625a      	str	r2, [r3, #36]	; 0x24
 800cabc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cabe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	f383 8810 	msr	PRIMASK, r3
}
 800cac6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800cac8:	6838      	ldr	r0, [r7, #0]
 800caca:	f7ff fc81 	bl	800c3d0 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800cace:	e0b7      	b.n	800cc40 <_nx_udp_packet_receive+0x3e8>
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 800cad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cada:	33de      	adds	r3, #222	; 0xde
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	4413      	add	r3, r2
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d00b      	beq.n	800cb00 <_nx_udp_packet_receive+0x2a8>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d106      	bne.n	800cb00 <_nx_udp_packet_receive+0x2a8>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf6:	33de      	adds	r3, #222	; 0xde
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	4413      	add	r3, r2
 800cafc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cafe:	605a      	str	r2, [r3, #4]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800cb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb04:	637b      	str	r3, [r7, #52]	; 0x34
    if (thread_ptr)
 800cb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d03e      	beq.n	800cb8a <_nx_udp_packet_receive+0x332>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800cb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d10c      	bne.n	800cb30 <_nx_udp_packet_receive+0x2d8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800cb16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb18:	2200      	movs	r2, #0
 800cb1a:	659a      	str	r2, [r3, #88]	; 0x58
 800cb1c:	e016      	b.n	800cb4c <_nx_udp_packet_receive+0x2f4>
 800cb1e:	bf00      	nop
 800cb20:	20008198 	.word	0x20008198
 800cb24:	2000008c 	.word	0x2000008c
 800cb28:	03030000 	.word	0x03030000
 800cb2c:	55445020 	.word	0x55445020
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800cb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cb34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb36:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800cb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800cb3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800cb40:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800cb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800cb46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb48:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800cb4a:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800cb4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb50:	1e5a      	subs	r2, r3, #1
 800cb52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb54:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb58:	2200      	movs	r2, #0
 800cb5a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800cb5c:	4b3a      	ldr	r3, [pc, #232]	; (800cc48 <_nx_udp_packet_receive+0x3f0>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3301      	adds	r3, #1
 800cb62:	4a39      	ldr	r2, [pc, #228]	; (800cc48 <_nx_udp_packet_receive+0x3f0>)
 800cb64:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800cb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	601a      	str	r2, [r3, #0]
 800cb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb70:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	f383 8810 	msr	PRIMASK, r3
}
 800cb78:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800cb82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cb84:	f004 f926 	bl	8010dd4 <_tx_thread_system_resume>
 800cb88:	e054      	b.n	800cc34 <_nx_udp_packet_receive+0x3dc>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800cb8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d03c      	beq.n	800cc0c <_nx_udp_packet_receive+0x3b4>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 800cb92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800cb9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb9c:	683a      	ldr	r2, [r7, #0]
 800cb9e:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	2200      	movs	r2, #0
 800cba4:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 800cba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbaa:	1c5a      	adds	r2, r3, #1
 800cbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbae:	63da      	str	r2, [r3, #60]	; 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 800cbb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 800cbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d921      	bls.n	800cc00 <_nx_udp_packet_receive+0x3a8>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800cbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbc0:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	69da      	ldr	r2, [r3, #28]
 800cbc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc8:	645a      	str	r2, [r3, #68]	; 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 800cbca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbce:	1e5a      	subs	r2, r3, #1
 800cbd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbd2:	63da      	str	r2, [r3, #60]	; 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 800cbe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe6:	1c5a      	adds	r2, r3, #1
 800cbe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbea:	625a      	str	r2, [r3, #36]	; 0x24
 800cbec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	f383 8810 	msr	PRIMASK, r3
}
 800cbf6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800cbf8:	6838      	ldr	r0, [r7, #0]
 800cbfa:	f7ff fbe9 	bl	800c3d0 <_nx_packet_release>
 800cbfe:	e019      	b.n	800cc34 <_nx_udp_packet_receive+0x3dc>
 800cc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc02:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	f383 8810 	msr	PRIMASK, r3
}
 800cc0a:	e013      	b.n	800cc34 <_nx_udp_packet_receive+0x3dc>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 800cc0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	645a      	str	r2, [r3, #68]	; 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800cc12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc14:	683a      	ldr	r2, [r7, #0]
 800cc16:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 800cc1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc22:	1c5a      	adds	r2, r3, #1
 800cc24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc26:	63da      	str	r2, [r3, #60]	; 0x3c
 800cc28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f383 8810 	msr	PRIMASK, r3
}
 800cc32:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d002      	beq.n	800cc40 <_nx_udp_packet_receive+0x3e8>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cc3e:	4798      	blx	r3
    }
}
 800cc40:	3750      	adds	r7, #80	; 0x50
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	20008230 	.word	0x20008230

0800cc4c <_nx_udp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b088      	sub	sp, #32
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc5c:	f3ef 8310 	mrs	r3, PRIMASK
 800cc60:	617b      	str	r3, [r7, #20]
    return(posture);
 800cc62:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800cc64:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc66:	b672      	cpsid	i
    return(int_posture);
 800cc68:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800cc6a:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d03d      	beq.n	800ccf0 <_nx_udp_receive_cleanup+0xa4>
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d03a      	beq.n	800ccf0 <_nx_udp_receive_cleanup+0xa4>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800cc7e:	4a21      	ldr	r2, [pc, #132]	; (800cd04 <_nx_udp_receive_cleanup+0xb8>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d135      	bne.n	800ccf0 <_nx_udp_receive_cleanup+0xa4>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d103      	bne.n	800cc9c <_nx_udp_receive_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	2200      	movs	r2, #0
 800cc98:	659a      	str	r2, [r3, #88]	; 0x58
 800cc9a:	e00d      	b.n	800ccb8 <_nx_udp_receive_cleanup+0x6c>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800ccac:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800ccb6:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccbc:	1e5a      	subs	r2, r3, #1
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc6:	2b0c      	cmp	r3, #12
 800ccc8:	d112      	bne.n	800ccf0 <_nx_udp_receive_cleanup+0xa4>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2201      	movs	r2, #1
 800ccce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ccd2:	4b0d      	ldr	r3, [pc, #52]	; (800cd08 <_nx_udp_receive_cleanup+0xbc>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	4a0b      	ldr	r2, [pc, #44]	; (800cd08 <_nx_udp_receive_cleanup+0xbc>)
 800ccda:	6013      	str	r3, [r2, #0]
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f383 8810 	msr	PRIMASK, r3
}
 800cce6:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f004 f873 	bl	8010dd4 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800ccee:	e005      	b.n	800ccfc <_nx_udp_receive_cleanup+0xb0>
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	f383 8810 	msr	PRIMASK, r3
}
 800ccfa:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800ccfc:	3720      	adds	r7, #32
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	55445020 	.word	0x55445020
 800cd08:	20008230 	.word	0x20008230

0800cd0c <_nx_udp_socket_bind>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b092      	sub	sp, #72	; 0x48
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
#endif /* NX_NAT_ENABLE */
NX_IP         *ip_ptr;
TX_THREAD     *thread_ptr;
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;
UINT           status = NX_SUCCESS;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	643b      	str	r3, [r7, #64]	; 0x40


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	68db      	ldr	r3, [r3, #12]
 800cd20:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800cd22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd24:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800cd28:	f04f 31ff 	mov.w	r1, #4294967295
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f002 fda1 	bl	800f874 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d103      	bne.n	800cd42 <_nx_udp_socket_bind+0x36>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d007      	beq.n	800cd52 <_nx_udp_socket_bind+0x46>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800cd42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd44:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f003 f80b 	bl	800fd64 <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 800cd4e:	2322      	movs	r3, #34	; 0x22
 800cd50:	e0ff      	b.n	800cf52 <_nx_udp_socket_bind+0x246>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d11e      	bne.n	800cd96 <_nx_udp_socket_bind+0x8a>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 800cd58:	f006 f938 	bl	8012fcc <rand>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	425a      	negs	r2, r3
 800cd60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cd64:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800cd68:	bf58      	it	pl
 800cd6a:	4253      	negpl	r3, r2
 800cd6c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800cd70:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	f107 0208 	add.w	r2, r7, #8
 800cd78:	4619      	mov	r1, r3
 800cd7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cd7c:	f7ff fcf2 	bl	800c764 <_nx_udp_free_port_find>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d007      	beq.n	800cd96 <_nx_udp_socket_bind+0x8a>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800cd86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd88:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f002 ffe9 	bl	800fd64 <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 800cd92:	2345      	movs	r3, #69	; 0x45
 800cd94:	e0dd      	b.n	800cf52 <_nx_udp_socket_bind+0x246>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 800cd96:	68ba      	ldr	r2, [r7, #8]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	0a1a      	lsrs	r2, r3, #8
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	4413      	add	r3, r2
 800cda4:	f003 031f 	and.w	r3, r3, #31
 800cda8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800cdaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdae:	33de      	adds	r3, #222	; 0xde
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	4413      	add	r3, r2
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 800cdb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00f      	beq.n	800cdde <_nx_udp_socket_bind+0xd2>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 800cdbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdc0:	637b      	str	r3, [r7, #52]	; 0x34
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 800cdc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdc4:	689a      	ldr	r2, [r3, #8]
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d007      	beq.n	800cddc <_nx_udp_socket_bind+0xd0>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800cdcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdd0:	647b      	str	r3, [r7, #68]	; 0x44
        } while (search_ptr != end_ptr);
 800cdd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cdd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d1f3      	bne.n	800cdc2 <_nx_udp_socket_bind+0xb6>
 800cdda:	e000      	b.n	800cdde <_nx_udp_socket_bind+0xd2>
                break;
 800cddc:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 800cdde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d004      	beq.n	800cdee <_nx_udp_socket_bind+0xe2>
 800cde4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cde6:	689a      	ldr	r2, [r3, #8]
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d047      	beq.n	800ce7e <_nx_udp_socket_bind+0x172>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdee:	f3ef 8310 	mrs	r3, PRIMASK
 800cdf2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800cdf6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800cdf8:	b672      	cpsid	i
    return(int_posture);
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800cdfc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if the list is NULL.  */
        if (search_ptr)
 800cdfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d022      	beq.n	800ce4a <_nx_udp_socket_bind+0x13e>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 800ce04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce08:	33de      	adds	r3, #222	; 0xde
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	4413      	add	r3, r2
 800ce0e:	685a      	ldr	r2, [r3, #4]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800ce14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce18:	33de      	adds	r3, #222	; 0xde
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	4413      	add	r3, r2
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 800ce26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2a:	33de      	adds	r3, #222	; 0xde
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	4413      	add	r3, r2
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	64da      	str	r2, [r3, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 800ce38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	33de      	adds	r3, #222	; 0xde
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4413      	add	r3, r2
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	651a      	str	r2, [r3, #80]	; 0x50
 800ce48:	e00c      	b.n	800ce64 <_nx_udp_socket_bind+0x158>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 800ce56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5a:	33de      	adds	r3, #222	; 0xde
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4413      	add	r3, r2
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	605a      	str	r2, [r3, #4]
 800ce64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce66:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce68:	6a3b      	ldr	r3, [r7, #32]
 800ce6a:	f383 8810 	msr	PRIMASK, r3
}
 800ce6e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ce70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce72:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ce76:	4618      	mov	r0, r3
 800ce78:	f002 ff74 	bl	800fd64 <_tx_mutex_put>
 800ce7c:	e068      	b.n	800cf50 <_nx_udp_socket_bind+0x244>
    }
    else if (wait_option)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d05d      	beq.n	800cf40 <_nx_udp_socket_bind+0x234>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce84:	f3ef 8310 	mrs	r3, PRIMASK
 800ce88:	61fb      	str	r3, [r7, #28]
    return(posture);
 800ce8a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800ce8c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce8e:	b672      	cpsid	i
    return(int_posture);
 800ce90:	69bb      	ldr	r3, [r7, #24]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800ce92:	633b      	str	r3, [r7, #48]	; 0x30

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 800ce94:	4b31      	ldr	r3, [pc, #196]	; (800cf5c <_nx_udp_socket_bind+0x250>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 800ce9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9c:	4a30      	ldr	r2, [pc, #192]	; (800cf60 <_nx_udp_socket_bind+0x254>)
 800ce9e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800cea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ceaa:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceb0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 800ceb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d012      	beq.n	800cee0 <_nx_udp_socket_bind+0x1d4>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 800ceba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cebc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec0:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 800cec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cec6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	675a      	str	r2, [r3, #116]	; 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 800cecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ced0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ced2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ced4:	671a      	str	r2, [r3, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800ced6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ced8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cedc:	675a      	str	r2, [r3, #116]	; 0x74
 800cede:	e008      	b.n	800cef2 <_nx_udp_socket_bind+0x1e6>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 800cee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cee4:	661a      	str	r2, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceea:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 800ceec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cef0:	675a      	str	r2, [r3, #116]	; 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 800cef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cef6:	1c5a      	adds	r2, r3, #1
 800cef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cefa:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	220c      	movs	r2, #12
 800cf00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	2201      	movs	r2, #1
 800cf06:	639a      	str	r2, [r3, #56]	; 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800cf08:	4b16      	ldr	r3, [pc, #88]	; (800cf64 <_nx_udp_socket_bind+0x258>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	4a15      	ldr	r2, [pc, #84]	; (800cf64 <_nx_udp_socket_bind+0x258>)
 800cf10:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800cf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	64da      	str	r2, [r3, #76]	; 0x4c
 800cf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	f383 8810 	msr	PRIMASK, r3
}
 800cf22:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800cf24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf26:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f002 ff1a 	bl	800fd64 <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 800cf30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf32:	f004 f84f 	bl	8010fd4 <_tx_thread_system_suspend>

        /* Return the completion status.  */
        status = thread_ptr -> tx_thread_suspend_status;
 800cf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf3c:	643b      	str	r3, [r7, #64]	; 0x40
 800cf3e:	e007      	b.n	800cf50 <_nx_udp_socket_bind+0x244>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800cf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf42:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800cf46:	4618      	mov	r0, r3
 800cf48:	f002 ff0c 	bl	800fd64 <_tx_mutex_put>

        /* Return the port unavailable error.  */
        status = NX_PORT_UNAVAILABLE;
 800cf4c:	2323      	movs	r3, #35	; 0x23
 800cf4e:	643b      	str	r3, [r7, #64]	; 0x40
        status = _nx_udp_socket_driver_bind(socket_ptr, port, wait_option);
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Return success to the caller.  */
    return(status);
 800cf50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3748      	adds	r7, #72	; 0x48
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	20008198 	.word	0x20008198
 800cf60:	0800c675 	.word	0x0800c675
 800cf64:	20008230 	.word	0x20008230

0800cf68 <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08a      	sub	sp, #40	; 0x28
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
 800cf74:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 800cf76:	2278      	movs	r2, #120	; 0x78
 800cf78:	2100      	movs	r1, #0
 800cf7a:	68b8      	ldr	r0, [r7, #8]
 800cf7c:	f005 ff90 	bl	8012ea0 <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	683a      	ldr	r2, [r7, #0]
 800cf90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 800cf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf94:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfa0:	631a      	str	r2, [r3, #48]	; 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	64da      	str	r2, [r3, #76]	; 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	651a      	str	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	63da      	str	r2, [r3, #60]	; 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfd0:	641a      	str	r2, [r3, #64]	; 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	671a      	str	r2, [r3, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800cfea:	f04f 31ff 	mov.w	r1, #4294967295
 800cfee:	4618      	mov	r0, r3
 800cff0:	f002 fc40 	bl	800f874 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cff4:	f3ef 8310 	mrs	r3, PRIMASK
 800cff8:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cffa:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cffc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cffe:	b672      	cpsid	i
    return(int_posture);
 800d000:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 800d002:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	4a1f      	ldr	r2, [pc, #124]	; (800d084 <_nx_udp_socket_create+0x11c>)
 800d008:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d010:	2b00      	cmp	r3, #0
 800d012:	d015      	beq.n	800d040 <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d01c:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d024:	68ba      	ldr	r2, [r7, #8]
 800d026:	66da      	str	r2, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 800d028:	6a3b      	ldr	r3, [r7, #32]
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	6a3a      	ldr	r2, [r7, #32]
 800d032:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	669a      	str	r2, [r3, #104]	; 0x68
 800d03e:	e009      	b.n	800d054 <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d05a:	1c5a      	adds	r2, r3, #1
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d064:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	f383 8810 	msr	PRIMASK, r3
}
 800d06c:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d074:	4618      	mov	r0, r3
 800d076:	f002 fe75 	bl	800fd64 <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3728      	adds	r7, #40	; 0x28
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	55445020 	.word	0x55445020

0800d088 <_nx_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b088      	sub	sp, #32
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	61fb      	str	r3, [r7, #28]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_DELETE, ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d09c:	f04f 31ff 	mov.w	r1, #4294967295
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f002 fbe7 	bl	800f874 <_tx_mutex_get>

    /* Determine if the socket is still bound to port.  */
    if (socket_ptr -> nx_udp_socket_bound_next)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d007      	beq.n	800d0be <_nx_udp_socket_delete+0x36>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f002 fe55 	bl	800fd64 <_tx_mutex_put>

        /* Return a still bound error code.  */
        return(NX_STILL_BOUND);
 800d0ba:	2342      	movs	r3, #66	; 0x42
 800d0bc:	e03f      	b.n	800d13e <_nx_udp_socket_delete+0xb6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0be:	f3ef 8310 	mrs	r3, PRIMASK
 800d0c2:	617b      	str	r3, [r7, #20]
    return(posture);
 800d0c4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d0c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0c8:	b672      	cpsid	i
    return(int_posture);
 800d0ca:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800d0cc:	61bb      	str	r3, [r7, #24]

    /* Now, remove the UDP socket from the created socket list.  */

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_udp_socket_id =  0;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	601a      	str	r2, [r3, #0]

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d104      	bne.n	800d0e8 <_nx_udp_socket_delete+0x60>
    {

        /* Only created socket, just set the created list to NULL.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =  NX_NULL;
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 800d0e6:	e014      	b.n	800d112 <_nx_udp_socket_delete+0x8a>
    }
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            socket_ptr -> nx_udp_socket_created_previous;
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 800d0f0:	66da      	str	r2, [r3, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            socket_ptr -> nx_udp_socket_created_next;
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	6e92      	ldr	r2, [r2, #104]	; 0x68
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 800d0fa:	669a      	str	r2, [r3, #104]	; 0x68

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	429a      	cmp	r2, r3
 800d106:	d104      	bne.n	800d112 <_nx_udp_socket_delete+0x8a>
        {

            /* Yes, move the head pointer to the next link. */
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_udp_created_sockets_count--;
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d118:	1e5a      	subs	r2, r3, #1
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f383 8810 	msr	PRIMASK, r3
}
 800d12a:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(socket_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d132:	4618      	mov	r0, r3
 800d134:	f002 fe16 	bl	800fd64 <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800d138:	f003 fe12 	bl	8010d60 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3720      	adds	r7, #32
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
	...

0800d148 <_nx_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b098      	sub	sp, #96	; 0x60
 800d14c:	af02      	add	r7, sp, #8
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	2200      	movs	r2, #0
 800d158:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d15a:	f3ef 8310 	mrs	r3, PRIMASK
 800d15e:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800d160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800d162:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d164:	b672      	cpsid	i
    return(int_posture);
 800d166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Loop to retrieve a packet from the interface.  */
    for (;;)
    {

        /* Lockout interrupts.  */
        TX_DISABLE
 800d168:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d107      	bne.n	800d182 <_nx_udp_socket_receive+0x3a>
 800d172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d174:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d178:	f383 8810 	msr	PRIMASK, r3
}
 800d17c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Socket is not bound, return an error message.  */
            return(NX_NOT_BOUND);
 800d17e:	2324      	movs	r3, #36	; 0x24
 800d180:	e12a      	b.n	800d3d8 <_nx_udp_socket_receive+0x290>
        }

        /* Determine if there is a packet already queued up for this socket.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d186:	2b00      	cmp	r3, #0
 800d188:	d01a      	beq.n	800d1c0 <_nx_udp_socket_receive+0x78>
        {

            /* Yes, there is a packet waiting.  */

            /* Remove it and place it in the thread's destination.  */
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	601a      	str	r2, [r3, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	69da      	ldr	r2, [r3, #28]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	645a      	str	r2, [r3, #68]	; 0x44

            /* If this was the last packet, set the tail pointer to NULL.  */
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d102      	bne.n	800d1aa <_nx_udp_socket_receive+0x62>
            {
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ae:	1e5a      	subs	r2, r3, #1
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	63da      	str	r2, [r3, #60]	; 0x3c
 800d1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	f383 8810 	msr	PRIMASK, r3
}
 800d1be:	e05e      	b.n	800d27e <_nx_udp_socket_receive+0x136>
        }
        else
        {

            /* Determine if the request specifies suspension.  */
            if (wait_option)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d050      	beq.n	800d268 <_nx_udp_socket_receive+0x120>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 800d1c6:	4b86      	ldr	r3, [pc, #536]	; (800d3e0 <_nx_udp_socket_receive+0x298>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 800d1cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ce:	4a85      	ldr	r2, [pc, #532]	; (800d3e4 <_nx_udp_socket_receive+0x29c>)
 800d1d0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800d1d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1d4:	68fa      	ldr	r2, [r7, #12]
 800d1d6:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return packet pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800d1d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1da:	68ba      	ldr	r2, [r7, #8]
 800d1dc:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup suspension list.  */
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d012      	beq.n	800d20c <_nx_udp_socket_receive+0xc4>
                {

                    /* This list is not NULL, add current thread to the end. */
                    thread_ptr -> tx_thread_suspended_next =
                        socket_ptr -> nx_udp_socket_receive_suspension_list;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next =
 800d1ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ec:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 800d1f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1f6:	675a      	str	r2, [r3, #116]	; 0x74
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d200:	671a      	str	r2, [r3, #112]	; 0x70
                        thread_ptr;
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d208:	675a      	str	r2, [r3, #116]	; 0x74
 800d20a:	e008      	b.n	800d21e <_nx_udp_socket_receive+0xd6>
                else
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d210:	659a      	str	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next              =   thread_ptr;
 800d212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d216:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 800d218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d21a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d21c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspended thread count.  */
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d222:	1c5a      	adds	r2, r3, #1
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	65da      	str	r2, [r3, #92]	; 0x5c

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800d228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d22a:	220c      	movs	r2, #12
 800d22c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d22e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d230:	2201      	movs	r2, #1
 800d232:	639a      	str	r2, [r3, #56]	; 0x38

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800d234:	4b6c      	ldr	r3, [pc, #432]	; (800d3e8 <_nx_udp_socket_receive+0x2a0>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	3301      	adds	r3, #1
 800d23a:	4a6b      	ldr	r2, [pc, #428]	; (800d3e8 <_nx_udp_socket_receive+0x2a0>)
 800d23c:	6013      	str	r3, [r2, #0]

                /* Save the timeout value.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800d23e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	64da      	str	r2, [r3, #76]	; 0x4c
 800d244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d246:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d248:	6a3b      	ldr	r3, [r7, #32]
 800d24a:	f383 8810 	msr	PRIMASK, r3
}
 800d24e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800d250:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d252:	f003 febf 	bl	8010fd4 <_tx_thread_system_suspend>

                /* Determine if a packet was received successfully.  */
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 800d256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00e      	beq.n	800d27e <_nx_udp_socket_receive+0x136>
                {

                    /* If not, just return the error code.  */
                    return(thread_ptr -> tx_thread_suspend_status);
 800d260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d266:	e0b7      	b.n	800d3d8 <_nx_udp_socket_receive+0x290>
 800d268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d26a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	f383 8810 	msr	PRIMASK, r3
}
 800d272:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Set the return pointer to NULL in case it was set but released due to checksum error.  */
                *packet_ptr =   NX_NULL;
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	2200      	movs	r2, #0
 800d278:	601a      	str	r2, [r3, #0]

                /* Immediate return, return error completion.  */
                return(NX_NO_PACKET);
 800d27a:	2301      	movs	r3, #1
 800d27c:	e0ac      	b.n	800d3d8 <_nx_udp_socket_receive+0x290>

            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	647b      	str	r3, [r7, #68]	; 0x44
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d105      	bne.n	800d29a <_nx_udp_socket_receive+0x152>
 800d28e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d290:	3304      	adds	r3, #4
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	b29b      	uxth	r3, r3
 800d296:	2b00      	cmp	r3, #0
 800d298:	d106      	bne.n	800d2a8 <_nx_udp_socket_receive+0x160>
                ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6))                               /* It is IPv6 packet */
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 800d2a2:	2b06      	cmp	r3, #6
 800d2a4:	f040 8089 	bne.w	800d3ba <_nx_udp_socket_receive+0x272>
            {
            ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	657b      	str	r3, [r7, #84]	; 0x54
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	653b      	str	r3, [r7, #80]	; 0x50
            ULONG          checksum;
            NX_PACKET     *current_ptr = *packet_ptr;
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	643b      	str	r3, [r7, #64]	; 0x40
#ifdef NX_LITTLE_ENDIAN
            NX_UDP_HEADER *udp_header_ptr;

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
 800d2b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800d2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d2c2:	2b04      	cmp	r3, #4
 800d2c4:	d108      	bne.n	800d2d8 <_nx_udp_socket_receive+0x190>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 800d2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ca:	63bb      	str	r3, [r7, #56]	; 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 800d2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ce:	330c      	adds	r3, #12
 800d2d0:	657b      	str	r3, [r7, #84]	; 0x54
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 800d2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d4:	3310      	adds	r3, #16
 800d2d6:	653b      	str	r3, [r7, #80]	; 0x50

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800d2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	ba1a      	rev	r2, r3
 800d2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e0:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800d2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	ba1a      	rev	r2, r3
 800d2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ea:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
                                                   (UINT)current_ptr -> nx_packet_length,
 800d2ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 800d2f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2f6:	2111      	movs	r1, #17
 800d2f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d2fa:	f7fc fb1d 	bl	8009938 <_nx_ip_checksum_compute>
 800d2fe:	4603      	mov	r3, r0
 800d300:	637b      	str	r3, [r7, #52]	; 0x34
                                                   ip_src_addr,
                                                   ip_dest_addr);

#ifdef NX_LITTLE_ENDIAN
                /* Convert UDP header to host byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800d302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	ba1a      	rev	r2, r3
 800d308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d30a:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800d30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	ba1a      	rev	r2, r3
 800d312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d314:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;
 800d316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d318:	43db      	mvns	r3, r3
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	637b      	str	r3, [r7, #52]	; 0x34

                /* Determine if it is valid.  */
                if (checksum == 0)
 800d31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d320:	2b00      	cmp	r3, #0
 800d322:	d049      	beq.n	800d3b8 <_nx_udp_socket_receive+0x270>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d324:	f3ef 8310 	mrs	r3, PRIMASK
 800d328:	617b      	str	r3, [r7, #20]
    return(posture);
 800d32a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d32c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d32e:	b672      	cpsid	i
    return(int_posture);
 800d330:	693b      	ldr	r3, [r7, #16]
                {

#ifndef NX_DISABLE_UDP_INFO

                    /* Disable interrupts.  */
                    TX_DISABLE
 800d332:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Increment the UDP checksum error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_checksum_errors++;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d33c:	3201      	adds	r2, #1
 800d33e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

                    /* Increment the UDP invalid packets error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d34a:	3201      	adds	r2, #1
 800d34c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                    /* Increment the UDP checksum error count for this socket.  */
                    socket_ptr -> nx_udp_socket_checksum_errors++;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d354:	1c5a      	adds	r2, r3, #1
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Decrement the total UDP receive packets count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packets_received--;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800d362:	3a01      	subs	r2, #1
 800d364:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

                    /* Decrement the total UDP receive bytes.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d376:	1ad2      	subs	r2, r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	3208      	adds	r2, #8
 800d37e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

                    /* Decrement the total UDP receive packets count.  */
                    socket_ptr -> nx_udp_socket_packets_received--;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	699b      	ldr	r3, [r3, #24]
 800d386:	1e5a      	subs	r2, r3, #1
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	619a      	str	r2, [r3, #24]

                    /* Decrement the total UDP receive bytes.  */
                    socket_ptr -> nx_udp_socket_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	69da      	ldr	r2, [r3, #28]
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d396:	1ad3      	subs	r3, r2, r3
 800d398:	f103 0208 	add.w	r2, r3, #8
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	61da      	str	r2, [r3, #28]
 800d3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	f383 8810 	msr	PRIMASK, r3
}
 800d3aa:	bf00      	nop
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7ff f80d 	bl	800c3d0 <_nx_packet_release>
        TX_DISABLE
 800d3b6:	e6d0      	b.n	800d15a <_nx_udp_socket_receive+0x12>
                    break;
 800d3b8:	bf00      	nop
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	3a08      	subs	r2, #8
 800d3c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	689a      	ldr	r2, [r3, #8]
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	3208      	adds	r2, #8
 800d3d4:	609a      	str	r2, [r3, #8]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3758      	adds	r7, #88	; 0x58
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	20008198 	.word	0x20008198
 800d3e4:	0800cc4d 	.word	0x0800cc4d
 800d3e8:	20008230 	.word	0x20008230

0800d3ec <_nx_udp_socket_receive_notify>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive_notify(NX_UDP_SOCKET *socket_ptr,
                                    VOID (*udp_receive_notify)(NX_UDP_SOCKET *socket_ptr))
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b087      	sub	sp, #28
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3f6:	f3ef 8310 	mrs	r3, PRIMASK
 800d3fa:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800d3fe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d400:	b672      	cpsid	i
    return(int_posture);
 800d402:	68bb      	ldr	r3, [r7, #8]
TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800d404:	617b      	str	r3, [r7, #20]

    /* Setup the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =  udp_receive_notify;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	671a      	str	r2, [r3, #112]	; 0x70
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	f383 8810 	msr	PRIMASK, r3
}
 800d416:	bf00      	nop

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE_NOTIFY, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, udp_receive_notify, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	371c      	adds	r7, #28
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <_nx_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 800d426:	b580      	push	{r7, lr}
 800d428:	b088      	sub	sp, #32
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	60f8      	str	r0, [r7, #12]
 800d42e:	60b9      	str	r1, [r7, #8]
 800d430:	607a      	str	r2, [r7, #4]
 800d432:	603b      	str	r3, [r7, #0]
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 800d434:	2304      	movs	r3, #4
 800d436:	617b      	str	r3, [r7, #20]
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	61bb      	str	r3, [r7, #24]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 800d43c:	f107 0214 	add.w	r2, r7, #20
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	68b9      	ldr	r1, [r7, #8]
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f000 fa2d 	bl	800d8a4 <_nxd_udp_socket_send>
 800d44a:	61f8      	str	r0, [r7, #28]

    return(status);
 800d44c:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3720      	adds	r7, #32
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <_nx_udp_socket_source_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_source_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                                 ULONG ip_address, UINT port, UINT address_index)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b086      	sub	sp, #24
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	60f8      	str	r0, [r7, #12]
 800d45e:	60b9      	str	r1, [r7, #8]
 800d460:	607a      	str	r2, [r7, #4]
 800d462:	603b      	str	r3, [r7, #0]
UINT   status;
NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	68db      	ldr	r3, [r3, #12]
 800d468:	617b      	str	r3, [r7, #20]

    /* Store interface information into the packet structure. */
    packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[address_index]);
 800d46a:	6a3b      	ldr	r3, [r7, #32]
 800d46c:	224c      	movs	r2, #76	; 0x4c
 800d46e:	fb02 f303 	mul.w	r3, r2, r3
 800d472:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800d476:	697a      	ldr	r2, [r7, #20]
 800d478:	4413      	add	r3, r2
 800d47a:	1d1a      	adds	r2, r3, #4
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Call udp_socket_send service */
    status = _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	68b9      	ldr	r1, [r7, #8]
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f7ff ffcd 	bl	800d426 <_nx_udp_socket_send>
 800d48c:	6138      	str	r0, [r7, #16]

    return(status);
 800d48e:	693b      	ldr	r3, [r7, #16]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3718      	adds	r7, #24
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <_nx_udp_socket_unbind>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b094      	sub	sp, #80	; 0x50
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
NX_PACKET     *packet_ptr;
NX_PACKET     *next_packet_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	647b      	str	r3, [r7, #68]	; 0x44
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_UNBIND, ip_ptr, socket_ptr, socket_ptr -> nx_udp_socket_port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800d4a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4a8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d4ac:	f04f 31ff 	mov.w	r1, #4294967295
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f002 f9df 	bl	800f874 <_tx_mutex_get>

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_udp_socket_bound_next)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d119      	bne.n	800d4f2 <_nx_udp_socket_unbind+0x5a>
    {

        /* Determine if there is a special condition for the socket not being in
           a bound condition...  i.e. the socket is in a pending-to-be-bound condition
           in a call from a different thread.  */
        if (socket_ptr -> nx_udp_socket_bind_in_progress)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00d      	beq.n	800d4e2 <_nx_udp_socket_unbind+0x4a>
        {

            /* Execute the bind suspension cleanup routine.  */
            _nx_udp_bind_cleanup(socket_ptr -> nx_udp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff f8d1 	bl	800c674 <_nx_udp_bind_cleanup>

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d4d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4d4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f002 fc43 	bl	800fd64 <_tx_mutex_put>

            /* Return success.  */
            return(NX_SUCCESS);
 800d4de:	2300      	movs	r3, #0
 800d4e0:	e13e      	b.n	800d760 <_nx_udp_socket_unbind+0x2c8>
        }
        else
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d4e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4e4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f002 fc3b 	bl	800fd64 <_tx_mutex_put>

            /* Return a not bound error code.  */
            return(NX_NOT_BOUND);
 800d4ee:	2324      	movs	r3, #36	; 0x24
 800d4f0:	e136      	b.n	800d760 <_nx_udp_socket_unbind+0x2c8>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other UDP socket bind requests that are queued.  */

    /* Pickup the port number in the UDP socket structure.  */
    port =  socket_ptr -> nx_udp_socket_port;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800d4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4fa:	0a1a      	lsrs	r2, r3, #8
 800d4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4fe:	4413      	add	r3, r2
 800d500:	f003 031f 	and.w	r3, r3, #31
 800d504:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d506:	f3ef 8310 	mrs	r3, PRIMASK
 800d50a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d50e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d510:	b672      	cpsid	i
    return(int_posture);
 800d512:	6abb      	ldr	r3, [r7, #40]	; 0x28
#ifdef NX_ENABLE_TCPIP_OFFLOAD
    _nx_udp_socket_driver_unbind(socket_ptr);
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE
 800d514:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_udp_socket_bound_next == socket_ptr)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d10a      	bne.n	800d536 <_nx_udp_socket_unbind+0x9e>
    {

        /* Yes, this is the only socket on the port list.  */

        /* Clear the list head pointer and the next pointer in the socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =   NX_NULL;
 800d520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d524:	33de      	adds	r3, #222	; 0xde
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	4413      	add	r3, r2
 800d52a:	2200      	movs	r2, #0
 800d52c:	605a      	str	r2, [r3, #4]
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	64da      	str	r2, [r3, #76]	; 0x4c
 800d534:	e01d      	b.n	800d572 <_nx_udp_socket_unbind+0xda>
    {

        /* Relink the neighbors of this UDP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous;
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	6d12      	ldr	r2, [r2, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 800d53e:	651a      	str	r2, [r3, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            socket_ptr -> nx_udp_socket_bound_next;
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800d548:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 800d54a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d54e:	33de      	adds	r3, #222	; 0xde
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	4413      	add	r3, r2
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d107      	bne.n	800d56c <_nx_udp_socket_unbind+0xd4>
        {

            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d560:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d564:	33de      	adds	r3, #222	; 0xde
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	440b      	add	r3, r1
 800d56a:	605a      	str	r2, [r3, #4]
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	64da      	str	r2, [r3, #76]	; 0x4c
 800d572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d574:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d578:	f383 8810 	msr	PRIMASK, r3
}
 800d57c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* The socket is off the bound list...  we need to check for queued packets and possible
       receive suspension.  We need to clean up either of these conditions.  */
    if (socket_ptr -> nx_udp_socket_receive_count)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d582:	2b00      	cmp	r3, #0
 800d584:	d01b      	beq.n	800d5be <_nx_udp_socket_unbind+0x126>
    {

        /* Setup packet pointer.  */
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d58a:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Clear the head and the tail pointers.  */
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2200      	movs	r2, #0
 800d590:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2200      	movs	r2, #0
 800d596:	649a      	str	r2, [r3, #72]	; 0x48

        /* Loop to clear all the packets out.  */
        while (socket_ptr -> nx_udp_socket_receive_count)
 800d598:	e00c      	b.n	800d5b4 <_nx_udp_socket_unbind+0x11c>
        {

            /* Pickup the next queued packet.  */
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 800d59a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d59c:	69db      	ldr	r3, [r3, #28]
 800d59e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800d5a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d5a2:	f7fe ff15 	bl	800c3d0 <_nx_packet_release>

            /* Move to the next packet.  */
            packet_ptr =  next_packet_ptr;
 800d5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a8:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ae:	1e5a      	subs	r2, r3, #1
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	63da      	str	r2, [r3, #60]	; 0x3c
        while (socket_ptr -> nx_udp_socket_receive_count)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d1ee      	bne.n	800d59a <_nx_udp_socket_unbind+0x102>
 800d5bc:	e035      	b.n	800d62a <_nx_udp_socket_unbind+0x192>
        }
    }
    else if (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d031      	beq.n	800d62a <_nx_udp_socket_unbind+0x192>
    {

        /* Clear out all threads suspended on this socket.  */

        /* Pickup the first suspended thread.  */
        thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5ca:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Clear the thread receive suspension list.  */
        socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Walk through the queue list to resume any and all threads suspended
           on this queue.  */
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800d5d2:	e026      	b.n	800d622 <_nx_udp_socket_unbind+0x18a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800d5d8:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d5da:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d5dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d5de:	b672      	cpsid	i
    return(int_posture);
 800d5e0:	69bb      	ldr	r3, [r7, #24]
        {

            /* Lockout interrupts.  */
            TX_DISABLE
 800d5e2:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800d5ea:	4b5f      	ldr	r3, [pc, #380]	; (800d768 <_nx_udp_socket_unbind+0x2d0>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	4a5d      	ldr	r2, [pc, #372]	; (800d768 <_nx_udp_socket_unbind+0x2d0>)
 800d5f2:	6013      	str	r3, [r2, #0]
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5f8:	6a3b      	ldr	r3, [r7, #32]
 800d5fa:	f383 8810 	msr	PRIMASK, r3
}
 800d5fe:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set the return status in the thread to NX_SOCKET_UNBOUND.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 800d600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d602:	2226      	movs	r2, #38	; 0x26
 800d604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800d608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d60a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d60c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800d60e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d612:	4618      	mov	r0, r3
 800d614:	f003 fbde 	bl	8010dd4 <_tx_thread_system_resume>

            /* Decrease the suspended count.  */
            socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d61c:	1e5a      	subs	r2, r3, #1
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	65da      	str	r2, [r3, #92]	; 0x5c
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d626:	2b00      	cmp	r3, #0
 800d628:	d1d4      	bne.n	800d5d4 <_nx_udp_socket_unbind+0x13c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d62a:	f3ef 8310 	mrs	r3, PRIMASK
 800d62e:	617b      	str	r3, [r7, #20]
    return(posture);
 800d630:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d632:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d634:	b672      	cpsid	i
    return(int_posture);
 800d636:	693b      	ldr	r3, [r7, #16]
        }
    }

    /* Disable interrupts again.  */
    TX_DISABLE
 800d638:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d63e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (thread_ptr)
 800d640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d642:	2b00      	cmp	r3, #0
 800d644:	d07f      	beq.n	800d746 <_nx_udp_socket_unbind+0x2ae>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d64a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d103      	bne.n	800d658 <_nx_udp_socket_unbind+0x1c0>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	661a      	str	r2, [r3, #96]	; 0x60
 800d656:	e00d      	b.n	800d674 <_nx_udp_socket_unbind+0x1dc>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800d658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d65a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800d664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d666:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d668:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800d66e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d670:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d672:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d678:	1e5a      	subs	r2, r3, #1
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	665a      	str	r2, [r3, #100]	; 0x64

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800d67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d682:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800d684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d686:	2200      	movs	r2, #0
 800d688:	655a      	str	r2, [r3, #84]	; 0x54

        /* Inherit the suspension list from the previously bound socket.  */
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
            socket_ptr -> nx_udp_socket_bind_suspension_list;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
 800d68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d690:	661a      	str	r2, [r3, #96]	; 0x60
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2200      	movs	r2, #0
 800d696:	661a      	str	r2, [r3, #96]	; 0x60

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_udp_port_table[index])
 800d698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d69a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d69c:	33de      	adds	r3, #222	; 0xde
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	4413      	add	r3, r2
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d022      	beq.n	800d6ee <_nx_udp_socket_unbind+0x256>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_udp_socket_bound_next =
                ip_ptr -> nx_ip_udp_port_table[index];
 800d6a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ac:	33de      	adds	r3, #222	; 0xde
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	4413      	add	r3, r2
 800d6b2:	685a      	ldr	r2, [r3, #4]
            new_socket_ptr -> nx_udp_socket_bound_next =
 800d6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b6:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =
                (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800d6b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6bc:	33de      	adds	r3, #222	; 0xde
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4413      	add	r3, r2
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            new_socket_ptr -> nx_udp_socket_bound_previous =
 800d6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c8:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800d6ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ce:	33de      	adds	r3, #222	; 0xde
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	4413      	add	r3, r2
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6da:	64da      	str	r2, [r3, #76]	; 0x4c
                new_socket_ptr;
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   new_socket_ptr;
 800d6dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6e0:	33de      	adds	r3, #222	; 0xde
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	4413      	add	r3, r2
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ea:	651a      	str	r2, [r3, #80]	; 0x50
 800d6ec:	e00c      	b.n	800d708 <_nx_udp_socket_unbind+0x270>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            new_socket_ptr -> nx_udp_socket_bound_next =      new_socket_ptr;
 800d6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6f2:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =  new_socket_ptr;
 800d6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6f8:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =           new_socket_ptr;
 800d6fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6fe:	33de      	adds	r3, #222	; 0xde
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	4413      	add	r3, r2
 800d704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d706:	605a      	str	r2, [r3, #4]
        }

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d70a:	2200      	movs	r2, #0
 800d70c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800d70e:	4b16      	ldr	r3, [pc, #88]	; (800d768 <_nx_udp_socket_unbind+0x2d0>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	3301      	adds	r3, #1
 800d714:	4a14      	ldr	r2, [pc, #80]	; (800d768 <_nx_udp_socket_unbind+0x2d0>)
 800d716:	6013      	str	r3, [r2, #0]
 800d718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f383 8810 	msr	PRIMASK, r3
}
 800d722:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800d724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d726:	2200      	movs	r2, #0
 800d728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d72c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d72e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d732:	4618      	mov	r0, r3
 800d734:	f002 fb16 	bl	800fd64 <_tx_mutex_put>

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d738:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d73a:	f003 fb4b 	bl	8010dd4 <_tx_thread_system_resume>
        /* Return success to the caller.  */
        return(NX_SUCCESS);
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800d73e:	f003 fb0f 	bl	8010d60 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 800d742:	2300      	movs	r3, #0
 800d744:	e00c      	b.n	800d760 <_nx_udp_socket_unbind+0x2c8>
 800d746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d748:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	f383 8810 	msr	PRIMASK, r3
}
 800d750:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d754:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d758:	4618      	mov	r0, r3
 800d75a:	f002 fb03 	bl	800fd64 <_tx_mutex_put>
        return(NX_SUCCESS);
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	3750      	adds	r7, #80	; 0x50
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	20008230 	.word	0x20008230

0800d76c <_nx_udp_source_extract>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_source_extract(NX_PACKET *packet_ptr, ULONG *ip_address, UINT *port)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b087      	sub	sp, #28
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
ULONG          *temp_ptr;
NX_IPV4_HEADER *ipv4_header;

    /* Build an address to the current top of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    temp_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	617b      	str	r3, [r7, #20]

    /* Pickup the source port.  */
    *port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	3b08      	subs	r3, #8
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	0c1a      	lsrs	r2, r3, #16
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	601a      	str	r2, [r3, #0]

    /* Obtain the IPv4 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78e:	613b      	str	r3, [r7, #16]

    /* Pickup the source IP address.  */
    *ip_address =  ipv4_header -> nx_ip_header_source_ip;
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	68da      	ldr	r2, [r3, #12]
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	601a      	str	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOURCE_EXTRACT, packet_ptr, *ip_address, *port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    return(NX_SUCCESS);
 800d798:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	371c      	adds	r7, #28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr

0800d7a6 <_nx_utility_string_length_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_utility_string_length_check(CHAR *input_string, UINT *string_length, UINT max_string_length)
{
 800d7a6:	b480      	push	{r7}
 800d7a8:	b087      	sub	sp, #28
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	60f8      	str	r0, [r7, #12]
 800d7ae:	60b9      	str	r1, [r7, #8]
 800d7b0:	607a      	str	r2, [r7, #4]

UINT    i;


    /* Check for invalid input pointers.  */
    if (input_string == NX_NULL)
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d101      	bne.n	800d7bc <_nx_utility_string_length_check+0x16>
    {
        return(NX_PTR_ERROR);
 800d7b8:	2307      	movs	r3, #7
 800d7ba:	e018      	b.n	800d7ee <_nx_utility_string_length_check+0x48>
    }

    /* Traverse the string.  */
    for (i = 0; input_string[i]; i++)
 800d7bc:	2300      	movs	r3, #0
 800d7be:	617b      	str	r3, [r7, #20]
 800d7c0:	e008      	b.n	800d7d4 <_nx_utility_string_length_check+0x2e>
    {

        /* Check if the string length is bigger than the max string length.  */
        if (i >= max_string_length)
 800d7c2:	697a      	ldr	r2, [r7, #20]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d301      	bcc.n	800d7ce <_nx_utility_string_length_check+0x28>
        {
            return(NX_SIZE_ERROR);
 800d7ca:	2309      	movs	r3, #9
 800d7cc:	e00f      	b.n	800d7ee <_nx_utility_string_length_check+0x48>
    for (i = 0; input_string[i]; i++)
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	617b      	str	r3, [r7, #20]
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	4413      	add	r3, r2
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d1f0      	bne.n	800d7c2 <_nx_utility_string_length_check+0x1c>
    }

    /* Return the string length if string_length is not NULL.
       String_length being NULL indicates the caller needs to check for string 
       length within the max_string_length. */
    if (string_length)
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d002      	beq.n	800d7ec <_nx_utility_string_length_check+0x46>
    {
        *string_length = i;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	697a      	ldr	r2, [r7, #20]
 800d7ea:	601a      	str	r2, [r3, #0]
    }

    /* Return success.  */
    return(NX_SUCCESS);
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	371c      	adds	r7, #28
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr

0800d7fa <_nxd_udp_packet_info_extract>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_udp_packet_info_extract(NX_PACKET *packet_ptr, NXD_ADDRESS *ip_address,
                                   UINT *protocol, UINT *port, UINT *interface_index)
{
 800d7fa:	b480      	push	{r7}
 800d7fc:	b089      	sub	sp, #36	; 0x24
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	60f8      	str	r0, [r7, #12]
 800d802:	60b9      	str	r1, [r7, #8]
 800d804:	607a      	str	r2, [r7, #4]
 800d806:	603b      	str	r3, [r7, #0]
#ifdef FEATURE_NX_IPV6
NX_IPV6_HEADER *ipv6_header;
#endif /* FEATURE_NX_IPV6 */


    if (ip_address)
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d011      	beq.n	800d832 <_nxd_udp_packet_info_extract+0x38>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d814:	2b04      	cmp	r3, #4
 800d816:	d10a      	bne.n	800d82e <_nxd_udp_packet_info_extract+0x34>
        {

            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d81c:	61fb      	str	r3, [r7, #28]

            ip_address -> nxd_ip_version = NX_IP_VERSION_V4;
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	2204      	movs	r2, #4
 800d822:	601a      	str	r2, [r3, #0]

            /* At this point, the IP address in the IPv4 header is in host byte order. */
            ip_address -> nxd_ip_address.v4 = ipv4_header -> nx_ip_header_source_ip;
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	68da      	ldr	r2, [r3, #12]
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	605a      	str	r2, [r3, #4]
 800d82c:	e001      	b.n	800d832 <_nxd_udp_packet_info_extract+0x38>
        else
#endif /* FEATURE_NX_IPV6 */
        {

            /* Invalid IP version . */
            return(NX_INVALID_PACKET);
 800d82e:	2312      	movs	r3, #18
 800d830:	e032      	b.n	800d898 <_nxd_udp_packet_info_extract+0x9e>
        }
    }

    /* Build an address to the current top of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    temp_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	61bb      	str	r3, [r7, #24]

    /* Pickup the source port.  */
    source_port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 800d838:	69bb      	ldr	r3, [r7, #24]
 800d83a:	3b08      	subs	r3, #8
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	0c1b      	lsrs	r3, r3, #16
 800d840:	617b      	str	r3, [r7, #20]
    if (port != NX_NULL)
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d002      	beq.n	800d84e <_nxd_udp_packet_info_extract+0x54>
    {
        *port = source_port;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	697a      	ldr	r2, [r7, #20]
 800d84c:	601a      	str	r2, [r3, #0]
    }

    if (protocol != NX_NULL)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <_nxd_udp_packet_info_extract+0x60>
    {
        *protocol = 0x11;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2211      	movs	r2, #17
 800d858:	601a      	str	r2, [r3, #0]
    }

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOURCE_EXTRACT, packet_ptr, address, source_port, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    if (interface_index == NX_NULL)
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d101      	bne.n	800d864 <_nxd_udp_packet_info_extract+0x6a>
    {
        return(NX_SUCCESS);
 800d860:	2300      	movs	r3, #0
 800d862:	e019      	b.n	800d898 <_nxd_udp_packet_info_extract+0x9e>
    }

    /* Search for interface index number.  Initialize interface value as
       invalid (0xFFFFFFFF).  Once we find valid interface, we will update
       the returned value. */
    *interface_index = 0xFFFFFFFF;
 800d864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d866:	f04f 32ff 	mov.w	r2, #4294967295
 800d86a:	601a      	str	r2, [r3, #0]

    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d872:	2b04      	cmp	r3, #4
 800d874:	d106      	bne.n	800d884 <_nxd_udp_packet_info_extract+0x8a>
    {
        nx_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d87a:	613b      	str	r3, [r7, #16]
    else
    {
        return(NX_SUCCESS);
    }

    if (nx_interface == NX_NULL)
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d104      	bne.n	800d88c <_nxd_udp_packet_info_extract+0x92>
 800d882:	e001      	b.n	800d888 <_nxd_udp_packet_info_extract+0x8e>
        return(NX_SUCCESS);
 800d884:	2300      	movs	r3, #0
 800d886:	e007      	b.n	800d898 <_nxd_udp_packet_info_extract+0x9e>
    {

        /* No interface attached.  Done here, and return success. */
        return(NX_SUCCESS);
 800d888:	2300      	movs	r3, #0
 800d88a:	e005      	b.n	800d898 <_nxd_udp_packet_info_extract+0x9e>
    }

    *interface_index = (UINT)nx_interface -> nx_interface_index;
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	79db      	ldrb	r3, [r3, #7]
 800d890:	461a      	mov	r2, r3
 800d892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d894:	601a      	str	r2, [r3, #0]

    return(NX_SUCCESS);
 800d896:	2300      	movs	r3, #0
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3724      	adds	r7, #36	; 0x24
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 800d8a4:	b590      	push	{r4, r7, lr}
 800d8a6:	b095      	sub	sp, #84	; 0x54
 800d8a8:	af04      	add	r7, sp, #16
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]
 800d8b0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	63bb      	str	r3, [r7, #56]	; 0x38
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	613b      	str	r3, [r7, #16]
#endif /* !NX_DISABLE_IPV4  */
#if !defined(NX_DISABLE_IPV4) || (defined(FEATURE_NX_IPV6) && defined(NX_ENABLE_INTERFACE_CAPABILITY))
NX_INTERFACE  *interface_ptr = NX_NULL;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8c2:	f3ef 8310 	mrs	r3, PRIMASK
 800d8c6:	623b      	str	r3, [r7, #32]
    return(posture);
 800d8c8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d8ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d8cc:	b672      	cpsid	i
    return(int_posture);
 800d8ce:	69fb      	ldr	r3, [r7, #28]
    /* Disable UDP TX checksum. */
    compute_checksum = 0;
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

    /* Lockout interrupts.  */
    TX_DISABLE
 800d8d0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d107      	bne.n	800d8ea <_nxd_udp_socket_send+0x46>
 800d8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	f383 8810 	msr	PRIMASK, r3
}
 800d8e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 800d8e6:	2324      	movs	r3, #36	; 0x24
 800d8e8:	e0c1      	b.n	800da6e <_nxd_udp_socket_send+0x1ca>
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	68db      	ldr	r3, [r3, #12]
 800d8ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	f383 8810 	msr	PRIMASK, r3
}
 800d8fa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b04      	cmp	r3, #4
 800d902:	d118      	bne.n	800d936 <_nxd_udp_socket_send+0x92>
    {

        /* Look for a suitable interface. */
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6859      	ldr	r1, [r3, #4]
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d90e:	f107 0310 	add.w	r3, r7, #16
 800d912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d914:	f7fd fa30 	bl	800ad78 <_nx_ip_route_find>
                          &next_hop_address);

        /* Check the packet interface.  */
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d101      	bne.n	800d924 <_nxd_udp_socket_send+0x80>
        {

            /* None found; return the error status. */
            return(NX_IP_ADDRESS_ERROR);
 800d920:	2321      	movs	r3, #33	; 0x21
 800d922:	e0a4      	b.n	800da6e <_nxd_udp_socket_send+0x1ca>
        }

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d928:	633b      	str	r3, [r7, #48]	; 0x30

        /* Fill in the IP src/dest address */
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	3304      	adds	r3, #4
 800d92e:	63bb      	str	r3, [r7, #56]	; 0x38
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 800d930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d932:	3314      	adds	r3, #20
 800d934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }
#endif /* NX_IPSEC_ENABLE */
        
    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	f1a3 0208 	sub.w	r2, r3, #8
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	b2da      	uxtb	r2, r3
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 800d94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d954:	1c5a      	adds	r2, r3, #1
 800d956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 800d95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d966:	441a      	add	r2, r3
 800d968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	1c5a      	adds	r2, r3, #1
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	695a      	ldr	r2, [r3, #20]
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d980:	441a      	add	r2, r3
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d98a:	f103 0208 	add.w	r2, r3, #8
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	627b      	str	r3, [r7, #36]	; 0x24

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	041a      	lsls	r2, r3, #16
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	431a      	orrs	r2, r3
    udp_header_ptr -> nx_udp_header_word_0 =
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a4:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9aa:	041a      	lsls	r2, r3, #16
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ae:	605a      	str	r2, [r3, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
    swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	ba1a      	rev	r2, r3
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800d9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	ba1a      	rev	r2, r3
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c2:	605a      	str	r2, [r3, #4]
    Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
    driver is able to compute UDP checksum in hardware, let the driver handle the checksum
    computation.
    */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d003      	beq.n	800d9d4 <_nxd_udp_socket_send+0x130>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800d9d0:	2b06      	cmp	r3, #6
 800d9d2:	d124      	bne.n	800da1e <_nxd_udp_socket_send+0x17a>
        ULONG checksum;

            /* Yes, we need to compute the UDP checksum.  */
            checksum = _nx_ip_checksum_compute(packet_ptr,
                                               NX_PROTOCOL_UDP,
                                               (UINT)packet_ptr -> nx_packet_length,
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum = _nx_ip_checksum_compute(packet_ptr,
 800d9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9da:	9300      	str	r3, [sp, #0]
 800d9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9de:	2111      	movs	r1, #17
 800d9e0:	68b8      	ldr	r0, [r7, #8]
 800d9e2:	f7fb ffa9 	bl	8009938 <_nx_ip_checksum_compute>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	637b      	str	r3, [r7, #52]	; 0x34
                                               ip_src_addr,
                                               ip_dest_addr);
            checksum = ~checksum & NX_LOWER_16_MASK;
 800d9ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ec:	43db      	mvns	r3, r3
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	637b      	str	r3, [r7, #52]	; 0x34

            /* If the computed checksum is zero, it will be transmitted as all ones. */
            /* RFC 768, page 2. */
            if (checksum == 0)
 800d9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d102      	bne.n	800d9fe <_nxd_udp_socket_send+0x15a>
            {
                checksum = 0xFFFF;
 800d9f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9fc:	637b      	str	r3, [r7, #52]	; 0x34
            }

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	ba1a      	rev	r2, r3
 800da04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da06:	605a      	str	r2, [r3, #4]

            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	685a      	ldr	r2, [r3, #4]
 800da0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da0e:	431a      	orrs	r2, r3
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	605a      	str	r2, [r3, #4]

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	ba1a      	rev	r2, r3
 800da1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1c:	605a      	str	r2, [r3, #4]
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800da1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da20:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800da24:	f04f 31ff 	mov.w	r1, #4294967295
 800da28:	4618      	mov	r0, r3
 800da2a:	f001 ff23 	bl	800f874 <_tx_mutex_get>
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2b04      	cmp	r3, #4
 800da34:	d114      	bne.n	800da60 <_nxd_udp_socket_send+0x1bc>
    {

        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6858      	ldr	r0, [r3, #4]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
                           socket_ptr -> nx_udp_socket_type_of_service,
                           socket_ptr -> nx_udp_socket_time_to_live,
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800da46:	6939      	ldr	r1, [r7, #16]
 800da48:	9103      	str	r1, [sp, #12]
 800da4a:	9202      	str	r2, [sp, #8]
 800da4c:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800da50:	9201      	str	r2, [sp, #4]
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	4623      	mov	r3, r4
 800da56:	4602      	mov	r2, r0
 800da58:	68b9      	ldr	r1, [r7, #8]
 800da5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da5c:	f7fd f915 	bl	800ac8a <_nx_ip_packet_send>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800da60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da62:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800da66:	4618      	mov	r0, r3
 800da68:	f002 f97c 	bl	800fd64 <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3744      	adds	r7, #68	; 0x44
 800da72:	46bd      	mov	sp, r7
 800da74:	bd90      	pop	{r4, r7, pc}
	...

0800da78 <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b088      	sub	sp, #32
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d007      	beq.n	800da9a <_nxe_arp_enable+0x22>
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a1c      	ldr	r2, [pc, #112]	; (800db00 <_nxe_arp_enable+0x88>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d102      	bne.n	800da9a <_nxe_arp_enable+0x22>
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d101      	bne.n	800da9e <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 800da9a:	2307      	movs	r3, #7
 800da9c:	e02c      	b.n	800daf8 <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 800daa8:	2315      	movs	r3, #21
 800daaa:	e025      	b.n	800daf8 <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b33      	cmp	r3, #51	; 0x33
 800dab0:	d801      	bhi.n	800dab6 <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 800dab2:	2309      	movs	r3, #9
 800dab4:	e020      	b.n	800daf8 <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dab6:	f3ef 8305 	mrs	r3, IPSR
 800daba:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dabc:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800dabe:	4b11      	ldr	r3, [pc, #68]	; (800db04 <_nxe_arp_enable+0x8c>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4313      	orrs	r3, r2
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d009      	beq.n	800dadc <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dac8:	f3ef 8305 	mrs	r3, IPSR
 800dacc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800dace:	697a      	ldr	r2, [r7, #20]
 800dad0:	4b0c      	ldr	r3, [pc, #48]	; (800db04 <_nxe_arp_enable+0x8c>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4313      	orrs	r3, r2
 800dad6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800dada:	d304      	bcc.n	800dae6 <_nxe_arp_enable+0x6e>
 800dadc:	4b0a      	ldr	r3, [pc, #40]	; (800db08 <_nxe_arp_enable+0x90>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a0a      	ldr	r2, [pc, #40]	; (800db0c <_nxe_arp_enable+0x94>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d101      	bne.n	800daea <_nxe_arp_enable+0x72>
 800dae6:	2311      	movs	r3, #17
 800dae8:	e006      	b.n	800daf8 <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	68b9      	ldr	r1, [r7, #8]
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	f7fa fd28 	bl	8008544 <_nx_arp_enable>
 800daf4:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800daf6:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3720      	adds	r7, #32
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	49502020 	.word	0x49502020
 800db04:	2000008c 	.word	0x2000008c
 800db08:	20008198 	.word	0x20008198
 800db0c:	200082e0 	.word	0x200082e0

0800db10 <_nxe_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_icmp_enable(NX_IP *ip_ptr)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d004      	beq.n	800db28 <_nxe_icmp_enable+0x18>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a17      	ldr	r2, [pc, #92]	; (800db80 <_nxe_icmp_enable+0x70>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d001      	beq.n	800db2c <_nxe_icmp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800db28:	2307      	movs	r3, #7
 800db2a:	e025      	b.n	800db78 <_nxe_icmp_enable+0x68>
    }

    /* Check to see if ICMP is enabled.  */
    if (ip_ptr -> nx_ip_icmp_packet_receive)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 800db32:	2b00      	cmp	r3, #0
 800db34:	d001      	beq.n	800db3a <_nxe_icmp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800db36:	2315      	movs	r3, #21
 800db38:	e01e      	b.n	800db78 <_nxe_icmp_enable+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800db3a:	f3ef 8305 	mrs	r3, IPSR
 800db3e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800db40:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800db42:	4b10      	ldr	r3, [pc, #64]	; (800db84 <_nxe_icmp_enable+0x74>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4313      	orrs	r3, r2
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d009      	beq.n	800db60 <_nxe_icmp_enable+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800db4c:	f3ef 8305 	mrs	r3, IPSR
 800db50:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	4b0b      	ldr	r3, [pc, #44]	; (800db84 <_nxe_icmp_enable+0x74>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4313      	orrs	r3, r2
 800db5a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800db5e:	d304      	bcc.n	800db6a <_nxe_icmp_enable+0x5a>
 800db60:	4b09      	ldr	r3, [pc, #36]	; (800db88 <_nxe_icmp_enable+0x78>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a09      	ldr	r2, [pc, #36]	; (800db8c <_nxe_icmp_enable+0x7c>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d101      	bne.n	800db6e <_nxe_icmp_enable+0x5e>
 800db6a:	2311      	movs	r3, #17
 800db6c:	e004      	b.n	800db78 <_nxe_icmp_enable+0x68>

    /* Call actual ICMP enable function.  */
    status =  _nx_icmp_enable(ip_ptr);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7fb faee 	bl	8009150 <_nx_icmp_enable>
 800db74:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800db76:	697b      	ldr	r3, [r7, #20]
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3718      	adds	r7, #24
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	49502020 	.word	0x49502020
 800db84:	2000008c 	.word	0x2000008c
 800db88:	20008198 	.word	0x20008198
 800db8c:	200082e0 	.word	0x200082e0

0800db90 <_nxe_ip_address_change_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_change_notify(NX_IP *ip_ptr, VOID (*ip_address_change_notify)(NX_IP *, VOID *), VOID *additional_info)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b088      	sub	sp, #32
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d004      	beq.n	800dbac <_nxe_ip_address_change_notify+0x1c>
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4a15      	ldr	r2, [pc, #84]	; (800dbfc <_nxe_ip_address_change_notify+0x6c>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d001      	beq.n	800dbb0 <_nxe_ip_address_change_notify+0x20>
    {
        return(NX_PTR_ERROR);
 800dbac:	2307      	movs	r3, #7
 800dbae:	e020      	b.n	800dbf2 <_nxe_ip_address_change_notify+0x62>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dbb0:	f3ef 8305 	mrs	r3, IPSR
 800dbb4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dbb6:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800dbb8:	4b11      	ldr	r3, [pc, #68]	; (800dc00 <_nxe_ip_address_change_notify+0x70>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d009      	beq.n	800dbd6 <_nxe_ip_address_change_notify+0x46>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dbc2:	f3ef 8305 	mrs	r3, IPSR
 800dbc6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800dbc8:	697a      	ldr	r2, [r7, #20]
 800dbca:	4b0d      	ldr	r3, [pc, #52]	; (800dc00 <_nxe_ip_address_change_notify+0x70>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800dbd4:	d304      	bcc.n	800dbe0 <_nxe_ip_address_change_notify+0x50>
 800dbd6:	4b0b      	ldr	r3, [pc, #44]	; (800dc04 <_nxe_ip_address_change_notify+0x74>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a0b      	ldr	r2, [pc, #44]	; (800dc08 <_nxe_ip_address_change_notify+0x78>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d101      	bne.n	800dbe4 <_nxe_ip_address_change_notify+0x54>
 800dbe0:	2311      	movs	r3, #17
 800dbe2:	e006      	b.n	800dbf2 <_nxe_ip_address_change_notify+0x62>

    /* Call actual IP address change notify function.  */
    status =  _nx_ip_address_change_notify(ip_ptr, ip_address_change_notify, additional_info);
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	68b9      	ldr	r1, [r7, #8]
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7fb fe45 	bl	8009878 <_nx_ip_address_change_notify>
 800dbee:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800dbf0:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address_change_notify);
    NX_PARAMETER_NOT_USED(additional_info);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3720      	adds	r7, #32
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	49502020 	.word	0x49502020
 800dc00:	2000008c 	.word	0x2000008c
 800dc04:	20008198 	.word	0x20008198
 800dc08:	200082e0 	.word	0x200082e0

0800dc0c <_nxe_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b088      	sub	sp, #32
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (network_mask == NX_NULL))
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00a      	beq.n	800dc34 <_nxe_ip_address_get+0x28>
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	4a18      	ldr	r2, [pc, #96]	; (800dc84 <_nxe_ip_address_get+0x78>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d105      	bne.n	800dc34 <_nxe_ip_address_get+0x28>
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d002      	beq.n	800dc34 <_nxe_ip_address_get+0x28>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d101      	bne.n	800dc38 <_nxe_ip_address_get+0x2c>
    {
        return(NX_PTR_ERROR);
 800dc34:	2307      	movs	r3, #7
 800dc36:	e020      	b.n	800dc7a <_nxe_ip_address_get+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dc38:	f3ef 8305 	mrs	r3, IPSR
 800dc3c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dc3e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800dc40:	4b11      	ldr	r3, [pc, #68]	; (800dc88 <_nxe_ip_address_get+0x7c>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4313      	orrs	r3, r2
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d009      	beq.n	800dc5e <_nxe_ip_address_get+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dc4a:	f3ef 8305 	mrs	r3, IPSR
 800dc4e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800dc50:	697a      	ldr	r2, [r7, #20]
 800dc52:	4b0d      	ldr	r3, [pc, #52]	; (800dc88 <_nxe_ip_address_get+0x7c>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4313      	orrs	r3, r2
 800dc58:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800dc5c:	d304      	bcc.n	800dc68 <_nxe_ip_address_get+0x5c>
 800dc5e:	4b0b      	ldr	r3, [pc, #44]	; (800dc8c <_nxe_ip_address_get+0x80>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4a0b      	ldr	r2, [pc, #44]	; (800dc90 <_nxe_ip_address_get+0x84>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d101      	bne.n	800dc6c <_nxe_ip_address_get+0x60>
 800dc68:	2311      	movs	r3, #17
 800dc6a:	e006      	b.n	800dc7a <_nxe_ip_address_get+0x6e>

    /* Call actual IP address get function.  */
    status =  _nx_ip_address_get(ip_ptr, ip_address, network_mask);
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	68b9      	ldr	r1, [r7, #8]
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f7fb fe30 	bl	80098d6 <_nx_ip_address_get>
 800dc76:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800dc78:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3720      	adds	r7, #32
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	49502020 	.word	0x49502020
 800dc88:	2000008c 	.word	0x2000008c
 800dc8c:	20008198 	.word	0x20008198
 800dc90:	200082e0 	.word	0x200082e0

0800dc94 <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b092      	sub	sp, #72	; 0x48
 800dc98:	af06      	add	r7, sp, #24
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
 800dca0:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d012      	beq.n	800dcd2 <_nxe_ip_create+0x3e>
 800dcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d00f      	beq.n	800dcd2 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800dcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb4:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800dcb6:	4a59      	ldr	r2, [pc, #356]	; (800de1c <_nxe_ip_create+0x188>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d10a      	bne.n	800dcd2 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800dcbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d007      	beq.n	800dcd2 <_nxe_ip_create+0x3e>
 800dcc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d004      	beq.n	800dcd2 <_nxe_ip_create+0x3e>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 800dcc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcca:	f240 72bc 	movw	r2, #1980	; 0x7bc
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d001      	beq.n	800dcd6 <_nxe_ip_create+0x42>
    {
        return(NX_PTR_ERROR);
 800dcd2:	2307      	movs	r3, #7
 800dcd4:	e09d      	b.n	800de12 <_nxe_ip_create+0x17e>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 800dcd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcd8:	2bc7      	cmp	r3, #199	; 0xc7
 800dcda:	d801      	bhi.n	800dce0 <_nxe_ip_create+0x4c>
    {
        return(NX_SIZE_ERROR);
 800dcdc:	2309      	movs	r3, #9
 800dcde:	e098      	b.n	800de12 <_nxe_ip_create+0x17e>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 800dce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dce2:	2b1f      	cmp	r3, #31
 800dce4:	d901      	bls.n	800dcea <_nxe_ip_create+0x56>
    {
        return(NX_OPTION_ERROR);
 800dce6:	230a      	movs	r3, #10
 800dce8:	e093      	b.n	800de12 <_nxe_ip_create+0x17e>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 800dcea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcec:	3b01      	subs	r3, #1
 800dcee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcf0:	4413      	add	r3, r2
 800dcf2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800dcf4:	f002 fd64 	bl	80107c0 <_tx_thread_identify>
 800dcf8:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 800dcfa:	6a3b      	ldr	r3, [r7, #32]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d006      	beq.n	800dd0e <_nxe_ip_create+0x7a>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800dd00:	f107 0310 	add.w	r3, r7, #16
 800dd04:	461a      	mov	r2, r3
 800dd06:	2100      	movs	r1, #0
 800dd08:	6a38      	ldr	r0, [r7, #32]
 800dd0a:	f002 fdb3 	bl	8010874 <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 800dd0e:	4b44      	ldr	r3, [pc, #272]	; (800de20 <_nxe_ip_create+0x18c>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	62fb      	str	r3, [r7, #44]	; 0x2c
    created_count =  _nx_ip_created_count;
 800dd14:	4b43      	ldr	r3, [pc, #268]	; (800de24 <_nxe_ip_create+0x190>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	62bb      	str	r3, [r7, #40]	; 0x28
    while (created_count--)
 800dd1a:	e02b      	b.n	800dd74 <_nxe_ip_create+0xe0>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d017      	beq.n	800dd54 <_nxe_ip_create+0xc0>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800dd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd26:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
        if ((ip_ptr == created_ip) ||
 800dd2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d305      	bcc.n	800dd3c <_nxe_ip_create+0xa8>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800dd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd32:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800dd36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d30b      	bcc.n	800dd54 <_nxe_ip_create+0xc0>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800dd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800dd42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d311      	bcc.n	800dd6c <_nxe_ip_create+0xd8>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800dd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800dd4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d20b      	bcs.n	800dd6c <_nxe_ip_create+0xd8>
        {

            /* Restore preemption.  */
            if (current_thread)
 800dd54:	6a3b      	ldr	r3, [r7, #32]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d006      	beq.n	800dd68 <_nxe_ip_create+0xd4>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	f107 0210 	add.w	r2, r7, #16
 800dd60:	4619      	mov	r1, r3
 800dd62:	6a38      	ldr	r0, [r7, #32]
 800dd64:	f002 fd86 	bl	8010874 <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 800dd68:	2307      	movs	r3, #7
 800dd6a:	e052      	b.n	800de12 <_nxe_ip_create+0x17e>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 800dd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6e:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 800dd72:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (created_count--)
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	1e5a      	subs	r2, r3, #1
 800dd78:	62ba      	str	r2, [r7, #40]	; 0x28
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d1ce      	bne.n	800dd1c <_nxe_ip_create+0x88>
    }

    /* Restore preemption.  */
    if (current_thread)
 800dd7e:	6a3b      	ldr	r3, [r7, #32]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d006      	beq.n	800dd92 <_nxe_ip_create+0xfe>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	f107 0210 	add.w	r2, r7, #16
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	6a38      	ldr	r0, [r7, #32]
 800dd8e:	f002 fd71 	bl	8010874 <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d010      	beq.n	800ddba <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800dd98:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	da0d      	bge.n	800ddba <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800dda4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dda8:	d007      	beq.n	800ddba <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800ddb0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800ddb4:	d001      	beq.n	800ddba <_nxe_ip_create+0x126>
    {
        return(NX_IP_ADDRESS_ERROR);
 800ddb6:	2321      	movs	r3, #33	; 0x21
 800ddb8:	e02b      	b.n	800de12 <_nxe_ip_create+0x17e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ddba:	f3ef 8305 	mrs	r3, IPSR
 800ddbe:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ddc0:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800ddc2:	4b19      	ldr	r3, [pc, #100]	; (800de28 <_nxe_ip_create+0x194>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d009      	beq.n	800dde0 <_nxe_ip_create+0x14c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ddcc:	f3ef 8305 	mrs	r3, IPSR
 800ddd0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ddd2:	697a      	ldr	r2, [r7, #20]
 800ddd4:	4b14      	ldr	r3, [pc, #80]	; (800de28 <_nxe_ip_create+0x194>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ddde:	d304      	bcc.n	800ddea <_nxe_ip_create+0x156>
 800dde0:	4b12      	ldr	r3, [pc, #72]	; (800de2c <_nxe_ip_create+0x198>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a12      	ldr	r2, [pc, #72]	; (800de30 <_nxe_ip_create+0x19c>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d101      	bne.n	800ddee <_nxe_ip_create+0x15a>
 800ddea:	2311      	movs	r3, #17
 800ddec:	e011      	b.n	800de12 <_nxe_ip_create+0x17e>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 800ddee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddf0:	9304      	str	r3, [sp, #16]
 800ddf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddf4:	9303      	str	r3, [sp, #12]
 800ddf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddf8:	9302      	str	r3, [sp, #8]
 800ddfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddfc:	9301      	str	r3, [sp, #4]
 800ddfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	68b9      	ldr	r1, [r7, #8]
 800de08:	68f8      	ldr	r0, [r7, #12]
 800de0a:	f7fb fe81 	bl	8009b10 <_nx_ip_create>
 800de0e:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 800de10:	69fb      	ldr	r3, [r7, #28]
}
 800de12:	4618      	mov	r0, r3
 800de14:	3730      	adds	r7, #48	; 0x30
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	5041434b 	.word	0x5041434b
 800de20:	2000813c 	.word	0x2000813c
 800de24:	20008140 	.word	0x20008140
 800de28:	2000008c 	.word	0x2000008c
 800de2c:	20008198 	.word	0x20008198
 800de30:	200082e0 	.word	0x200082e0

0800de34 <_nxe_ip_driver_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_driver_direct_command(NX_IP *ip_ptr, UINT command, ULONG *return_value_ptr)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b088      	sub	sp, #32
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	607a      	str	r2, [r7, #4]

UINT status;

    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (return_value_ptr == NX_NULL))
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d007      	beq.n	800de56 <_nxe_ip_driver_direct_command+0x22>
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4a16      	ldr	r2, [pc, #88]	; (800dea4 <_nxe_ip_driver_direct_command+0x70>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d102      	bne.n	800de56 <_nxe_ip_driver_direct_command+0x22>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d101      	bne.n	800de5a <_nxe_ip_driver_direct_command+0x26>
    {
        return(NX_PTR_ERROR);
 800de56:	2307      	movs	r3, #7
 800de58:	e020      	b.n	800de9c <_nxe_ip_driver_direct_command+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800de5a:	f3ef 8305 	mrs	r3, IPSR
 800de5e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800de60:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800de62:	4b11      	ldr	r3, [pc, #68]	; (800dea8 <_nxe_ip_driver_direct_command+0x74>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4313      	orrs	r3, r2
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d009      	beq.n	800de80 <_nxe_ip_driver_direct_command+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800de6c:	f3ef 8305 	mrs	r3, IPSR
 800de70:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800de72:	697a      	ldr	r2, [r7, #20]
 800de74:	4b0c      	ldr	r3, [pc, #48]	; (800dea8 <_nxe_ip_driver_direct_command+0x74>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4313      	orrs	r3, r2
 800de7a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800de7e:	d304      	bcc.n	800de8a <_nxe_ip_driver_direct_command+0x56>
 800de80:	4b0a      	ldr	r3, [pc, #40]	; (800deac <_nxe_ip_driver_direct_command+0x78>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a0a      	ldr	r2, [pc, #40]	; (800deb0 <_nxe_ip_driver_direct_command+0x7c>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d101      	bne.n	800de8e <_nxe_ip_driver_direct_command+0x5a>
 800de8a:	2311      	movs	r3, #17
 800de8c:	e006      	b.n	800de9c <_nxe_ip_driver_direct_command+0x68>

    /* Call actual IP direct driver command function.  */
    status =  _nx_ip_driver_direct_command(ip_ptr, command, return_value_ptr);
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	68b9      	ldr	r1, [r7, #8]
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f7fc f88f 	bl	8009fb6 <_nx_ip_driver_direct_command>
 800de98:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800de9a:	69fb      	ldr	r3, [r7, #28]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3720      	adds	r7, #32
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	49502020 	.word	0x49502020
 800dea8:	2000008c 	.word	0x2000008c
 800deac:	20008198 	.word	0x20008198
 800deb0:	200082e0 	.word	0x200082e0

0800deb4 <_nxe_ip_interface_status_check>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_interface_status_check(NX_IP *ip_ptr, UINT interface_index, ULONG needed_status,
                                     ULONG *actual_status, ULONG wait_option)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b088      	sub	sp, #32
 800deb8:	af02      	add	r7, sp, #8
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
 800dec0:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (actual_status == NX_NULL))
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d007      	beq.n	800ded8 <_nxe_ip_interface_status_check+0x24>
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a20      	ldr	r2, [pc, #128]	; (800df50 <_nxe_ip_interface_status_check+0x9c>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d102      	bne.n	800ded8 <_nxe_ip_interface_status_check+0x24>
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d101      	bne.n	800dedc <_nxe_ip_interface_status_check+0x28>
    {
        return(NX_PTR_ERROR);
 800ded8:	2307      	movs	r3, #7
 800deda:	e034      	b.n	800df46 <_nxe_ip_interface_status_check+0x92>
    }

    /* Check for invalid interface index. */
    if ((interface_index >= NX_MAX_PHYSICAL_INTERFACES) ||
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d10a      	bne.n	800def8 <_nxe_ip_interface_status_check+0x44>
        (ip_ptr -> nx_ip_interface[interface_index].nx_interface_valid) == 0)
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	214c      	movs	r1, #76	; 0x4c
 800dee8:	fb01 f303 	mul.w	r3, r1, r3
 800deec:	4413      	add	r3, r2
 800deee:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800def2:	781b      	ldrb	r3, [r3, #0]
    if ((interface_index >= NX_MAX_PHYSICAL_INTERFACES) ||
 800def4:	2b00      	cmp	r3, #0
 800def6:	d101      	bne.n	800defc <_nxe_ip_interface_status_check+0x48>
    {
        return(NX_INVALID_INTERFACE);
 800def8:	234c      	movs	r3, #76	; 0x4c
 800defa:	e024      	b.n	800df46 <_nxe_ip_interface_status_check+0x92>
    }

    /* Check for valid options.  */
    if (needed_status &
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	4b15      	ldr	r3, [pc, #84]	; (800df54 <_nxe_ip_interface_status_check+0xa0>)
 800df00:	4013      	ands	r3, r2
 800df02:	2b00      	cmp	r3, #0
 800df04:	d001      	beq.n	800df0a <_nxe_ip_interface_status_check+0x56>
#ifndef NX_DISABLE_IPV4
          | (NX_IP_ADDRESS_RESOLVED | NX_IP_ARP_ENABLED | NX_IP_RARP_COMPLETE | NX_IP_IGMP_ENABLED)
#endif /* !NX_DISABLE_IPV4  */
         ))
    {
        return(NX_OPTION_ERROR);
 800df06:	230a      	movs	r3, #10
 800df08:	e01d      	b.n	800df46 <_nxe_ip_interface_status_check+0x92>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800df0a:	f3ef 8305 	mrs	r3, IPSR
 800df0e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800df10:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800df12:	4b11      	ldr	r3, [pc, #68]	; (800df58 <_nxe_ip_interface_status_check+0xa4>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4313      	orrs	r3, r2
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d108      	bne.n	800df2e <_nxe_ip_interface_status_check+0x7a>
 800df1c:	4b0f      	ldr	r3, [pc, #60]	; (800df5c <_nxe_ip_interface_status_check+0xa8>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d004      	beq.n	800df2e <_nxe_ip_interface_status_check+0x7a>
 800df24:	4b0d      	ldr	r3, [pc, #52]	; (800df5c <_nxe_ip_interface_status_check+0xa8>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a0d      	ldr	r2, [pc, #52]	; (800df60 <_nxe_ip_interface_status_check+0xac>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d101      	bne.n	800df32 <_nxe_ip_interface_status_check+0x7e>
 800df2e:	2311      	movs	r3, #17
 800df30:	e009      	b.n	800df46 <_nxe_ip_interface_status_check+0x92>

    /* Call actual IP interface status check function.  */
    status =  _nx_ip_interface_status_check(ip_ptr, interface_index, needed_status, actual_status, wait_option);
 800df32:	6a3b      	ldr	r3, [r7, #32]
 800df34:	9300      	str	r3, [sp, #0]
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	68b9      	ldr	r1, [r7, #8]
 800df3c:	68f8      	ldr	r0, [r7, #12]
 800df3e:	f7fc fce8 	bl	800a912 <_nx_ip_interface_status_check>
 800df42:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800df44:	697b      	ldr	r3, [r7, #20]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3718      	adds	r7, #24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	49502020 	.word	0x49502020
 800df54:	fffffe00 	.word	0xfffffe00
 800df58:	2000008c 	.word	0x2000008c
 800df5c:	20008198 	.word	0x20008198
 800df60:	200082e0 	.word	0x200082e0

0800df64 <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b086      	sub	sp, #24
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
 800df70:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d007      	beq.n	800df88 <_nxe_packet_allocate+0x24>
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a18      	ldr	r2, [pc, #96]	; (800dfe0 <_nxe_packet_allocate+0x7c>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d102      	bne.n	800df88 <_nxe_packet_allocate+0x24>
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 800df88:	2307      	movs	r3, #7
 800df8a:	e025      	b.n	800dfd8 <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f003 0303 	and.w	r3, r3, #3
 800df92:	2b00      	cmp	r3, #0
 800df94:	d001      	beq.n	800df9a <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 800df96:	230a      	movs	r3, #10
 800df98:	e01e      	b.n	800dfd8 <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d013      	beq.n	800dfc8 <_nxe_packet_allocate+0x64>
 800dfa0:	4b10      	ldr	r3, [pc, #64]	; (800dfe4 <_nxe_packet_allocate+0x80>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d00d      	beq.n	800dfc4 <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dfa8:	f3ef 8305 	mrs	r3, IPSR
 800dfac:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800dfae:	693a      	ldr	r2, [r7, #16]
 800dfb0:	4b0d      	ldr	r3, [pc, #52]	; (800dfe8 <_nxe_packet_allocate+0x84>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d104      	bne.n	800dfc4 <_nxe_packet_allocate+0x60>
 800dfba:	4b0a      	ldr	r3, [pc, #40]	; (800dfe4 <_nxe_packet_allocate+0x80>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a0b      	ldr	r2, [pc, #44]	; (800dfec <_nxe_packet_allocate+0x88>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d101      	bne.n	800dfc8 <_nxe_packet_allocate+0x64>
 800dfc4:	2311      	movs	r3, #17
 800dfc6:	e007      	b.n	800dfd8 <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	68b9      	ldr	r1, [r7, #8]
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f7fd fd70 	bl	800bab4 <_nx_packet_allocate>
 800dfd4:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800dfd6:	697b      	ldr	r3, [r7, #20]
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3718      	adds	r7, #24
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	5041434b 	.word	0x5041434b
 800dfe4:	20008198 	.word	0x20008198
 800dfe8:	2000008c 	.word	0x2000008c
 800dfec:	200082e0 	.word	0x200082e0

0800dff0 <_nxe_packet_data_retrieve>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	60b9      	str	r1, [r7, #8]
 800dffa:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((packet_ptr == NX_NULL) || (buffer_start == NX_NULL) || (bytes_copied == NX_NULL))
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d005      	beq.n	800e00e <_nxe_packet_data_retrieve+0x1e>
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d002      	beq.n	800e00e <_nxe_packet_data_retrieve+0x1e>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d101      	bne.n	800e012 <_nxe_packet_data_retrieve+0x22>
    {
        return(NX_PTR_ERROR);
 800e00e:	2307      	movs	r3, #7
 800e010:	e006      	b.n	800e020 <_nxe_packet_data_retrieve+0x30>
    }

    /* Call actual packet data retrieve function.  */
    status =  _nx_packet_data_retrieve(packet_ptr, buffer_start, bytes_copied);
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	68b9      	ldr	r1, [r7, #8]
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f7fd ffe0 	bl	800bfdc <_nx_packet_data_retrieve>
 800e01c:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e01e:	697b      	ldr	r3, [r7, #20]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3718      	adds	r7, #24
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b094      	sub	sp, #80	; 0x50
 800e02c:	af02      	add	r7, sp, #8
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	607a      	str	r2, [r7, #4]
 800e034:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 800e036:	2300      	movs	r3, #0
 800e038:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d005      	beq.n	800e04c <_nxe_packet_pool_create+0x24>
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d002      	beq.n	800e04c <_nxe_packet_pool_create+0x24>
 800e046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e048:	2b3c      	cmp	r3, #60	; 0x3c
 800e04a:	d001      	beq.n	800e050 <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 800e04c:	2307      	movs	r3, #7
 800e04e:	e0a7      	b.n	800e1a0 <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	3303      	adds	r3, #3
 800e054:	f023 0303 	bic.w	r3, r3, #3
 800e058:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800e05a:	683a      	ldr	r2, [r7, #0]
 800e05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e05e:	1ad2      	subs	r2, r2, r3
 800e060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e062:	4413      	add	r3, r2
 800e064:	f023 0303 	bic.w	r3, r3, #3
 800e068:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800e06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e06c:	3338      	adds	r3, #56	; 0x38
 800e06e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800e070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e072:	3303      	adds	r3, #3
 800e074:	f023 0303 	bic.w	r3, r3, #3
 800e078:	637b      	str	r3, [r7, #52]	; 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800e07a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e07e:	1ad3      	subs	r3, r2, r3
 800e080:	633b      	str	r3, [r7, #48]	; 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800e082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4413      	add	r3, r2
 800e088:	3303      	adds	r3, #3
 800e08a:	f023 0203 	bic.w	r2, r3, #3
 800e08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800e094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e096:	2b04      	cmp	r3, #4
 800e098:	d908      	bls.n	800e0ac <_nxe_packet_pool_create+0x84>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d005      	beq.n	800e0ac <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 800e0a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a4:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800e0a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d201      	bcs.n	800e0b0 <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 800e0ac:	2309      	movs	r3, #9
 800e0ae:	e077      	b.n	800e1a0 <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 800e0b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	683a      	ldr	r2, [r7, #0]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800e0ba:	f002 fb81 	bl	80107c0 <_tx_thread_identify>
 800e0be:	6278      	str	r0, [r7, #36]	; 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d006      	beq.n	800e0d4 <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800e0c6:	f107 0310 	add.w	r3, r7, #16
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	2100      	movs	r1, #0
 800e0ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0d0:	f002 fbd0 	bl	8010874 <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 800e0d4:	4b34      	ldr	r3, [pc, #208]	; (800e1a8 <_nxe_packet_pool_create+0x180>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	647b      	str	r3, [r7, #68]	; 0x44
    created_count =  _nx_packet_pool_created_count;
 800e0da:	4b34      	ldr	r3, [pc, #208]	; (800e1ac <_nxe_packet_pool_create+0x184>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	643b      	str	r3, [r7, #64]	; 0x40
    while (created_count--)
 800e0e0:	e02b      	b.n	800e13a <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 800e0e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0e4:	6a1a      	ldr	r2, [r3, #32]
 800e0e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	4413      	add	r3, r2
 800e0ee:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 800e0f0:	68fa      	ldr	r2, [r7, #12]
 800e0f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d011      	beq.n	800e11c <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800e0f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0fa:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 800e0fc:	683a      	ldr	r2, [r7, #0]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d303      	bcc.n	800e10a <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800e102:	683a      	ldr	r2, [r7, #0]
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	429a      	cmp	r2, r3
 800e108:	d308      	bcc.n	800e11c <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800e10a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e10c:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800e10e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e110:	429a      	cmp	r2, r3
 800e112:	d30f      	bcc.n	800e134 <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800e114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d20b      	bcs.n	800e134 <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 800e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d006      	beq.n	800e130 <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	f107 0210 	add.w	r2, r7, #16
 800e128:	4619      	mov	r1, r3
 800e12a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e12c:	f002 fba2 	bl	8010874 <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 800e130:	2307      	movs	r3, #7
 800e132:	e035      	b.n	800e1a0 <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 800e134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e138:	647b      	str	r3, [r7, #68]	; 0x44
    while (created_count--)
 800e13a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e13c:	1e5a      	subs	r2, r3, #1
 800e13e:	643a      	str	r2, [r7, #64]	; 0x40
 800e140:	2b00      	cmp	r3, #0
 800e142:	d1ce      	bne.n	800e0e2 <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 800e144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e146:	2b00      	cmp	r3, #0
 800e148:	d006      	beq.n	800e158 <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	f107 0210 	add.w	r2, r7, #16
 800e150:	4619      	mov	r1, r3
 800e152:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e154:	f002 fb8e 	bl	8010874 <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e158:	f3ef 8305 	mrs	r3, IPSR
 800e15c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e15e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800e160:	4b13      	ldr	r3, [pc, #76]	; (800e1b0 <_nxe_packet_pool_create+0x188>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4313      	orrs	r3, r2
 800e166:	2b00      	cmp	r3, #0
 800e168:	d009      	beq.n	800e17e <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e16a:	f3ef 8305 	mrs	r3, IPSR
 800e16e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e170:	697a      	ldr	r2, [r7, #20]
 800e172:	4b0f      	ldr	r3, [pc, #60]	; (800e1b0 <_nxe_packet_pool_create+0x188>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4313      	orrs	r3, r2
 800e178:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e17c:	d304      	bcc.n	800e188 <_nxe_packet_pool_create+0x160>
 800e17e:	4b0d      	ldr	r3, [pc, #52]	; (800e1b4 <_nxe_packet_pool_create+0x18c>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4a0d      	ldr	r2, [pc, #52]	; (800e1b8 <_nxe_packet_pool_create+0x190>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d101      	bne.n	800e18c <_nxe_packet_pool_create+0x164>
 800e188:	2311      	movs	r3, #17
 800e18a:	e009      	b.n	800e1a0 <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 800e18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e18e:	9300      	str	r3, [sp, #0]
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	68b9      	ldr	r1, [r7, #8]
 800e196:	68f8      	ldr	r0, [r7, #12]
 800e198:	f7fd ffc0 	bl	800c11c <_nx_packet_pool_create>
 800e19c:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 800e19e:	6a3b      	ldr	r3, [r7, #32]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3748      	adds	r7, #72	; 0x48
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	20008144 	.word	0x20008144
 800e1ac:	20008148 	.word	0x20008148
 800e1b0:	2000008c 	.word	0x2000008c
 800e1b4:	20008198 	.word	0x20008198
 800e1b8:	200082e0 	.word	0x200082e0

0800e1bc <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d009      	beq.n	800e1e4 <_nxe_packet_release+0x28>
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d005      	beq.n	800e1e4 <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800e1de:	4a12      	ldr	r2, [pc, #72]	; (800e228 <_nxe_packet_release+0x6c>)
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d001      	beq.n	800e1e8 <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800e1e4:	2307      	movs	r3, #7
 800e1e6:	e01a      	b.n	800e21e <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	689a      	ldr	r2, [r3, #8]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d201      	bcs.n	800e1f8 <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800e1f4:	2302      	movs	r3, #2
 800e1f6:	e012      	b.n	800e21e <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	68da      	ldr	r2, [r3, #12]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	695b      	ldr	r3, [r3, #20]
 800e200:	429a      	cmp	r2, r3
 800e202:	d901      	bls.n	800e208 <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 800e204:	2303      	movs	r3, #3
 800e206:	e00a      	b.n	800e21e <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f7fe f8e1 	bl	800c3d0 <_nx_packet_release>
 800e20e:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d102      	bne.n	800e21c <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800e21c:	68bb      	ldr	r3, [r7, #8]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3710      	adds	r7, #16
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	5041434b 	.word	0x5041434b

0800e22c <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d009      	beq.n	800e254 <_nxe_packet_transmit_release+0x28>
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d005      	beq.n	800e254 <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800e24e:	4a12      	ldr	r2, [pc, #72]	; (800e298 <_nxe_packet_transmit_release+0x6c>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d001      	beq.n	800e258 <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800e254:	2307      	movs	r3, #7
 800e256:	e01a      	b.n	800e28e <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	689a      	ldr	r2, [r3, #8]
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	691b      	ldr	r3, [r3, #16]
 800e260:	429a      	cmp	r2, r3
 800e262:	d201      	bcs.n	800e268 <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800e264:	2302      	movs	r3, #2
 800e266:	e012      	b.n	800e28e <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	68da      	ldr	r2, [r3, #12]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	695b      	ldr	r3, [r3, #20]
 800e270:	429a      	cmp	r2, r3
 800e272:	d901      	bls.n	800e278 <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 800e274:	2303      	movs	r3, #3
 800e276:	e00a      	b.n	800e28e <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f7fe f95f 	bl	800c53c <_nx_packet_transmit_release>
 800e27e:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d102      	bne.n	800e28c <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800e28c:	68bb      	ldr	r3, [r7, #8]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3710      	adds	r7, #16
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	5041434b 	.word	0x5041434b

0800e29c <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b086      	sub	sp, #24
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d004      	beq.n	800e2b4 <_nxe_udp_enable+0x18>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4a15      	ldr	r2, [pc, #84]	; (800e304 <_nxe_udp_enable+0x68>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d001      	beq.n	800e2b8 <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800e2b4:	2307      	movs	r3, #7
 800e2b6:	e020      	b.n	800e2fa <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d001      	beq.n	800e2c6 <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800e2c2:	2315      	movs	r3, #21
 800e2c4:	e019      	b.n	800e2fa <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e2c6:	f3ef 8305 	mrs	r3, IPSR
 800e2ca:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e2cc:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 800e2ce:	4b0e      	ldr	r3, [pc, #56]	; (800e308 <_nxe_udp_enable+0x6c>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00b      	beq.n	800e2f0 <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e2d8:	f3ef 8305 	mrs	r3, IPSR
 800e2dc:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e2de:	68fa      	ldr	r2, [r7, #12]
 800e2e0:	4b09      	ldr	r3, [pc, #36]	; (800e308 <_nxe_udp_enable+0x6c>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e2ea:	d201      	bcs.n	800e2f0 <_nxe_udp_enable+0x54>
 800e2ec:	2311      	movs	r3, #17
 800e2ee:	e004      	b.n	800e2fa <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7fe fa25 	bl	800c740 <_nx_udp_enable>
 800e2f6:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e2f8:	697b      	ldr	r3, [r7, #20]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3718      	adds	r7, #24
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	49502020 	.word	0x49502020
 800e308:	2000008c 	.word	0x2000008c

0800e30c <_nxe_udp_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b086      	sub	sp, #24
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d004      	beq.n	800e328 <_nxe_udp_socket_bind+0x1c>
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4a19      	ldr	r2, [pc, #100]	; (800e388 <_nxe_udp_socket_bind+0x7c>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d001      	beq.n	800e32c <_nxe_udp_socket_bind+0x20>
    {
        return(NX_PTR_ERROR);
 800e328:	2307      	movs	r3, #7
 800e32a:	e028      	b.n	800e37e <_nxe_udp_socket_bind+0x72>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e334:	2b00      	cmp	r3, #0
 800e336:	d101      	bne.n	800e33c <_nxe_udp_socket_bind+0x30>
    {
        return(NX_NOT_ENABLED);
 800e338:	2314      	movs	r3, #20
 800e33a:	e020      	b.n	800e37e <_nxe_udp_socket_bind+0x72>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e342:	d301      	bcc.n	800e348 <_nxe_udp_socket_bind+0x3c>
    {
        return(NX_INVALID_PORT);
 800e344:	2346      	movs	r3, #70	; 0x46
 800e346:	e01a      	b.n	800e37e <_nxe_udp_socket_bind+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e348:	f3ef 8305 	mrs	r3, IPSR
 800e34c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e34e:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800e350:	4b0e      	ldr	r3, [pc, #56]	; (800e38c <_nxe_udp_socket_bind+0x80>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4313      	orrs	r3, r2
 800e356:	2b00      	cmp	r3, #0
 800e358:	d108      	bne.n	800e36c <_nxe_udp_socket_bind+0x60>
 800e35a:	4b0d      	ldr	r3, [pc, #52]	; (800e390 <_nxe_udp_socket_bind+0x84>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d004      	beq.n	800e36c <_nxe_udp_socket_bind+0x60>
 800e362:	4b0b      	ldr	r3, [pc, #44]	; (800e390 <_nxe_udp_socket_bind+0x84>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4a0b      	ldr	r2, [pc, #44]	; (800e394 <_nxe_udp_socket_bind+0x88>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d101      	bne.n	800e370 <_nxe_udp_socket_bind+0x64>
 800e36c:	2311      	movs	r3, #17
 800e36e:	e006      	b.n	800e37e <_nxe_udp_socket_bind+0x72>

    /* Call actual UDP socket bind function.  */
    status =  _nx_udp_socket_bind(socket_ptr, port, wait_option);
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	68b9      	ldr	r1, [r7, #8]
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f7fe fcc9 	bl	800cd0c <_nx_udp_socket_bind>
 800e37a:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e37c:	697b      	ldr	r3, [r7, #20]
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3718      	adds	r7, #24
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	55445020 	.word	0x55445020
 800e38c:	2000008c 	.word	0x2000008c
 800e390:	20008198 	.word	0x20008198
 800e394:	200082e0 	.word	0x200082e0

0800e398 <_nxe_udp_socket_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                             ULONG type_of_service, ULONG fragment, UINT time_to_live,
                             ULONG queue_maximum, UINT udp_socket_size)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b08e      	sub	sp, #56	; 0x38
 800e39c:	af04      	add	r7, sp, #16
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	607a      	str	r2, [r7, #4]
 800e3a4:	603b      	str	r3, [r7, #0]
NX_UDP_SOCKET *created_socket;
ULONG          created_count;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) ||
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00a      	beq.n	800e3c2 <_nxe_udp_socket_create+0x2a>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a3f      	ldr	r2, [pc, #252]	; (800e4b0 <_nxe_udp_socket_create+0x118>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d105      	bne.n	800e3c2 <_nxe_udp_socket_create+0x2a>
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d002      	beq.n	800e3c2 <_nxe_udp_socket_create+0x2a>
        (socket_ptr == NX_NULL) || (udp_socket_size != (UINT)sizeof(NX_UDP_SOCKET)))
 800e3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3be:	2b78      	cmp	r3, #120	; 0x78
 800e3c0:	d001      	beq.n	800e3c6 <_nxe_udp_socket_create+0x2e>
    {
        return(NX_PTR_ERROR);
 800e3c2:	2307      	movs	r3, #7
 800e3c4:	e06f      	b.n	800e4a6 <_nxe_udp_socket_create+0x10e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e3c6:	f3ef 8305 	mrs	r3, IPSR
 800e3ca:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e3cc:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800e3ce:	4b39      	ldr	r3, [pc, #228]	; (800e4b4 <_nxe_udp_socket_create+0x11c>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d009      	beq.n	800e3ec <_nxe_udp_socket_create+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e3d8:	f3ef 8305 	mrs	r3, IPSR
 800e3dc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e3de:	697a      	ldr	r2, [r7, #20]
 800e3e0:	4b34      	ldr	r3, [pc, #208]	; (800e4b4 <_nxe_udp_socket_create+0x11c>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e3ea:	d304      	bcc.n	800e3f6 <_nxe_udp_socket_create+0x5e>
 800e3ec:	4b32      	ldr	r3, [pc, #200]	; (800e4b8 <_nxe_udp_socket_create+0x120>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a32      	ldr	r2, [pc, #200]	; (800e4bc <_nxe_udp_socket_create+0x124>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d101      	bne.n	800e3fa <_nxe_udp_socket_create+0x62>
 800e3f6:	2311      	movs	r3, #17
 800e3f8:	e055      	b.n	800e4a6 <_nxe_udp_socket_create+0x10e>

    /* Get protection mutex.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e400:	f04f 31ff 	mov.w	r1, #4294967295
 800e404:	4618      	mov	r0, r3
 800e406:	f001 fa35 	bl	800f874 <_tx_mutex_get>

    /* Pickup created count and created socket pointer.  */
    created_count =   ip_ptr -> nx_ip_udp_created_sockets_count;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800e410:	623b      	str	r3, [r7, #32]
    created_socket =  ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800e418:	627b      	str	r3, [r7, #36]	; 0x24

    /* Loop to look for socket already created.  */
    while (created_count--)
 800e41a:	e00e      	b.n	800e43a <_nxe_udp_socket_create+0xa2>
    {

        /* Compare the new socket with the already created socket.  */
        if (socket_ptr == created_socket)
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e420:	429a      	cmp	r2, r3
 800e422:	d107      	bne.n	800e434 <_nxe_udp_socket_create+0x9c>
        {

            /* Error, socket already created!  */

            /* Release protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e42a:	4618      	mov	r0, r3
 800e42c:	f001 fc9a 	bl	800fd64 <_tx_mutex_put>

            /* Return error.  */
            return(NX_PTR_ERROR);
 800e430:	2307      	movs	r3, #7
 800e432:	e038      	b.n	800e4a6 <_nxe_udp_socket_create+0x10e>
        }

        /* Move to next created socket.  */
        created_socket =  created_socket -> nx_udp_socket_created_next;
 800e434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e438:	627b      	str	r3, [r7, #36]	; 0x24
    while (created_count--)
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	1e5a      	subs	r2, r3, #1
 800e43e:	623a      	str	r2, [r7, #32]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1eb      	bne.n	800e41c <_nxe_udp_socket_create+0x84>
    }

    /* Release protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e44a:	4618      	mov	r0, r3
 800e44c:	f001 fc8a 	bl	800fd64 <_tx_mutex_put>

    /* Check to see if UDP is enabled.  */
    if (!ip_ptr -> nx_ip_udp_packet_receive)
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e456:	2b00      	cmp	r3, #0
 800e458:	d101      	bne.n	800e45e <_nxe_udp_socket_create+0xc6>
    {
        return(NX_NOT_ENABLED);
 800e45a:	2314      	movs	r3, #20
 800e45c:	e023      	b.n	800e4a6 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid type of service.  */
    if (type_of_service & ~(NX_IP_TOS_MASK))
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800e464:	2b00      	cmp	r3, #0
 800e466:	d001      	beq.n	800e46c <_nxe_udp_socket_create+0xd4>
    {
        return(NX_OPTION_ERROR);
 800e468:	230a      	movs	r3, #10
 800e46a:	e01c      	b.n	800e4a6 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid fragment option.  */
    if ((fragment != NX_FRAGMENT_OKAY) &&
 800e46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d005      	beq.n	800e47e <_nxe_udp_socket_create+0xe6>
 800e472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e478:	d001      	beq.n	800e47e <_nxe_udp_socket_create+0xe6>
        (fragment != NX_DONT_FRAGMENT))
    {
        return(NX_OPTION_ERROR);
 800e47a:	230a      	movs	r3, #10
 800e47c:	e013      	b.n	800e4a6 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid time to live option.  */
    if (((ULONG)time_to_live) > NX_IP_TIME_TO_LIVE_MASK)
 800e47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e480:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800e484:	d901      	bls.n	800e48a <_nxe_udp_socket_create+0xf2>
    {
        return(NX_OPTION_ERROR);
 800e486:	230a      	movs	r3, #10
 800e488:	e00d      	b.n	800e4a6 <_nxe_udp_socket_create+0x10e>
    }

    /* Call actual UDP socket create function.  */
    status =  _nx_udp_socket_create(ip_ptr, socket_ptr, name, type_of_service,
 800e48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48c:	9302      	str	r3, [sp, #8]
 800e48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e490:	9301      	str	r3, [sp, #4]
 800e492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e494:	9300      	str	r3, [sp, #0]
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	68b9      	ldr	r1, [r7, #8]
 800e49c:	68f8      	ldr	r0, [r7, #12]
 800e49e:	f7fe fd63 	bl	800cf68 <_nx_udp_socket_create>
 800e4a2:	61f8      	str	r0, [r7, #28]
                                    fragment, time_to_live, queue_maximum);

    /* Return completion status.  */
    return(status);
 800e4a4:	69fb      	ldr	r3, [r7, #28]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3728      	adds	r7, #40	; 0x28
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	49502020 	.word	0x49502020
 800e4b4:	2000008c 	.word	0x2000008c
 800e4b8:	20008198 	.word	0x20008198
 800e4bc:	200082e0 	.word	0x200082e0

0800e4c0 <_nxe_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) || (packet_ptr == NX_NULL))
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d007      	beq.n	800e4e2 <_nxe_udp_socket_receive+0x22>
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4a17      	ldr	r2, [pc, #92]	; (800e534 <_nxe_udp_socket_receive+0x74>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d102      	bne.n	800e4e2 <_nxe_udp_socket_receive+0x22>
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d101      	bne.n	800e4e6 <_nxe_udp_socket_receive+0x26>
    {
        return(NX_PTR_ERROR);
 800e4e2:	2307      	movs	r3, #7
 800e4e4:	e022      	b.n	800e52c <_nxe_udp_socket_receive+0x6c>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d101      	bne.n	800e4f6 <_nxe_udp_socket_receive+0x36>
    {
        return(NX_NOT_ENABLED);
 800e4f2:	2314      	movs	r3, #20
 800e4f4:	e01a      	b.n	800e52c <_nxe_udp_socket_receive+0x6c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4f6:	f3ef 8305 	mrs	r3, IPSR
 800e4fa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e4fc:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800e4fe:	4b0e      	ldr	r3, [pc, #56]	; (800e538 <_nxe_udp_socket_receive+0x78>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4313      	orrs	r3, r2
 800e504:	2b00      	cmp	r3, #0
 800e506:	d108      	bne.n	800e51a <_nxe_udp_socket_receive+0x5a>
 800e508:	4b0c      	ldr	r3, [pc, #48]	; (800e53c <_nxe_udp_socket_receive+0x7c>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d004      	beq.n	800e51a <_nxe_udp_socket_receive+0x5a>
 800e510:	4b0a      	ldr	r3, [pc, #40]	; (800e53c <_nxe_udp_socket_receive+0x7c>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a0a      	ldr	r2, [pc, #40]	; (800e540 <_nxe_udp_socket_receive+0x80>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d101      	bne.n	800e51e <_nxe_udp_socket_receive+0x5e>
 800e51a:	2311      	movs	r3, #17
 800e51c:	e006      	b.n	800e52c <_nxe_udp_socket_receive+0x6c>

    /* Call actual UDP socket receive function.  */
    status =  _nx_udp_socket_receive(socket_ptr, packet_ptr, wait_option);
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	68b9      	ldr	r1, [r7, #8]
 800e522:	68f8      	ldr	r0, [r7, #12]
 800e524:	f7fe fe10 	bl	800d148 <_nx_udp_socket_receive>
 800e528:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e52a:	697b      	ldr	r3, [r7, #20]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3718      	adds	r7, #24
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	55445020 	.word	0x55445020
 800e538:	2000008c 	.word	0x2000008c
 800e53c:	20008198 	.word	0x20008198
 800e540:	200082e0 	.word	0x200082e0

0800e544 <_nxe_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr_ptr,
                           ULONG ip_address, UINT port)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b088      	sub	sp, #32
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	60b9      	str	r1, [r7, #8]
 800e54e:	607a      	str	r2, [r7, #4]
 800e550:	603b      	str	r3, [r7, #0]
NX_PACKET *packet_ptr;
UINT       status;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	61fb      	str	r3, [r7, #28]

    /* Check for invalid input pointers.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) ||
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00c      	beq.n	800e578 <_nxe_udp_socket_send+0x34>
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	4a37      	ldr	r2, [pc, #220]	; (800e640 <_nxe_udp_socket_send+0xfc>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d107      	bne.n	800e578 <_nxe_udp_socket_send+0x34>
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d004      	beq.n	800e578 <_nxe_udp_socket_send+0x34>
        (packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)))
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	6a1b      	ldr	r3, [r3, #32]
 800e572:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800e576:	d001      	beq.n	800e57c <_nxe_udp_socket_send+0x38>
    {

        return(NX_PTR_ERROR);
 800e578:	2307      	movs	r3, #7
 800e57a:	e05d      	b.n	800e638 <_nxe_udp_socket_send+0xf4>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <_nxe_udp_socket_send+0x48>
    {
        return(NX_NOT_ENABLED);
 800e588:	2314      	movs	r3, #20
 800e58a:	e055      	b.n	800e638 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for invalid IP address.  */
    if (ip_address == NX_NULL)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d101      	bne.n	800e596 <_nxe_udp_socket_send+0x52>
    {
        return(NX_IP_ADDRESS_ERROR);
 800e592:	2321      	movs	r3, #33	; 0x21
 800e594:	e050      	b.n	800e638 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e59c:	d301      	bcc.n	800e5a2 <_nxe_udp_socket_send+0x5e>
    {
        return(NX_INVALID_PORT);
 800e59e:	2346      	movs	r3, #70	; 0x46
 800e5a0:	e04a      	b.n	800e638 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((INT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) < (INT)(sizeof(NX_IPV4_HEADER) + sizeof(NX_UDP_HEADER)))
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	689a      	ldr	r2, [r3, #8]
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	1ad3      	subs	r3, r2, r3
 800e5ac:	2b1b      	cmp	r3, #27
 800e5ae:	dc0d      	bgt.n	800e5cc <_nxe_udp_socket_send+0x88>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e5b8:	3201      	adds	r2, #1
 800e5ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6a1b      	ldr	r3, [r3, #32]
 800e5c2:	1c5a      	adds	r2, r3, #1
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_UNDERFLOW);
 800e5c8:	2302      	movs	r3, #2
 800e5ca:	e035      	b.n	800e638 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	68da      	ldr	r2, [r3, #12]
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	695b      	ldr	r3, [r3, #20]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d90d      	bls.n	800e5f4 <_nxe_udp_socket_send+0xb0>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	68db      	ldr	r3, [r3, #12]
 800e5dc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e5e0:	3201      	adds	r2, #1
 800e5e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	6a1b      	ldr	r3, [r3, #32]
 800e5ea:	1c5a      	adds	r2, r3, #1
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_OVERFLOW);
 800e5f0:	2303      	movs	r3, #3
 800e5f2:	e021      	b.n	800e638 <_nxe_udp_socket_send+0xf4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e5f4:	f3ef 8305 	mrs	r3, IPSR
 800e5f8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e5fa:	697a      	ldr	r2, [r7, #20]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800e5fc:	4b11      	ldr	r3, [pc, #68]	; (800e644 <_nxe_udp_socket_send+0x100>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4313      	orrs	r3, r2
 800e602:	2b00      	cmp	r3, #0
 800e604:	d108      	bne.n	800e618 <_nxe_udp_socket_send+0xd4>
 800e606:	4b10      	ldr	r3, [pc, #64]	; (800e648 <_nxe_udp_socket_send+0x104>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d004      	beq.n	800e618 <_nxe_udp_socket_send+0xd4>
 800e60e:	4b0e      	ldr	r3, [pc, #56]	; (800e648 <_nxe_udp_socket_send+0x104>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4a0e      	ldr	r2, [pc, #56]	; (800e64c <_nxe_udp_socket_send+0x108>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d101      	bne.n	800e61c <_nxe_udp_socket_send+0xd8>
 800e618:	2311      	movs	r3, #17
 800e61a:	e00d      	b.n	800e638 <_nxe_udp_socket_send+0xf4>

    /* Call actual UDP socket send function.  */
    status =  _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	69f9      	ldr	r1, [r7, #28]
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	f7fe feff 	bl	800d426 <_nx_udp_socket_send>
 800e628:	61b8      	str	r0, [r7, #24]

    /* Determine if the packet send was successful.  */
    if (status == NX_SUCCESS)
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d102      	bne.n	800e636 <_nxe_udp_socket_send+0xf2>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	2200      	movs	r2, #0
 800e634:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800e636:	69bb      	ldr	r3, [r7, #24]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3720      	adds	r7, #32
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	55445020 	.word	0x55445020
 800e644:	2000008c 	.word	0x2000008c
 800e648:	20008198 	.word	0x20008198
 800e64c:	200082e0 	.word	0x200082e0

0800e650 <_nxe_udp_source_extract>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_source_extract(NX_PACKET *packet_ptr, ULONG *ip_address, UINT *port)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b086      	sub	sp, #24
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((packet_ptr == NX_NULL) || (ip_address == NX_NULL) || (port == NX_NULL))
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d005      	beq.n	800e66e <_nxe_udp_source_extract+0x1e>
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d002      	beq.n	800e66e <_nxe_udp_source_extract+0x1e>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d101      	bne.n	800e672 <_nxe_udp_source_extract+0x22>
    {

        return(NX_PTR_ERROR);
 800e66e:	2307      	movs	r3, #7
 800e670:	e01c      	b.n	800e6ac <_nxe_udp_source_extract+0x5c>
    }

    /* Check for invalid packet pointer.  */
    if (packet_ptr -> nx_packet_ip_header == NX_NULL)
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e676:	2b00      	cmp	r3, #0
 800e678:	d101      	bne.n	800e67e <_nxe_udp_source_extract+0x2e>
    {

        return(NX_INVALID_PACKET);
 800e67a:	2312      	movs	r3, #18
 800e67c:	e016      	b.n	800e6ac <_nxe_udp_source_extract+0x5c>
    }


    if (packet_ptr -> nx_packet_ip_version != NX_IP_VERSION_V4)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e684:	2b04      	cmp	r3, #4
 800e686:	d001      	beq.n	800e68c <_nxe_udp_source_extract+0x3c>
    {

        return(NX_INVALID_PACKET);
 800e688:	2312      	movs	r3, #18
 800e68a:	e00f      	b.n	800e6ac <_nxe_udp_source_extract+0x5c>
    }

    /* Check to see if the packet has enough room in front for backing up.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) <
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	689a      	ldr	r2, [r3, #8]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	691b      	ldr	r3, [r3, #16]
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	2b1b      	cmp	r3, #27
 800e698:	d801      	bhi.n	800e69e <_nxe_udp_source_extract+0x4e>
        (sizeof(NX_UDP_HEADER) + sizeof(NX_IPV4_HEADER)))
    {

        return(NX_INVALID_PACKET);
 800e69a:	2312      	movs	r3, #18
 800e69c:	e006      	b.n	800e6ac <_nxe_udp_source_extract+0x5c>
    }

    /* Call actual UDP source extract function.  */
    status =  _nx_udp_source_extract(packet_ptr, ip_address, port);
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	68b9      	ldr	r1, [r7, #8]
 800e6a2:	68f8      	ldr	r0, [r7, #12]
 800e6a4:	f7ff f862 	bl	800d76c <_nx_udp_source_extract>
 800e6a8:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e6aa:	697b      	ldr	r3, [r7, #20]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b096      	sub	sp, #88	; 0x58
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
 800e6c0:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	3303      	adds	r3, #3
 800e6c6:	f023 0303 	bic.w	r3, r3, #3
 800e6ca:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e6cc:	f3ef 8310 	mrs	r3, PRIMASK
 800e6d0:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800e6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800e6d4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800e6d6:	b672      	cpsid	i
    return(int_posture);
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800e6da:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800e6dc:	4b55      	ldr	r3, [pc, #340]	; (800e834 <_tx_byte_allocate+0x180>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6ea:	621a      	str	r2, [r3, #32]
 800e6ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6ee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f2:	f383 8810 	msr	PRIMASK, r3
}
 800e6f6:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800e6f8:	6879      	ldr	r1, [r7, #4]
 800e6fa:	68f8      	ldr	r0, [r7, #12]
 800e6fc:	f000 f9b2 	bl	800ea64 <_tx_byte_pool_search>
 800e700:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e702:	f3ef 8310 	mrs	r3, PRIMASK
 800e706:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e70a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e70c:	b672      	cpsid	i
    return(int_posture);
 800e70e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800e710:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800e712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e714:	2b00      	cmp	r3, #0
 800e716:	d002      	beq.n	800e71e <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800e718:	2301      	movs	r3, #1
 800e71a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e71c:	e006      	b.n	800e72c <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6a1b      	ldr	r3, [r3, #32]
 800e722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e724:	429a      	cmp	r2, r3
 800e726:	d101      	bne.n	800e72c <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800e728:	2301      	movs	r3, #1
 800e72a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800e72c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d0d9      	beq.n	800e6e6 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e736:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800e738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d008      	beq.n	800e750 <_tx_byte_allocate+0x9c>
 800e73e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e740:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e742:	6a3b      	ldr	r3, [r7, #32]
 800e744:	f383 8810 	msr	PRIMASK, r3
}
 800e748:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800e74a:	2300      	movs	r3, #0
 800e74c:	653b      	str	r3, [r7, #80]	; 0x50
 800e74e:	e06c      	b.n	800e82a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d061      	beq.n	800e81a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800e756:	4b38      	ldr	r3, [pc, #224]	; (800e838 <_tx_byte_allocate+0x184>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d007      	beq.n	800e76e <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800e75e:	2310      	movs	r3, #16
 800e760:	653b      	str	r3, [r7, #80]	; 0x50
 800e762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e764:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	f383 8810 	msr	PRIMASK, r3
}
 800e76c:	e05d      	b.n	800e82a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800e76e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e770:	4a32      	ldr	r2, [pc, #200]	; (800e83c <_tx_byte_allocate+0x188>)
 800e772:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800e774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e776:	68fa      	ldr	r2, [r7, #12]
 800e778:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800e77a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e77c:	68ba      	ldr	r2, [r7, #8]
 800e77e:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800e780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800e786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e788:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e78c:	1c5a      	adds	r2, r3, #1
 800e78e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e790:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e798:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e79e:	1c5a      	adds	r2, r3, #1
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800e7a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d109      	bne.n	800e7be <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7ae:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800e7b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7b4:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800e7b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7ba:	675a      	str	r2, [r3, #116]	; 0x74
 800e7bc:	e011      	b.n	800e7e2 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800e7c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7c8:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800e7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7ce:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800e7d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7d4:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7da:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800e7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7e0:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800e7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7e4:	2209      	movs	r2, #9
 800e7e6:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e7e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800e7ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7f0:	683a      	ldr	r2, [r7, #0]
 800e7f2:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800e7f4:	4b10      	ldr	r3, [pc, #64]	; (800e838 <_tx_byte_allocate+0x184>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	4a0f      	ldr	r2, [pc, #60]	; (800e838 <_tx_byte_allocate+0x184>)
 800e7fc:	6013      	str	r3, [r2, #0]
 800e7fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e800:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e802:	69bb      	ldr	r3, [r7, #24]
 800e804:	f383 8810 	msr	PRIMASK, r3
}
 800e808:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e80a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e80c:	f002 fbe2 	bl	8010fd4 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800e810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e816:	653b      	str	r3, [r7, #80]	; 0x50
 800e818:	e007      	b.n	800e82a <_tx_byte_allocate+0x176>
 800e81a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e81c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	f383 8810 	msr	PRIMASK, r3
}
 800e824:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800e826:	2310      	movs	r3, #16
 800e828:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800e82a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3758      	adds	r7, #88	; 0x58
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	20008198 	.word	0x20008198
 800e838:	20008230 	.word	0x20008230
 800e83c:	0800e841 	.word	0x0800e841

0800e840 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b08e      	sub	sp, #56	; 0x38
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e84a:	f3ef 8310 	mrs	r3, PRIMASK
 800e84e:	623b      	str	r3, [r7, #32]
    return(posture);
 800e850:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e852:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e854:	b672      	cpsid	i
    return(int_posture);
 800e856:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800e858:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e85e:	4a33      	ldr	r2, [pc, #204]	; (800e92c <_tx_byte_pool_cleanup+0xec>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d158      	bne.n	800e916 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e86a:	683a      	ldr	r2, [r7, #0]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d152      	bne.n	800e916 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e874:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800e876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d04c      	beq.n	800e916 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800e87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a2b      	ldr	r2, [pc, #172]	; (800e930 <_tx_byte_pool_cleanup+0xf0>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d147      	bne.n	800e916 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800e886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d043      	beq.n	800e916 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800e894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e898:	1e5a      	subs	r2, r3, #1
 800e89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89c:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800e89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8a2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800e8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d103      	bne.n	800e8b2 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800e8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	625a      	str	r2, [r3, #36]	; 0x24
 800e8b0:	e013      	b.n	800e8da <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8b6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8bc:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8c2:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8c8:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800e8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d102      	bne.n	800e8da <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800e8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8d8:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8de:	2b09      	cmp	r3, #9
 800e8e0:	d119      	bne.n	800e916 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2210      	movs	r2, #16
 800e8e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800e8ea:	4b12      	ldr	r3, [pc, #72]	; (800e934 <_tx_byte_pool_cleanup+0xf4>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	4a10      	ldr	r2, [pc, #64]	; (800e934 <_tx_byte_pool_cleanup+0xf4>)
 800e8f2:	6013      	str	r3, [r2, #0]
 800e8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	f383 8810 	msr	PRIMASK, r3
}
 800e8fe:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f002 fa67 	bl	8010dd4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e906:	f3ef 8310 	mrs	r3, PRIMASK
 800e90a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e90c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e90e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e910:	b672      	cpsid	i
    return(int_posture);
 800e912:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800e914:	637b      	str	r3, [r7, #52]	; 0x34
 800e916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e918:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f383 8810 	msr	PRIMASK, r3
}
 800e920:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800e922:	bf00      	nop
 800e924:	3738      	adds	r7, #56	; 0x38
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	0800e841 	.word	0x0800e841
 800e930:	42595445 	.word	0x42595445
 800e934:	20008230 	.word	0x20008230

0800e938 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b08e      	sub	sp, #56	; 0x38
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	60f8      	str	r0, [r7, #12]
 800e940:	60b9      	str	r1, [r7, #8]
 800e942:	607a      	str	r2, [r7, #4]
 800e944:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800e946:	2234      	movs	r2, #52	; 0x34
 800e948:	2100      	movs	r1, #0
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f004 faa8 	bl	8012ea0 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	f023 0303 	bic.w	r3, r3, #3
 800e956:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	68ba      	ldr	r2, [r7, #8]
 800e95c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	683a      	ldr	r2, [r7, #0]
 800e968:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	687a      	ldr	r2, [r7, #4]
 800e974:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	f1a3 0208 	sub.w	r2, r3, #8
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2202      	movs	r2, #2
 800e984:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800e98a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	4413      	add	r3, r2
 800e990:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800e992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e994:	3b04      	subs	r3, #4
 800e996:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800e99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e99e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800e9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9a4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800e9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9a8:	3b04      	subs	r3, #4
 800e9aa:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800e9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800e9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800e9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9c2:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800e9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ca:	3304      	adds	r3, #4
 800e9cc:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800e9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9d0:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800e9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d4:	4a1f      	ldr	r2, [pc, #124]	; (800ea54 <_tx_byte_pool_create+0x11c>)
 800e9d6:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e9de:	f3ef 8310 	mrs	r3, PRIMASK
 800e9e2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e9e4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e9e6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e9e8:	b672      	cpsid	i
    return(int_posture);
 800e9ea:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800e9ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	4a19      	ldr	r2, [pc, #100]	; (800ea58 <_tx_byte_pool_create+0x120>)
 800e9f2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800e9f4:	4b19      	ldr	r3, [pc, #100]	; (800ea5c <_tx_byte_pool_create+0x124>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d109      	bne.n	800ea10 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800e9fc:	4a18      	ldr	r2, [pc, #96]	; (800ea60 <_tx_byte_pool_create+0x128>)
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	631a      	str	r2, [r3, #48]	; 0x30
 800ea0e:	e011      	b.n	800ea34 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800ea10:	4b13      	ldr	r3, [pc, #76]	; (800ea60 <_tx_byte_pool_create+0x128>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800ea16:	6a3b      	ldr	r3, [r7, #32]
 800ea18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea1a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800ea1c:	6a3b      	ldr	r3, [r7, #32]
 800ea1e:	68fa      	ldr	r2, [r7, #12]
 800ea20:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	69fa      	ldr	r2, [r7, #28]
 800ea2c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	6a3a      	ldr	r2, [r7, #32]
 800ea32:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800ea34:	4b09      	ldr	r3, [pc, #36]	; (800ea5c <_tx_byte_pool_create+0x124>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	4a08      	ldr	r2, [pc, #32]	; (800ea5c <_tx_byte_pool_create+0x124>)
 800ea3c:	6013      	str	r3, [r2, #0]
 800ea3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea40:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	f383 8810 	msr	PRIMASK, r3
}
 800ea48:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ea4a:	2300      	movs	r3, #0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3738      	adds	r7, #56	; 0x38
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	ffffeeee 	.word	0xffffeeee
 800ea58:	42595445 	.word	0x42595445
 800ea5c:	2000818c 	.word	0x2000818c
 800ea60:	20008188 	.word	0x20008188

0800ea64 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b097      	sub	sp, #92	; 0x5c
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ea72:	f3ef 8310 	mrs	r3, PRIMASK
 800ea76:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800ea78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800ea7a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ea7c:	b672      	cpsid	i
    return(int_posture);
 800ea7e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800ea80:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	689a      	ldr	r2, [r3, #8]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	3b02      	subs	r3, #2
 800ea8c:	00db      	lsls	r3, r3, #3
 800ea8e:	4413      	add	r3, r2
 800ea90:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d308      	bcc.n	800eaac <_tx_byte_pool_search+0x48>
 800ea9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea9c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	f383 8810 	msr	PRIMASK, r3
}
 800eaa4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	653b      	str	r3, [r7, #80]	; 0x50
 800eaaa:	e0dd      	b.n	800ec68 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800eaac:	4b72      	ldr	r3, [pc, #456]	; (800ec78 <_tx_byte_pool_search+0x214>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eab6:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	695b      	ldr	r3, [r3, #20]
 800eabc:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	68db      	ldr	r3, [r3, #12]
 800eac2:	3301      	adds	r3, #1
 800eac4:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800eac6:	2300      	movs	r3, #0
 800eac8:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800eaca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eacc:	3304      	adds	r3, #4
 800eace:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ead0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead2:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800ead4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a68      	ldr	r2, [pc, #416]	; (800ec7c <_tx_byte_pool_search+0x218>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d143      	bne.n	800eb66 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800eade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d104      	bne.n	800eaee <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eae8:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800eaea:	2301      	movs	r3, #1
 800eaec:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800eaee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaf0:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800eaf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800eb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb02:	3b08      	subs	r3, #8
 800eb04:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800eb06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d257      	bcs.n	800ebbe <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800eb0e:	2300      	movs	r3, #0
 800eb10:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800eb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb14:	3304      	adds	r3, #4
 800eb16:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800eb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb1a:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800eb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4a56      	ldr	r2, [pc, #344]	; (800ec7c <_tx_byte_pool_search+0x218>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d113      	bne.n	800eb4e <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800eb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb28:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800eb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb30:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	68db      	ldr	r3, [r3, #12]
 800eb36:	1e5a      	subs	r2, r3, #1
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	695b      	ldr	r3, [r3, #20]
 800eb40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d114      	bne.n	800eb70 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb4a:	615a      	str	r2, [r3, #20]
 800eb4c:	e010      	b.n	800eb70 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800eb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb50:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800eb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800eb58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d008      	beq.n	800eb70 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800eb5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb60:	3b01      	subs	r3, #1
 800eb62:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb64:	e004      	b.n	800eb70 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800eb66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb68:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800eb70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d002      	beq.n	800eb7c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800eb76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb7e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	f383 8810 	msr	PRIMASK, r3
}
 800eb86:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eb88:	f3ef 8310 	mrs	r3, PRIMASK
 800eb8c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800eb8e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800eb90:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eb92:	b672      	cpsid	i
    return(int_posture);
 800eb94:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800eb96:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a1b      	ldr	r3, [r3, #32]
 800eb9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d009      	beq.n	800ebb6 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	695b      	ldr	r3, [r3, #20]
 800eba6:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	3301      	adds	r3, #1
 800ebae:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebb4:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800ebb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d186      	bne.n	800eaca <_tx_byte_pool_search+0x66>
 800ebbc:	e000      	b.n	800ebc0 <_tx_byte_pool_search+0x15c>
                    break;
 800ebbe:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800ebc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d048      	beq.n	800ec58 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800ebc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	1ad3      	subs	r3, r2, r3
 800ebcc:	2b13      	cmp	r3, #19
 800ebce:	d91e      	bls.n	800ec0e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	3308      	adds	r3, #8
 800ebd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ebd6:	4413      	add	r3, r2
 800ebd8:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ebda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebdc:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ebde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebe0:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800ebe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe8:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ebea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebec:	3304      	adds	r3, #4
 800ebee:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ebf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf2:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800ebf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf6:	4a21      	ldr	r2, [pc, #132]	; (800ec7c <_tx_byte_pool_search+0x218>)
 800ebf8:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	1c5a      	adds	r2, r3, #1
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800ec04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec08:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ec0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec10:	3304      	adds	r3, #4
 800ec12:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800ec14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec16:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ec18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	689a      	ldr	r2, [r3, #8]
 800ec22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec24:	1ad3      	subs	r3, r2, r3
 800ec26:	f1a3 0208 	sub.w	r2, r3, #8
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	695b      	ldr	r3, [r3, #20]
 800ec32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d105      	bne.n	800ec44 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ec38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec3a:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800ec3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	615a      	str	r2, [r3, #20]
 800ec44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec46:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f383 8810 	msr	PRIMASK, r3
}
 800ec4e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800ec50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec52:	3308      	adds	r3, #8
 800ec54:	653b      	str	r3, [r7, #80]	; 0x50
 800ec56:	e007      	b.n	800ec68 <_tx_byte_pool_search+0x204>
 800ec58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec5a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	f383 8810 	msr	PRIMASK, r3
}
 800ec62:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800ec64:	2300      	movs	r3, #0
 800ec66:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800ec68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	375c      	adds	r7, #92	; 0x5c
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop
 800ec78:	20008198 	.word	0x20008198
 800ec7c:	ffffeeee 	.word	0xffffeeee

0800ec80 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b08e      	sub	sp, #56	; 0x38
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ec8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ec8e:	61fb      	str	r3, [r7, #28]
    return(posture);
 800ec90:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800ec92:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ec94:	b672      	cpsid	i
    return(int_posture);
 800ec96:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800ec98:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec9e:	4a38      	ldr	r2, [pc, #224]	; (800ed80 <_tx_event_flags_cleanup+0x100>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d162      	bne.n	800ed6a <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ecaa:	683a      	ldr	r2, [r7, #0]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d15c      	bne.n	800ed6a <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecb4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800ecb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d056      	beq.n	800ed6a <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a30      	ldr	r2, [pc, #192]	; (800ed84 <_tx_event_flags_cleanup+0x104>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d151      	bne.n	800ed6a <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800ecc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc8:	695b      	ldr	r3, [r3, #20]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d04d      	beq.n	800ed6a <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd6:	695b      	ldr	r3, [r3, #20]
 800ecd8:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800ecda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecdc:	691b      	ldr	r3, [r3, #16]
 800ecde:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800ece0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d020      	beq.n	800ed28 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800ece6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece8:	3b01      	subs	r3, #1
 800ecea:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800ecec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecf0:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d103      	bne.n	800ed00 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800ecf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	611a      	str	r2, [r3, #16]
 800ecfe:	e016      	b.n	800ed2e <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed04:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed0a:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800ed0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0e:	6a3a      	ldr	r2, [r7, #32]
 800ed10:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed16:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800ed18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d106      	bne.n	800ed2e <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800ed20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed24:	611a      	str	r2, [r3, #16]
 800ed26:	e002      	b.n	800ed2e <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800ed28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed32:	2b07      	cmp	r3, #7
 800ed34:	d119      	bne.n	800ed6a <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2207      	movs	r2, #7
 800ed3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ed3e:	4b12      	ldr	r3, [pc, #72]	; (800ed88 <_tx_event_flags_cleanup+0x108>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	3301      	adds	r3, #1
 800ed44:	4a10      	ldr	r2, [pc, #64]	; (800ed88 <_tx_event_flags_cleanup+0x108>)
 800ed46:	6013      	str	r3, [r2, #0]
 800ed48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed4a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f383 8810 	msr	PRIMASK, r3
}
 800ed52:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f002 f83d 	bl	8010dd4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ed5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ed5e:	617b      	str	r3, [r7, #20]
    return(posture);
 800ed60:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ed62:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ed64:	b672      	cpsid	i
    return(int_posture);
 800ed66:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ed68:	637b      	str	r3, [r7, #52]	; 0x34
 800ed6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed6c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	f383 8810 	msr	PRIMASK, r3
}
 800ed74:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ed76:	bf00      	nop
 800ed78:	3738      	adds	r7, #56	; 0x38
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	0800ec81 	.word	0x0800ec81
 800ed84:	4456444e 	.word	0x4456444e
 800ed88:	20008230 	.word	0x20008230

0800ed8c <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b088      	sub	sp, #32
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800ed96:	2224      	movs	r2, #36	; 0x24
 800ed98:	2100      	movs	r1, #0
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f004 f880 	bl	8012ea0 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	683a      	ldr	r2, [r7, #0]
 800eda4:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eda6:	f3ef 8310 	mrs	r3, PRIMASK
 800edaa:	613b      	str	r3, [r7, #16]
    return(posture);
 800edac:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800edae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800edb0:	b672      	cpsid	i
    return(int_posture);
 800edb2:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800edb4:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	4a18      	ldr	r2, [pc, #96]	; (800ee1c <_tx_event_flags_create+0x90>)
 800edba:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800edbc:	4b18      	ldr	r3, [pc, #96]	; (800ee20 <_tx_event_flags_create+0x94>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d109      	bne.n	800edd8 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800edc4:	4a17      	ldr	r2, [pc, #92]	; (800ee24 <_tx_event_flags_create+0x98>)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	61da      	str	r2, [r3, #28]
 800edd6:	e011      	b.n	800edfc <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800edd8:	4b12      	ldr	r3, [pc, #72]	; (800ee24 <_tx_event_flags_create+0x98>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800edde:	69bb      	ldr	r3, [r7, #24]
 800ede0:	69db      	ldr	r3, [r3, #28]
 800ede2:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	697a      	ldr	r2, [r7, #20]
 800edf4:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	69ba      	ldr	r2, [r7, #24]
 800edfa:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800edfc:	4b08      	ldr	r3, [pc, #32]	; (800ee20 <_tx_event_flags_create+0x94>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	3301      	adds	r3, #1
 800ee02:	4a07      	ldr	r2, [pc, #28]	; (800ee20 <_tx_event_flags_create+0x94>)
 800ee04:	6013      	str	r3, [r2, #0]
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	f383 8810 	msr	PRIMASK, r3
}
 800ee10:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ee12:	2300      	movs	r3, #0
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3720      	adds	r7, #32
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	4456444e 	.word	0x4456444e
 800ee20:	20008174 	.word	0x20008174
 800ee24:	20008170 	.word	0x20008170

0800ee28 <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b096      	sub	sp, #88	; 0x58
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	607a      	str	r2, [r7, #4]
 800ee34:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ee36:	f3ef 8310 	mrs	r3, PRIMASK
 800ee3a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800ee3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800ee3e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ee40:	b672      	cpsid	i
    return(int_posture);
 800ee42:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 800ee44:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	689b      	ldr	r3, [r3, #8]
 800ee4a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f003 0302 	and.w	r3, r3, #2
 800ee52:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6a1b      	ldr	r3, [r3, #32]
 800ee58:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800ee5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d004      	beq.n	800ee6a <_tx_event_flags_get+0x42>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800ee60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee62:	43db      	mvns	r3, r3
 800ee64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee66:	4013      	ands	r3, r2
 800ee68:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800ee6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee6c:	2b02      	cmp	r3, #2
 800ee6e:	d10a      	bne.n	800ee86 <_tx_event_flags_get+0x5e>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800ee70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	4013      	ands	r3, r2
 800ee76:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800ee78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d006      	beq.n	800ee8e <_tx_event_flags_get+0x66>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800ee80:	2300      	movs	r3, #0
 800ee82:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee84:	e003      	b.n	800ee8e <_tx_event_flags_get+0x66>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800ee86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	4013      	ands	r3, r2
 800ee8c:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800ee8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d029      	beq.n	800eee8 <_tx_event_flags_get+0xc0>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee98:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f003 0301 	and.w	r3, r3, #1
 800eea0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800eea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d11c      	bne.n	800eee2 <_tx_event_flags_get+0xba>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	695b      	ldr	r3, [r3, #20]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d005      	beq.n	800eec0 <_tx_event_flags_get+0x98>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	691b      	ldr	r3, [r3, #16]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d101      	bne.n	800eec0 <_tx_event_flags_get+0x98>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 800eebc:	2301      	movs	r3, #1
 800eebe:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800eec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d106      	bne.n	800eed4 <_tx_event_flags_get+0xac>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6a1a      	ldr	r2, [r3, #32]
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	621a      	str	r2, [r3, #32]
 800eed2:	e006      	b.n	800eee2 <_tx_event_flags_get+0xba>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	689a      	ldr	r2, [r3, #8]
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	43db      	mvns	r3, r3
 800eedc:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800eee2:	2300      	movs	r3, #0
 800eee4:	653b      	str	r3, [r7, #80]	; 0x50
 800eee6:	e070      	b.n	800efca <_tx_event_flags_get+0x1a2>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800eee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d06b      	beq.n	800efc6 <_tx_event_flags_get+0x19e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800eeee:	4b3c      	ldr	r3, [pc, #240]	; (800efe0 <_tx_event_flags_get+0x1b8>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d002      	beq.n	800eefc <_tx_event_flags_get+0xd4>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 800eef6:	2307      	movs	r3, #7
 800eef8:	653b      	str	r3, [r7, #80]	; 0x50
 800eefa:	e066      	b.n	800efca <_tx_event_flags_get+0x1a2>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800eefc:	4b39      	ldr	r3, [pc, #228]	; (800efe4 <_tx_event_flags_get+0x1bc>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800ef02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef04:	4a38      	ldr	r2, [pc, #224]	; (800efe8 <_tx_event_flags_get+0x1c0>)
 800ef06:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800ef08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800ef0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800ef16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef18:	683a      	ldr	r2, [r7, #0]
 800ef1a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800ef1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800ef22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ef28:	1c5a      	adds	r2, r3, #1
 800ef2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	695b      	ldr	r3, [r3, #20]
 800ef34:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ef36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d109      	bne.n	800ef50 <_tx_event_flags_get+0x128>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef40:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800ef42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef46:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800ef48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef4c:	675a      	str	r2, [r3, #116]	; 0x74
 800ef4e:	e011      	b.n	800ef74 <_tx_event_flags_get+0x14c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	691b      	ldr	r3, [r3, #16]
 800ef54:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ef56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef5a:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ef5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef60:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ef62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef66:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ef68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef6c:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef72:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	695b      	ldr	r3, [r3, #20]
 800ef78:	1c5a      	adds	r2, r3, #1
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800ef7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef80:	2207      	movs	r2, #7
 800ef82:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ef84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef86:	2201      	movs	r2, #1
 800ef88:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ef8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef8e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800ef90:	4b13      	ldr	r3, [pc, #76]	; (800efe0 <_tx_event_flags_get+0x1b8>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	3301      	adds	r3, #1
 800ef96:	4a12      	ldr	r2, [pc, #72]	; (800efe0 <_tx_event_flags_get+0x1b8>)
 800ef98:	6013      	str	r3, [r2, #0]
 800ef9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef9c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	f383 8810 	msr	PRIMASK, r3
}
 800efa4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800efa6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efa8:	f002 f814 	bl	8010fd4 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800efac:	f3ef 8310 	mrs	r3, PRIMASK
 800efb0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800efb2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800efb4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800efb6:	b672      	cpsid	i
    return(int_posture);
 800efb8:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800efba:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800efbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efc2:	653b      	str	r3, [r7, #80]	; 0x50
 800efc4:	e001      	b.n	800efca <_tx_event_flags_get+0x1a2>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800efc6:	2307      	movs	r3, #7
 800efc8:	653b      	str	r3, [r7, #80]	; 0x50
 800efca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efcc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	f383 8810 	msr	PRIMASK, r3
}
 800efd4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800efd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3758      	adds	r7, #88	; 0x58
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	20008230 	.word	0x20008230
 800efe4:	20008198 	.word	0x20008198
 800efe8:	0800ec81 	.word	0x0800ec81

0800efec <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b0a6      	sub	sp, #152	; 0x98
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eff8:	f3ef 8310 	mrs	r3, PRIMASK
 800effc:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800effe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800f000:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800f002:	b672      	cpsid	i
    return(int_posture);
 800f004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800f006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f003 0302 	and.w	r3, r3, #2
 800f010:	2b00      	cmp	r3, #0
 800f012:	d023      	beq.n	800f05c <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800f014:	2300      	movs	r3, #0
 800f016:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	695b      	ldr	r3, [r3, #20]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d005      	beq.n	800f02c <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d101      	bne.n	800f02c <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800f028:	2301      	movs	r3, #1
 800f02a:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800f02c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d107      	bne.n	800f042 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	6a1a      	ldr	r2, [r3, #32]
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	43db      	mvns	r3, r3
 800f03a:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	621a      	str	r2, [r3, #32]
 800f040:	e005      	b.n	800f04e <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	689a      	ldr	r2, [r3, #8]
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	609a      	str	r2, [r3, #8]
 800f04e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f052:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f056:	f383 8810 	msr	PRIMASK, r3
}
 800f05a:	e1d4      	b.n	800f406 <_tx_event_flags_set+0x41a>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	689a      	ldr	r2, [r3, #8]
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6a1b      	ldr	r3, [r3, #32]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d006      	beq.n	800f07e <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6a1a      	ldr	r2, [r3, #32]
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	43db      	mvns	r3, r3
 800f078:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800f07e:	2300      	movs	r3, #0
 800f080:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	695b      	ldr	r3, [r3, #20]
 800f086:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	f000 81a6 	beq.w	800f3e0 <_tx_event_flags_set+0x3f4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800f094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d169      	bne.n	800f170 <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	691b      	ldr	r3, [r3, #16]
 800f0a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	689b      	ldr	r3, [r3, #8]
 800f0a8:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800f0aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0b0:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800f0b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0ba:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800f0bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0be:	f003 0302 	and.w	r3, r3, #2
 800f0c2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800f0c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0c6:	2b02      	cmp	r3, #2
 800f0c8:	d10a      	bne.n	800f0e0 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800f0ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f0cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0ce:	4013      	ands	r3, r2
 800f0d0:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800f0d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f0d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d006      	beq.n	800f0e8 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800f0da:	2300      	movs	r3, #0
 800f0dc:	67bb      	str	r3, [r7, #120]	; 0x78
 800f0de:	e003      	b.n	800f0e8 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800f0e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f0e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0e4:	4013      	ands	r3, r2
 800f0e6:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800f0e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	f000 817f 	beq.w	800f3ee <_tx_event_flags_set+0x402>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800f0f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0fa:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 800f0fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f100:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800f102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f104:	f003 0301 	and.w	r3, r3, #1
 800f108:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800f10a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d106      	bne.n	800f11e <_tx_event_flags_set+0x132>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	689a      	ldr	r2, [r3, #8]
 800f114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f116:	43db      	mvns	r3, r3
 800f118:	401a      	ands	r2, r3
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2200      	movs	r2, #0
 800f122:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2200      	movs	r2, #0
 800f128:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f12a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f12e:	2200      	movs	r2, #0
 800f130:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800f132:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f136:	2200      	movs	r2, #0
 800f138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800f13c:	4ba7      	ldr	r3, [pc, #668]	; (800f3dc <_tx_event_flags_set+0x3f0>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	3301      	adds	r3, #1
 800f142:	4aa6      	ldr	r2, [pc, #664]	; (800f3dc <_tx_event_flags_set+0x3f0>)
 800f144:	6013      	str	r3, [r2, #0]
 800f146:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f14a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14e:	f383 8810 	msr	PRIMASK, r3
}
 800f152:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800f154:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800f158:	f001 fe3c 	bl	8010dd4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f15c:	f3ef 8310 	mrs	r3, PRIMASK
 800f160:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800f162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800f164:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800f166:	b672      	cpsid	i
    return(int_posture);
 800f168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800f16a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f16e:	e13e      	b.n	800f3ee <_tx_event_flags_set+0x402>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	691b      	ldr	r3, [r3, #16]
 800f174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 800f178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f17c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2200      	movs	r2, #0
 800f184:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800f186:	2300      	movs	r3, #0
 800f188:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 800f18c:	2300      	movs	r3, #0
 800f18e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	689b      	ldr	r3, [r3, #8]
 800f196:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800f198:	4b90      	ldr	r3, [pc, #576]	; (800f3dc <_tx_event_flags_set+0x3f0>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	3301      	adds	r3, #1
 800f19e:	4a8f      	ldr	r2, [pc, #572]	; (800f3dc <_tx_event_flags_set+0x3f0>)
 800f1a0:	6013      	str	r3, [r2, #0]
 800f1a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1aa:	f383 8810 	msr	PRIMASK, r3
}
 800f1ae:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f1b0:	f3ef 8310 	mrs	r3, PRIMASK
 800f1b4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800f1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800f1b8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800f1ba:	b672      	cpsid	i
    return(int_posture);
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800f1be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	68db      	ldr	r3, [r3, #12]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00f      	beq.n	800f1ea <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800f1d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f1d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	695b      	ldr	r3, [r3, #20]
 800f1dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800f1ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1f0:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800f1f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1f8:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800f1fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f202:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800f204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f206:	f003 0302 	and.w	r3, r3, #2
 800f20a:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800f20c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f20e:	2b02      	cmp	r3, #2
 800f210:	d10a      	bne.n	800f228 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800f212:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f216:	4013      	ands	r3, r2
 800f218:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800f21a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f21c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f21e:	429a      	cmp	r2, r3
 800f220:	d006      	beq.n	800f230 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800f222:	2300      	movs	r3, #0
 800f224:	67bb      	str	r3, [r7, #120]	; 0x78
 800f226:	e003      	b.n	800f230 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800f228:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f22a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f22c:	4013      	ands	r3, r2
 800f22e:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800f230:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f236:	2b07      	cmp	r3, #7
 800f238:	d001      	beq.n	800f23e <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800f23a:	2301      	movs	r3, #1
 800f23c:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800f23e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f240:	2b00      	cmp	r3, #0
 800f242:	d06b      	beq.n	800f31c <_tx_event_flags_set+0x330>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 800f244:	2301      	movs	r3, #1
 800f246:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800f248:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f24e:	2b07      	cmp	r3, #7
 800f250:	d11d      	bne.n	800f28e <_tx_event_flags_set+0x2a2>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800f252:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f258:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 800f25a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f25c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f25e:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800f260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f262:	f003 0301 	and.w	r3, r3, #1
 800f266:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800f268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d106      	bne.n	800f27c <_tx_event_flags_set+0x290>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	689a      	ldr	r2, [r3, #8]
 800f272:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f274:	43db      	mvns	r3, r3
 800f276:	401a      	ands	r2, r3
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f27c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f280:	2200      	movs	r2, #0
 800f282:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800f284:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f288:	2200      	movs	r2, #0
 800f28a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800f28e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f294:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f298:	429a      	cmp	r2, r3
 800f29a:	d103      	bne.n	800f2a4 <_tx_event_flags_set+0x2b8>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800f29c:	2300      	movs	r3, #0
 800f29e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f2a2:	e018      	b.n	800f2d6 <_tx_event_flags_set+0x2ea>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800f2a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2aa:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800f2ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f2b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2b2:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800f2b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f2b8:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800f2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f2be:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800f2c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f2c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d104      	bne.n	800f2d6 <_tx_event_flags_set+0x2ea>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800f2cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f2d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	695b      	ldr	r3, [r3, #20]
 800f2da:	1e5a      	subs	r2, r3, #1
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800f2e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d10c      	bne.n	800f302 <_tx_event_flags_set+0x316>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800f2e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f2ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 800f2f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f2f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800f2f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	671a      	str	r2, [r3, #112]	; 0x70
 800f300:	e00c      	b.n	800f31c <_tx_event_flags_set+0x330>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800f302:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f306:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f30a:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800f30c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f310:	2200      	movs	r2, #0
 800f312:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800f314:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800f31c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f31e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800f322:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f326:	3b01      	subs	r3, #1
 800f328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800f32c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f330:	2b00      	cmp	r3, #0
 800f332:	f47f af36 	bne.w	800f1a2 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f33c:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	6a1b      	ldr	r3, [r3, #32]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d00a      	beq.n	800f35c <_tx_event_flags_set+0x370>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	689a      	ldr	r2, [r3, #8]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	6a1b      	ldr	r3, [r3, #32]
 800f34e:	43db      	mvns	r3, r3
 800f350:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2200      	movs	r2, #0
 800f35a:	621a      	str	r2, [r3, #32]
 800f35c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f360:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f364:	f383 8810 	msr	PRIMASK, r3
}
 800f368:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800f36a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f36e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800f372:	e01f      	b.n	800f3b4 <_tx_event_flags_set+0x3c8>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800f374:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f37a:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f37c:	f3ef 8310 	mrs	r3, PRIMASK
 800f380:	623b      	str	r3, [r7, #32]
    return(posture);
 800f382:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f384:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f386:	b672      	cpsid	i
    return(int_posture);
 800f388:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800f38a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800f38e:	4b13      	ldr	r3, [pc, #76]	; (800f3dc <_tx_event_flags_set+0x3f0>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	3301      	adds	r3, #1
 800f394:	4a11      	ldr	r2, [pc, #68]	; (800f3dc <_tx_event_flags_set+0x3f0>)
 800f396:	6013      	str	r3, [r2, #0]
 800f398:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f39c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a0:	f383 8810 	msr	PRIMASK, r3
}
 800f3a4:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800f3a6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800f3aa:	f001 fd13 	bl	8010dd4 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800f3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f3b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800f3b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d1db      	bne.n	800f374 <_tx_event_flags_set+0x388>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f3bc:	f3ef 8310 	mrs	r3, PRIMASK
 800f3c0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f3c2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f3c4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f3c6:	b672      	cpsid	i
    return(int_posture);
 800f3c8:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800f3ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800f3ce:	4b03      	ldr	r3, [pc, #12]	; (800f3dc <_tx_event_flags_set+0x3f0>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	3b01      	subs	r3, #1
 800f3d4:	4a01      	ldr	r2, [pc, #4]	; (800f3dc <_tx_event_flags_set+0x3f0>)
 800f3d6:	6013      	str	r3, [r2, #0]
 800f3d8:	e009      	b.n	800f3ee <_tx_event_flags_set+0x402>
 800f3da:	bf00      	nop
 800f3dc:	20008230 	.word	0x20008230
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	695b      	ldr	r3, [r3, #20]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d002      	beq.n	800f3ee <_tx_event_flags_set+0x402>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	60da      	str	r2, [r3, #12]
 800f3ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3f2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	f383 8810 	msr	PRIMASK, r3
}
 800f3fa:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800f3fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d101      	bne.n	800f406 <_tx_event_flags_set+0x41a>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800f402:	f001 fcad 	bl	8010d60 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3798      	adds	r7, #152	; 0x98
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800f414:	f001 f9f2 	bl	80107fc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800f418:	f002 f926 	bl	8011668 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800f41c:	4b12      	ldr	r3, [pc, #72]	; (800f468 <_tx_initialize_high_level+0x58>)
 800f41e:	2200      	movs	r2, #0
 800f420:	601a      	str	r2, [r3, #0]
 800f422:	4b12      	ldr	r3, [pc, #72]	; (800f46c <_tx_initialize_high_level+0x5c>)
 800f424:	2200      	movs	r2, #0
 800f426:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800f428:	4b11      	ldr	r3, [pc, #68]	; (800f470 <_tx_initialize_high_level+0x60>)
 800f42a:	2200      	movs	r2, #0
 800f42c:	601a      	str	r2, [r3, #0]
 800f42e:	4b11      	ldr	r3, [pc, #68]	; (800f474 <_tx_initialize_high_level+0x64>)
 800f430:	2200      	movs	r2, #0
 800f432:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800f434:	4b10      	ldr	r3, [pc, #64]	; (800f478 <_tx_initialize_high_level+0x68>)
 800f436:	2200      	movs	r2, #0
 800f438:	601a      	str	r2, [r3, #0]
 800f43a:	4b10      	ldr	r3, [pc, #64]	; (800f47c <_tx_initialize_high_level+0x6c>)
 800f43c:	2200      	movs	r2, #0
 800f43e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800f440:	4b0f      	ldr	r3, [pc, #60]	; (800f480 <_tx_initialize_high_level+0x70>)
 800f442:	2200      	movs	r2, #0
 800f444:	601a      	str	r2, [r3, #0]
 800f446:	4b0f      	ldr	r3, [pc, #60]	; (800f484 <_tx_initialize_high_level+0x74>)
 800f448:	2200      	movs	r2, #0
 800f44a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800f44c:	4b0e      	ldr	r3, [pc, #56]	; (800f488 <_tx_initialize_high_level+0x78>)
 800f44e:	2200      	movs	r2, #0
 800f450:	601a      	str	r2, [r3, #0]
 800f452:	4b0e      	ldr	r3, [pc, #56]	; (800f48c <_tx_initialize_high_level+0x7c>)
 800f454:	2200      	movs	r2, #0
 800f456:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800f458:	4b0d      	ldr	r3, [pc, #52]	; (800f490 <_tx_initialize_high_level+0x80>)
 800f45a:	2200      	movs	r2, #0
 800f45c:	601a      	str	r2, [r3, #0]
 800f45e:	4b0d      	ldr	r3, [pc, #52]	; (800f494 <_tx_initialize_high_level+0x84>)
 800f460:	2200      	movs	r2, #0
 800f462:	601a      	str	r2, [r3, #0]
#endif
}
 800f464:	bf00      	nop
 800f466:	bd80      	pop	{r7, pc}
 800f468:	20008160 	.word	0x20008160
 800f46c:	20008164 	.word	0x20008164
 800f470:	20008168 	.word	0x20008168
 800f474:	2000816c 	.word	0x2000816c
 800f478:	20008170 	.word	0x20008170
 800f47c:	20008174 	.word	0x20008174
 800f480:	20008180 	.word	0x20008180
 800f484:	20008184 	.word	0x20008184
 800f488:	20008188 	.word	0x20008188
 800f48c:	2000818c 	.word	0x2000818c
 800f490:	20008178 	.word	0x20008178
 800f494:	2000817c 	.word	0x2000817c

0800f498 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800f49c:	4b10      	ldr	r3, [pc, #64]	; (800f4e0 <_tx_initialize_kernel_enter+0x48>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800f4a4:	d00c      	beq.n	800f4c0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800f4a6:	4b0e      	ldr	r3, [pc, #56]	; (800f4e0 <_tx_initialize_kernel_enter+0x48>)
 800f4a8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800f4ac:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800f4ae:	f7f0 fec7 	bl	8000240 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800f4b2:	f7ff ffad 	bl	800f410 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800f4b6:	4b0b      	ldr	r3, [pc, #44]	; (800f4e4 <_tx_initialize_kernel_enter+0x4c>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	4a09      	ldr	r2, [pc, #36]	; (800f4e4 <_tx_initialize_kernel_enter+0x4c>)
 800f4be:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800f4c0:	4b07      	ldr	r3, [pc, #28]	; (800f4e0 <_tx_initialize_kernel_enter+0x48>)
 800f4c2:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800f4c6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800f4c8:	4b07      	ldr	r3, [pc, #28]	; (800f4e8 <_tx_initialize_kernel_enter+0x50>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7f1 f9a9 	bl	8000824 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800f4d2:	4b03      	ldr	r3, [pc, #12]	; (800f4e0 <_tx_initialize_kernel_enter+0x48>)
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800f4d8:	f7f0 fef2 	bl	80002c0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800f4dc:	bf00      	nop
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	2000008c 	.word	0x2000008c
 800f4e4:	20008230 	.word	0x20008230
 800f4e8:	20008190 	.word	0x20008190

0800f4ec <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b08e      	sub	sp, #56	; 0x38
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f4f6:	f3ef 8310 	mrs	r3, PRIMASK
 800f4fa:	623b      	str	r3, [r7, #32]
    return(posture);
 800f4fc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f4fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f500:	b672      	cpsid	i
    return(int_posture);
 800f502:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800f504:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f50a:	4a33      	ldr	r2, [pc, #204]	; (800f5d8 <_tx_mutex_cleanup+0xec>)
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d158      	bne.n	800f5c2 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f516:	683a      	ldr	r2, [r7, #0]
 800f518:	429a      	cmp	r2, r3
 800f51a:	d152      	bne.n	800f5c2 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f520:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800f522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f524:	2b00      	cmp	r3, #0
 800f526:	d04c      	beq.n	800f5c2 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800f528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	4a2b      	ldr	r2, [pc, #172]	; (800f5dc <_tx_mutex_cleanup+0xf0>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d147      	bne.n	800f5c2 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800f532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f534:	69db      	ldr	r3, [r3, #28]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d043      	beq.n	800f5c2 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2200      	movs	r2, #0
 800f53e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800f540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f542:	69db      	ldr	r3, [r3, #28]
 800f544:	1e5a      	subs	r2, r3, #1
 800f546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f548:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54c:	69db      	ldr	r3, [r3, #28]
 800f54e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800f550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f552:	2b00      	cmp	r3, #0
 800f554:	d103      	bne.n	800f55e <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800f556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f558:	2200      	movs	r2, #0
 800f55a:	619a      	str	r2, [r3, #24]
 800f55c:	e013      	b.n	800f586 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f562:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f568:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800f56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f56e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800f570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f574:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800f576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f578:	699b      	ldr	r3, [r3, #24]
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d102      	bne.n	800f586 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800f580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f584:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f58a:	2b0d      	cmp	r3, #13
 800f58c:	d119      	bne.n	800f5c2 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	221d      	movs	r2, #29
 800f592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800f596:	4b12      	ldr	r3, [pc, #72]	; (800f5e0 <_tx_mutex_cleanup+0xf4>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	3301      	adds	r3, #1
 800f59c:	4a10      	ldr	r2, [pc, #64]	; (800f5e0 <_tx_mutex_cleanup+0xf4>)
 800f59e:	6013      	str	r3, [r2, #0]
 800f5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	f383 8810 	msr	PRIMASK, r3
}
 800f5aa:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f001 fc11 	bl	8010dd4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f5b2:	f3ef 8310 	mrs	r3, PRIMASK
 800f5b6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f5b8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f5ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f5bc:	b672      	cpsid	i
    return(int_posture);
 800f5be:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800f5c0:	637b      	str	r3, [r7, #52]	; 0x34
 800f5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5c4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	f383 8810 	msr	PRIMASK, r3
}
 800f5cc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800f5ce:	bf00      	nop
 800f5d0:	3738      	adds	r7, #56	; 0x38
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	0800f4ed 	.word	0x0800f4ed
 800f5dc:	4d555445 	.word	0x4d555445
 800f5e0:	20008230 	.word	0x20008230

0800f5e4 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b08a      	sub	sp, #40	; 0x28
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f5ec:	f3ef 8310 	mrs	r3, PRIMASK
 800f5f0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f5f2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f5f4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f5f6:	b672      	cpsid	i
    return(int_posture);
 800f5f8:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800f5fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f5fc:	4b1a      	ldr	r3, [pc, #104]	; (800f668 <_tx_mutex_thread_release+0x84>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	3301      	adds	r3, #1
 800f602:	4a19      	ldr	r2, [pc, #100]	; (800f668 <_tx_mutex_thread_release+0x84>)
 800f604:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f60c:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800f60e:	6a3b      	ldr	r3, [r7, #32]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d017      	beq.n	800f644 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f614:	6a3b      	ldr	r3, [r7, #32]
 800f616:	2201      	movs	r2, #1
 800f618:	609a      	str	r2, [r3, #8]
 800f61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f383 8810 	msr	PRIMASK, r3
}
 800f624:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800f626:	6a38      	ldr	r0, [r7, #32]
 800f628:	f000 fb9c 	bl	800fd64 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f62c:	f3ef 8310 	mrs	r3, PRIMASK
 800f630:	617b      	str	r3, [r7, #20]
    return(posture);
 800f632:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f634:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f636:	b672      	cpsid	i
    return(int_posture);
 800f638:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800f63a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f642:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 800f644:	6a3b      	ldr	r3, [r7, #32]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d1dd      	bne.n	800f606 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800f64a:	4b07      	ldr	r3, [pc, #28]	; (800f668 <_tx_mutex_thread_release+0x84>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	3b01      	subs	r3, #1
 800f650:	4a05      	ldr	r2, [pc, #20]	; (800f668 <_tx_mutex_thread_release+0x84>)
 800f652:	6013      	str	r3, [r2, #0]
 800f654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f656:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	f383 8810 	msr	PRIMASK, r3
}
 800f65e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 800f660:	bf00      	nop
 800f662:	3728      	adds	r7, #40	; 0x28
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	20008230 	.word	0x20008230

0800f66c <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b08a      	sub	sp, #40	; 0x28
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	60b9      	str	r1, [r7, #8]
 800f676:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800f678:	2234      	movs	r2, #52	; 0x34
 800f67a:	2100      	movs	r1, #0
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	f003 fc0f 	bl	8012ea0 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	68ba      	ldr	r2, [r7, #8]
 800f686:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f68e:	f3ef 8310 	mrs	r3, PRIMASK
 800f692:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f694:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f696:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f698:	b672      	cpsid	i
    return(int_posture);
 800f69a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800f69c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	4a1a      	ldr	r2, [pc, #104]	; (800f70c <_tx_mutex_create+0xa0>)
 800f6a2:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800f6a4:	4b1a      	ldr	r3, [pc, #104]	; (800f710 <_tx_mutex_create+0xa4>)
 800f6a6:	4a1b      	ldr	r2, [pc, #108]	; (800f714 <_tx_mutex_create+0xa8>)
 800f6a8:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800f6aa:	4b1b      	ldr	r3, [pc, #108]	; (800f718 <_tx_mutex_create+0xac>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d109      	bne.n	800f6c6 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800f6b2:	4a1a      	ldr	r2, [pc, #104]	; (800f71c <_tx_mutex_create+0xb0>)
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	625a      	str	r2, [r3, #36]	; 0x24
 800f6c4:	e011      	b.n	800f6ea <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800f6c6:	4b15      	ldr	r3, [pc, #84]	; (800f71c <_tx_mutex_create+0xb0>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800f6cc:	6a3b      	ldr	r3, [r7, #32]
 800f6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d0:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800f6d2:	6a3b      	ldr	r3, [r7, #32]
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	68fa      	ldr	r2, [r7, #12]
 800f6dc:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	69fa      	ldr	r2, [r7, #28]
 800f6e2:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6a3a      	ldr	r2, [r7, #32]
 800f6e8:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800f6ea:	4b0b      	ldr	r3, [pc, #44]	; (800f718 <_tx_mutex_create+0xac>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	4a09      	ldr	r2, [pc, #36]	; (800f718 <_tx_mutex_create+0xac>)
 800f6f2:	6013      	str	r3, [r2, #0]
 800f6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	f383 8810 	msr	PRIMASK, r3
}
 800f6fe:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f700:	2300      	movs	r3, #0
}
 800f702:	4618      	mov	r0, r3
 800f704:	3728      	adds	r7, #40	; 0x28
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	4d555445 	.word	0x4d555445
 800f710:	20008234 	.word	0x20008234
 800f714:	0800f5e5 	.word	0x0800f5e5
 800f718:	2000817c 	.word	0x2000817c
 800f71c:	20008178 	.word	0x20008178

0800f720 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b096      	sub	sp, #88	; 0x58
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f728:	f3ef 8310 	mrs	r3, PRIMASK
 800f72c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800f72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800f730:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800f732:	b672      	cpsid	i
    return(int_posture);
 800f734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 800f736:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2200      	movs	r2, #0
 800f73c:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800f73e:	4b4a      	ldr	r3, [pc, #296]	; (800f868 <_tx_mutex_delete+0x148>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	3b01      	subs	r3, #1
 800f744:	4a48      	ldr	r2, [pc, #288]	; (800f868 <_tx_mutex_delete+0x148>)
 800f746:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800f748:	4b47      	ldr	r3, [pc, #284]	; (800f868 <_tx_mutex_delete+0x148>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d103      	bne.n	800f758 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 800f750:	4b46      	ldr	r3, [pc, #280]	; (800f86c <_tx_mutex_delete+0x14c>)
 800f752:	2200      	movs	r2, #0
 800f754:	601a      	str	r2, [r3, #0]
 800f756:	e013      	b.n	800f780 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6a1b      	ldr	r3, [r3, #32]
 800f75c:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f762:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 800f764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f768:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800f76a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f76c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f76e:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 800f770:	4b3e      	ldr	r3, [pc, #248]	; (800f86c <_tx_mutex_delete+0x14c>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	429a      	cmp	r2, r3
 800f778:	d102      	bne.n	800f780 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 800f77a:	4a3c      	ldr	r2, [pc, #240]	; (800f86c <_tx_mutex_delete+0x14c>)
 800f77c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f77e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f780:	4b3b      	ldr	r3, [pc, #236]	; (800f870 <_tx_mutex_delete+0x150>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	3301      	adds	r3, #1
 800f786:	4a3a      	ldr	r2, [pc, #232]	; (800f870 <_tx_mutex_delete+0x150>)
 800f788:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	699b      	ldr	r3, [r3, #24]
 800f78e:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	69db      	ldr	r3, [r3, #28]
 800f79a:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 800f7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d013      	beq.n	800f7d6 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	609a      	str	r2, [r3, #8]
 800f7b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7b6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ba:	f383 8810 	msr	PRIMASK, r3
}
 800f7be:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 facf 	bl	800fd64 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f7c6:	f3ef 8310 	mrs	r3, PRIMASK
 800f7ca:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800f7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800f7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800f7d0:	b672      	cpsid	i
    return(int_posture);
 800f7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 800f7d4:	657b      	str	r3, [r7, #84]	; 0x54
 800f7d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7d8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	f383 8810 	msr	PRIMASK, r3
}
 800f7e0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 800f7e2:	e024      	b.n	800f82e <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800f7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7e6:	3b01      	subs	r3, #1
 800f7e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f7ea:	f3ef 8310 	mrs	r3, PRIMASK
 800f7ee:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f7f0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f7f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f7f4:	b672      	cpsid	i
    return(int_posture);
 800f7f6:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 800f7f8:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f7fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800f800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f802:	2201      	movs	r2, #1
 800f804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800f808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800f80e:	4b18      	ldr	r3, [pc, #96]	; (800f870 <_tx_mutex_delete+0x150>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	3301      	adds	r3, #1
 800f814:	4a16      	ldr	r2, [pc, #88]	; (800f870 <_tx_mutex_delete+0x150>)
 800f816:	6013      	str	r3, [r2, #0]
 800f818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f81a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f81c:	6a3b      	ldr	r3, [r7, #32]
 800f81e:	f383 8810 	msr	PRIMASK, r3
}
 800f822:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800f824:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f826:	f001 fad5 	bl	8010dd4 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800f82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f82c:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 800f82e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f830:	2b00      	cmp	r3, #0
 800f832:	d1d7      	bne.n	800f7e4 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f834:	f3ef 8310 	mrs	r3, PRIMASK
 800f838:	613b      	str	r3, [r7, #16]
    return(posture);
 800f83a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800f83c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f83e:	b672      	cpsid	i
    return(int_posture);
 800f840:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800f842:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800f844:	4b0a      	ldr	r3, [pc, #40]	; (800f870 <_tx_mutex_delete+0x150>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	3b01      	subs	r3, #1
 800f84a:	4a09      	ldr	r2, [pc, #36]	; (800f870 <_tx_mutex_delete+0x150>)
 800f84c:	6013      	str	r3, [r2, #0]
 800f84e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f850:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	f383 8810 	msr	PRIMASK, r3
}
 800f858:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800f85a:	f001 fa81 	bl	8010d60 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f85e:	2300      	movs	r3, #0
}
 800f860:	4618      	mov	r0, r3
 800f862:	3758      	adds	r7, #88	; 0x58
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	2000817c 	.word	0x2000817c
 800f86c:	20008178 	.word	0x20008178
 800f870:	20008230 	.word	0x20008230

0800f874 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b092      	sub	sp, #72	; 0x48
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f87e:	f3ef 8310 	mrs	r3, PRIMASK
 800f882:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800f884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800f886:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f888:	b672      	cpsid	i
    return(int_posture);
 800f88a:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800f88c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800f88e:	4b7a      	ldr	r3, [pc, #488]	; (800fa78 <_tx_mutex_get+0x204>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	689b      	ldr	r3, [r3, #8]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d144      	bne.n	800f926 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2201      	movs	r2, #1
 800f8a0:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f8a6:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800f8a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d032      	beq.n	800f914 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	691b      	ldr	r3, [r3, #16]
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	d106      	bne.n	800f8c4 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800f8b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2220      	movs	r2, #32
 800f8c2:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800f8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f8ca:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800f8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d00f      	beq.n	800f8f2 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800f8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8d6:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800f8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8da:	687a      	ldr	r2, [r7, #4]
 800f8dc:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800f8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8e8:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8ee:	62da      	str	r2, [r3, #44]	; 0x2c
 800f8f0:	e009      	b.n	800f906 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800f8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800f906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f908:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f90c:	1c5a      	adds	r2, r3, #1
 800f90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f910:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800f914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f916:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	f383 8810 	msr	PRIMASK, r3
}
 800f91e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800f920:	2300      	movs	r3, #0
 800f922:	647b      	str	r3, [r7, #68]	; 0x44
 800f924:	e0a2      	b.n	800fa6c <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	68db      	ldr	r3, [r3, #12]
 800f92a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d10d      	bne.n	800f94c <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	689b      	ldr	r3, [r3, #8]
 800f934:	1c5a      	adds	r2, r3, #1
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	609a      	str	r2, [r3, #8]
 800f93a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f93c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f93e:	69bb      	ldr	r3, [r7, #24]
 800f940:	f383 8810 	msr	PRIMASK, r3
}
 800f944:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800f946:	2300      	movs	r3, #0
 800f948:	647b      	str	r3, [r7, #68]	; 0x44
 800f94a:	e08f      	b.n	800fa6c <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f000 8084 	beq.w	800fa5c <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800f954:	4b49      	ldr	r3, [pc, #292]	; (800fa7c <_tx_mutex_get+0x208>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d008      	beq.n	800f96e <_tx_mutex_get+0xfa>
 800f95c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f95e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	f383 8810 	msr	PRIMASK, r3
}
 800f966:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800f968:	231d      	movs	r3, #29
 800f96a:	647b      	str	r3, [r7, #68]	; 0x44
 800f96c:	e07e      	b.n	800fa6c <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800f974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f976:	4a42      	ldr	r2, [pc, #264]	; (800fa80 <_tx_mutex_get+0x20c>)
 800f978:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800f97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800f980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f982:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f986:	1c5a      	adds	r2, r3, #1
 800f988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f98a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	69db      	ldr	r3, [r3, #28]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d109      	bne.n	800f9aa <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f99a:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800f99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f99e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f9a0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800f9a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f9a6:	675a      	str	r2, [r3, #116]	; 0x74
 800f9a8:	e011      	b.n	800f9ce <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	699b      	ldr	r3, [r3, #24]
 800f9ae:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800f9b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9b4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800f9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ba:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800f9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9c0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f9c6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800f9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f9cc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	69db      	ldr	r3, [r3, #28]
 800f9d2:	1c5a      	adds	r2, r3, #1
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800f9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9da:	220d      	movs	r2, #13
 800f9dc:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f9de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800f9e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9e6:	683a      	ldr	r2, [r7, #0]
 800f9e8:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800f9ea:	4b24      	ldr	r3, [pc, #144]	; (800fa7c <_tx_mutex_get+0x208>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	4a22      	ldr	r2, [pc, #136]	; (800fa7c <_tx_mutex_get+0x208>)
 800f9f2:	6013      	str	r3, [r2, #0]
 800f9f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	f383 8810 	msr	PRIMASK, r3
}
 800f9fe:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	691b      	ldr	r3, [r3, #16]
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d121      	bne.n	800fa4c <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d903      	bls.n	800fa1c <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800fa14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800fa1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d204      	bcs.n	800fa34 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800fa2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800fa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d905      	bls.n	800fa4c <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800fa40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa44:	4619      	mov	r1, r3
 800fa46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa48:	f000 f8ce 	bl	800fbe8 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800fa4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fa4e:	f001 fac1 	bl	8010fd4 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800fa52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa58:	647b      	str	r3, [r7, #68]	; 0x44
 800fa5a:	e007      	b.n	800fa6c <_tx_mutex_get+0x1f8>
 800fa5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa5e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f383 8810 	msr	PRIMASK, r3
}
 800fa66:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800fa68:	231d      	movs	r3, #29
 800fa6a:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800fa6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3748      	adds	r7, #72	; 0x48
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	20008198 	.word	0x20008198
 800fa7c:	20008230 	.word	0x20008230
 800fa80:	0800f4ed 	.word	0x0800f4ed

0800fa84 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b092      	sub	sp, #72	; 0x48
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fa8c:	f3ef 8310 	mrs	r3, PRIMASK
 800fa90:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800fa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800fa94:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fa96:	b672      	cpsid	i
    return(int_posture);
 800fa98:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800fa9a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	69db      	ldr	r3, [r3, #28]
 800faa0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800faa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d805      	bhi.n	800fab4 <_tx_mutex_prioritize+0x30>
 800faa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faaa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	f383 8810 	msr	PRIMASK, r3
}
 800fab2:	e092      	b.n	800fbda <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800fab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fab6:	2b02      	cmp	r3, #2
 800fab8:	d114      	bne.n	800fae4 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	699b      	ldr	r3, [r3, #24]
 800fabe:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800fac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fac4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800fac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800facc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800face:	429a      	cmp	r2, r3
 800fad0:	d202      	bcs.n	800fad8 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fad6:	619a      	str	r2, [r3, #24]
 800fad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fada:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fadc:	69bb      	ldr	r3, [r7, #24]
 800fade:	f383 8810 	msr	PRIMASK, r3
}
 800fae2:	e07a      	b.n	800fbda <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	699b      	ldr	r3, [r3, #24]
 800fae8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800faea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faec:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800faee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faf2:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800faf4:	4b3b      	ldr	r3, [pc, #236]	; (800fbe4 <_tx_mutex_prioritize+0x160>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	3301      	adds	r3, #1
 800fafa:	4a3a      	ldr	r2, [pc, #232]	; (800fbe4 <_tx_mutex_prioritize+0x160>)
 800fafc:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800fafe:	2300      	movs	r3, #0
 800fb00:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800fb02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d201      	bcs.n	800fb12 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800fb0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb14:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f383 8810 	msr	PRIMASK, r3
}
 800fb1c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fb1e:	f3ef 8310 	mrs	r3, PRIMASK
 800fb22:	617b      	str	r3, [r7, #20]
    return(posture);
 800fb24:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800fb26:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fb28:	b672      	cpsid	i
    return(int_posture);
 800fb2a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800fb2c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	699b      	ldr	r3, [r3, #24]
 800fb32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d002      	beq.n	800fb3e <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800fb38:	2301      	movs	r3, #1
 800fb3a:	633b      	str	r3, [r7, #48]	; 0x30
 800fb3c:	e006      	b.n	800fb4c <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	69db      	ldr	r3, [r3, #28]
 800fb42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d001      	beq.n	800fb4c <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800fb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d103      	bne.n	800fb5a <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800fb52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb56:	643b      	str	r3, [r7, #64]	; 0x40
 800fb58:	e00c      	b.n	800fb74 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	699b      	ldr	r3, [r3, #24]
 800fb5e:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	69db      	ldr	r3, [r3, #28]
 800fb64:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800fb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb68:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800fb6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb6e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800fb70:	2300      	movs	r3, #0
 800fb72:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 800fb74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d1c2      	bne.n	800fb02 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800fb7c:	4b19      	ldr	r3, [pc, #100]	; (800fbe4 <_tx_mutex_prioritize+0x160>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	3b01      	subs	r3, #1
 800fb82:	4a18      	ldr	r2, [pc, #96]	; (800fbe4 <_tx_mutex_prioritize+0x160>)
 800fb84:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800fb86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d01d      	beq.n	800fbca <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800fb8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb92:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800fb94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb98:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800fb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb9e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800fba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fba4:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800fba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbaa:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800fbac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbb0:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800fbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbb6:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800fbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbbc:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800fbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbc2:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbc8:	619a      	str	r2, [r3, #24]
 800fbca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbcc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	f383 8810 	msr	PRIMASK, r3
}
 800fbd4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800fbd6:	f001 f8c3 	bl	8010d60 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800fbda:	2300      	movs	r3, #0
#endif
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3748      	adds	r7, #72	; 0x48
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	20008230 	.word	0x20008230

0800fbe8 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b090      	sub	sp, #64	; 0x40
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fbf2:	f3ef 8310 	mrs	r3, PRIMASK
 800fbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800fbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800fbfa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800fbfc:	b672      	cpsid	i
    return(int_posture);
 800fbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800fc00:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d017      	beq.n	800fc3a <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	683a      	ldr	r2, [r7, #0]
 800fc0e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fc16:	683a      	ldr	r2, [r7, #0]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d905      	bls.n	800fc28 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	63da      	str	r2, [r3, #60]	; 0x3c
 800fc26:	e002      	b.n	800fc2e <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	683a      	ldr	r2, [r7, #0]
 800fc2c:	63da      	str	r2, [r3, #60]	; 0x3c
 800fc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc30:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc34:	f383 8810 	msr	PRIMASK, r3
}
 800fc38:	e089      	b.n	800fd4e <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800fc3a:	4b47      	ldr	r3, [pc, #284]	; (800fd58 <_tx_mutex_priority_change+0x170>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc44:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800fc46:	4b45      	ldr	r3, [pc, #276]	; (800fd5c <_tx_mutex_priority_change+0x174>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	3302      	adds	r3, #2
 800fc4c:	4a43      	ldr	r2, [pc, #268]	; (800fd5c <_tx_mutex_priority_change+0x174>)
 800fc4e:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	220e      	movs	r2, #14
 800fc54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	64da      	str	r2, [r3, #76]	; 0x4c
 800fc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc64:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	f383 8810 	msr	PRIMASK, r3
}
 800fc6c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f001 f9b0 	bl	8010fd4 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fc74:	f3ef 8310 	mrs	r3, PRIMASK
 800fc78:	623b      	str	r3, [r7, #32]
    return(posture);
 800fc7a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800fc7c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fc7e:	b672      	cpsid	i
    return(int_posture);
 800fc80:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800fc82:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	683a      	ldr	r2, [r7, #0]
 800fc88:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fc90:	683a      	ldr	r2, [r7, #0]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d905      	bls.n	800fca2 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	63da      	str	r2, [r3, #60]	; 0x3c
 800fca0:	e002      	b.n	800fca8 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	683a      	ldr	r2, [r7, #0]
 800fca6:	63da      	str	r2, [r3, #60]	; 0x3c
 800fca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcaa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f383 8810 	msr	PRIMASK, r3
}
 800fcb2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f001 f88d 	bl	8010dd4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fcba:	f3ef 8310 	mrs	r3, PRIMASK
 800fcbe:	617b      	str	r3, [r7, #20]
    return(posture);
 800fcc0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800fcc2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fcc4:	b672      	cpsid	i
    return(int_posture);
 800fcc6:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800fcc8:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800fcca:	4b23      	ldr	r3, [pc, #140]	; (800fd58 <_tx_mutex_priority_change+0x170>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d034      	beq.n	800fd42 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d130      	bne.n	800fd42 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d811      	bhi.n	800fd10 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800fcec:	687a      	ldr	r2, [r7, #4]
 800fcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d126      	bne.n	800fd42 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800fcf4:	4a18      	ldr	r2, [pc, #96]	; (800fd58 <_tx_mutex_priority_change+0x170>)
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800fcfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d21f      	bcs.n	800fd42 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd06:	4916      	ldr	r1, [pc, #88]	; (800fd60 <_tx_mutex_priority_change+0x178>)
 800fd08:	687a      	ldr	r2, [r7, #4]
 800fd0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fd0e:	e018      	b.n	800fd42 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d212      	bcs.n	800fd42 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d80c      	bhi.n	800fd42 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800fd28:	4a0b      	ldr	r2, [pc, #44]	; (800fd58 <_tx_mutex_priority_change+0x170>)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800fd2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d205      	bcs.n	800fd42 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd3a:	4909      	ldr	r1, [pc, #36]	; (800fd60 <_tx_mutex_priority_change+0x178>)
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fd42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd44:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	f383 8810 	msr	PRIMASK, r3
}
 800fd4c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800fd4e:	bf00      	nop
 800fd50:	3740      	adds	r7, #64	; 0x40
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	2000819c 	.word	0x2000819c
 800fd5c:	20008230 	.word	0x20008230
 800fd60:	200081b0 	.word	0x200081b0

0800fd64 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b0a6      	sub	sp, #152	; 0x98
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800fd6c:	2320      	movs	r3, #32
 800fd6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fd72:	f3ef 8310 	mrs	r3, PRIMASK
 800fd76:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 800fd78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800fd7a:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800fd7c:	b672      	cpsid	i
    return(int_posture);
 800fd7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800fd80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	689b      	ldr	r3, [r3, #8]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	f000 81ff 	beq.w	801018c <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800fd94:	4ba3      	ldr	r3, [pc, #652]	; (8010024 <_tx_mutex_put+0x2c0>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	68db      	ldr	r3, [r3, #12]
 800fd9e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d00d      	beq.n	800fdc0 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800fda4:	4ba0      	ldr	r3, [pc, #640]	; (8010028 <_tx_mutex_put+0x2c4>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d109      	bne.n	800fdc0 <_tx_mutex_put+0x5c>
 800fdac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fdb0:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fdb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdb4:	f383 8810 	msr	PRIMASK, r3
}
 800fdb8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800fdba:	231e      	movs	r3, #30
 800fdbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800fdc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fdc4:	2b20      	cmp	r3, #32
 800fdc6:	f040 81eb 	bne.w	80101a0 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	689b      	ldr	r3, [r3, #8]
 800fdce:	1e5a      	subs	r2, r3, #1
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	689b      	ldr	r3, [r3, #8]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d00a      	beq.n	800fdf2 <_tx_mutex_put+0x8e>
 800fddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fde0:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fde2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fde4:	f383 8810 	msr	PRIMASK, r3
}
 800fde8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800fdea:	2300      	movs	r3, #0
 800fdec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fdf0:	e1d6      	b.n	80101a0 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800fdf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d10a      	bne.n	800fe0e <_tx_mutex_put+0xaa>
 800fdf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fdfc:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fdfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe00:	f383 8810 	msr	PRIMASK, r3
}
 800fe04:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800fe06:	2300      	movs	r3, #0
 800fe08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fe0c:	e1c8      	b.n	80101a0 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800fe0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fe14:	1e5a      	subs	r2, r3, #1
 800fe16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800fe1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d104      	bne.n	800fe30 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800fe26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe28:	2200      	movs	r2, #0
 800fe2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800fe2e:	e019      	b.n	800fe64 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe3c:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800fe3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fe44:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800fe46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fe4c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800fe4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d104      	bne.n	800fe64 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800fe5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fe60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	699b      	ldr	r3, [r3, #24]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d110      	bne.n	800fe8e <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	691b      	ldr	r3, [r3, #16]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d10c      	bne.n	800fe8e <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2200      	movs	r2, #0
 800fe78:	60da      	str	r2, [r3, #12]
 800fe7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe7e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fe80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe82:	f383 8810 	msr	PRIMASK, r3
}
 800fe86:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800fe8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fe92:	2b20      	cmp	r3, #32
 800fe94:	f040 8184 	bne.w	80101a0 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800fe9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	691b      	ldr	r3, [r3, #16]
 800feac:	2b01      	cmp	r3, #1
 800feae:	d155      	bne.n	800ff5c <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800feb0:	4b5d      	ldr	r3, [pc, #372]	; (8010028 <_tx_mutex_put+0x2c4>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	3301      	adds	r3, #1
 800feb6:	4a5c      	ldr	r2, [pc, #368]	; (8010028 <_tx_mutex_put+0x2c4>)
 800feb8:	6013      	str	r3, [r2, #0]
 800feba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800febe:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fec2:	f383 8810 	msr	PRIMASK, r3
}
 800fec6:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800fec8:	2320      	movs	r3, #32
 800feca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800fece:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fed0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800fed8:	e01f      	b.n	800ff1a <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800feda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fede:	691b      	ldr	r3, [r3, #16]
 800fee0:	2b01      	cmp	r3, #1
 800fee2:	d10b      	bne.n	800fefc <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800fee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800feee:	429a      	cmp	r2, r3
 800fef0:	d904      	bls.n	800fefc <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800fef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800fefc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800ff06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ff0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d102      	bne.n	800ff1a <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800ff14:	2300      	movs	r3, #0
 800ff16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800ff1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d1db      	bne.n	800feda <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ff22:	f3ef 8310 	mrs	r3, PRIMASK
 800ff26:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800ff28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800ff2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ff2c:	b672      	cpsid	i
    return(int_posture);
 800ff2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ff30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800ff34:	4b3c      	ldr	r3, [pc, #240]	; (8010028 <_tx_mutex_put+0x2c4>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	4a3b      	ldr	r2, [pc, #236]	; (8010028 <_tx_mutex_put+0x2c4>)
 800ff3c:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800ff3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ff44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800ff48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ff4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d203      	bcs.n	800ff5c <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800ff54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	69db      	ldr	r3, [r3, #28]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d920      	bls.n	800ffa6 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	691b      	ldr	r3, [r3, #16]
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d11c      	bne.n	800ffa6 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800ff6c:	4b2e      	ldr	r3, [pc, #184]	; (8010028 <_tx_mutex_put+0x2c4>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	3301      	adds	r3, #1
 800ff72:	4a2d      	ldr	r2, [pc, #180]	; (8010028 <_tx_mutex_put+0x2c4>)
 800ff74:	6013      	str	r3, [r2, #0]
 800ff76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff7a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ff7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff7e:	f383 8810 	msr	PRIMASK, r3
}
 800ff82:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f7ff fd7d 	bl	800fa84 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ff8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ff8e:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800ff90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800ff92:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800ff94:	b672      	cpsid	i
    return(int_posture);
 800ff96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800ff98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800ff9c:	4b22      	ldr	r3, [pc, #136]	; (8010028 <_tx_mutex_put+0x2c4>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	3b01      	subs	r3, #1
 800ffa2:	4a21      	ldr	r2, [pc, #132]	; (8010028 <_tx_mutex_put+0x2c4>)
 800ffa4:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	699b      	ldr	r3, [r3, #24]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d13e      	bne.n	801002c <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ffae:	4b1e      	ldr	r3, [pc, #120]	; (8010028 <_tx_mutex_put+0x2c4>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	4a1c      	ldr	r2, [pc, #112]	; (8010028 <_tx_mutex_put+0x2c4>)
 800ffb6:	6013      	str	r3, [r2, #0]
 800ffb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ffbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc0:	f383 8810 	msr	PRIMASK, r3
}
 800ffc4:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2220      	movs	r2, #32
 800ffca:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d006      	beq.n	800ffe8 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7ff fe00 	bl	800fbe8 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ffe8:	f3ef 8310 	mrs	r3, PRIMASK
 800ffec:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800ffee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800fff0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fff2:	b672      	cpsid	i
    return(int_posture);
 800fff4:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800fff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800fffa:	4b0b      	ldr	r3, [pc, #44]	; (8010028 <_tx_mutex_put+0x2c4>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	3b01      	subs	r3, #1
 8010000:	4a09      	ldr	r2, [pc, #36]	; (8010028 <_tx_mutex_put+0x2c4>)
 8010002:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2200      	movs	r2, #0
 8010008:	60da      	str	r2, [r3, #12]
 801000a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801000e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010012:	f383 8810 	msr	PRIMASK, r3
}
 8010016:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8010018:	f000 fea2 	bl	8010d60 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 801001c:	2300      	movs	r3, #0
 801001e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010022:	e0bd      	b.n	80101a0 <_tx_mutex_put+0x43c>
 8010024:	20008198 	.word	0x20008198
 8010028:	20008230 	.word	0x20008230
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	699b      	ldr	r3, [r3, #24]
 8010030:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	691b      	ldr	r3, [r3, #16]
 8010036:	2b01      	cmp	r3, #1
 8010038:	d10a      	bne.n	8010050 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	68db      	ldr	r3, [r3, #12]
 801003e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8010042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2220      	movs	r2, #32
 801004e:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8010050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010052:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010056:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8010058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801005a:	2b00      	cmp	r3, #0
 801005c:	d10a      	bne.n	8010074 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 801005e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	631a      	str	r2, [r3, #48]	; 0x30
 8010072:	e016      	b.n	80100a2 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8010074:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010076:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801007a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 801007e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010084:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8010086:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 801008e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010090:	687a      	ldr	r2, [r7, #4]
 8010092:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010098:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80100a0:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 80100a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80100a4:	1c5a      	adds	r2, r3, #1
 80100a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80100a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2201      	movs	r2, #1
 80100b0:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80100b6:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	69db      	ldr	r3, [r3, #28]
 80100bc:	1e5a      	subs	r2, r3, #1
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	69db      	ldr	r3, [r3, #28]
 80100c6:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 80100c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d103      	bne.n	80100d6 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2200      	movs	r2, #0
 80100d2:	619a      	str	r2, [r3, #24]
 80100d4:	e00e      	b.n	80100f4 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80100d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80100d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100da:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80100e0:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80100e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80100e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100e6:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 80100e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80100ec:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 80100ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80100f2:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80100f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80100f6:	2200      	movs	r2, #0
 80100f8:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80100fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80100fc:	2200      	movs	r2, #0
 80100fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010102:	4b2a      	ldr	r3, [pc, #168]	; (80101ac <_tx_mutex_put+0x448>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	3301      	adds	r3, #1
 8010108:	4a28      	ldr	r2, [pc, #160]	; (80101ac <_tx_mutex_put+0x448>)
 801010a:	6013      	str	r3, [r2, #0]
 801010c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010110:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	f383 8810 	msr	PRIMASK, r3
}
 8010118:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	691b      	ldr	r3, [r3, #16]
 801011e:	2b01      	cmp	r3, #1
 8010120:	d12d      	bne.n	801017e <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	69db      	ldr	r3, [r3, #28]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d01c      	beq.n	8010164 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f7ff fcaa 	bl	800fa84 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010130:	f3ef 8310 	mrs	r3, PRIMASK
 8010134:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010136:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010138:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801013a:	b672      	cpsid	i
    return(int_posture);
 801013c:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 801013e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	699b      	ldr	r3, [r3, #24]
 8010146:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8010148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801014a:	2b00      	cmp	r3, #0
 801014c:	d003      	beq.n	8010156 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 801014e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	629a      	str	r2, [r3, #40]	; 0x28
 8010156:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801015a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	f383 8810 	msr	PRIMASK, r3
}
 8010162:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8010164:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801016a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801016e:	429a      	cmp	r2, r3
 8010170:	d005      	beq.n	801017e <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8010172:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8010176:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801017a:	f7ff fd35 	bl	800fbe8 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 801017e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010180:	f000 fe28 	bl	8010dd4 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8010184:	2300      	movs	r3, #0
 8010186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801018a:	e009      	b.n	80101a0 <_tx_mutex_put+0x43c>
 801018c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010190:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f383 8810 	msr	PRIMASK, r3
}
 8010198:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 801019a:	231e      	movs	r3, #30
 801019c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 80101a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3798      	adds	r7, #152	; 0x98
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	20008230 	.word	0x20008230

080101b0 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b08e      	sub	sp, #56	; 0x38
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80101ba:	f3ef 8310 	mrs	r3, PRIMASK
 80101be:	623b      	str	r3, [r7, #32]
    return(posture);
 80101c0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80101c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80101c4:	b672      	cpsid	i
    return(int_posture);
 80101c6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80101c8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101ce:	4a33      	ldr	r2, [pc, #204]	; (801029c <_tx_semaphore_cleanup+0xec>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d158      	bne.n	8010286 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80101da:	683a      	ldr	r2, [r7, #0]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d152      	bne.n	8010286 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101e4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80101e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d04c      	beq.n	8010286 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80101ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	4a2b      	ldr	r2, [pc, #172]	; (80102a0 <_tx_semaphore_cleanup+0xf0>)
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d147      	bne.n	8010286 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80101f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f8:	691b      	ldr	r3, [r3, #16]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d043      	beq.n	8010286 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2200      	movs	r2, #0
 8010202:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8010204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010206:	691b      	ldr	r3, [r3, #16]
 8010208:	1e5a      	subs	r2, r3, #1
 801020a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801020c:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 801020e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010210:	691b      	ldr	r3, [r3, #16]
 8010212:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8010214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010216:	2b00      	cmp	r3, #0
 8010218:	d103      	bne.n	8010222 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 801021a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021c:	2200      	movs	r2, #0
 801021e:	60da      	str	r2, [r3, #12]
 8010220:	e013      	b.n	801024a <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010226:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801022c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801022e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010232:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010238:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 801023a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	429a      	cmp	r2, r3
 8010242:	d102      	bne.n	801024a <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8010244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010248:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801024e:	2b06      	cmp	r3, #6
 8010250:	d119      	bne.n	8010286 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	220d      	movs	r2, #13
 8010256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801025a:	4b12      	ldr	r3, [pc, #72]	; (80102a4 <_tx_semaphore_cleanup+0xf4>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	3301      	adds	r3, #1
 8010260:	4a10      	ldr	r2, [pc, #64]	; (80102a4 <_tx_semaphore_cleanup+0xf4>)
 8010262:	6013      	str	r3, [r2, #0]
 8010264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010266:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	f383 8810 	msr	PRIMASK, r3
}
 801026e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f000 fdaf 	bl	8010dd4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010276:	f3ef 8310 	mrs	r3, PRIMASK
 801027a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801027c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801027e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010280:	b672      	cpsid	i
    return(int_posture);
 8010282:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8010284:	637b      	str	r3, [r7, #52]	; 0x34
 8010286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010288:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f383 8810 	msr	PRIMASK, r3
}
 8010290:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010292:	bf00      	nop
 8010294:	3738      	adds	r7, #56	; 0x38
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	080101b1 	.word	0x080101b1
 80102a0:	53454d41 	.word	0x53454d41
 80102a4:	20008230 	.word	0x20008230

080102a8 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b08a      	sub	sp, #40	; 0x28
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80102b4:	221c      	movs	r2, #28
 80102b6:	2100      	movs	r1, #0
 80102b8:	68f8      	ldr	r0, [r7, #12]
 80102ba:	f002 fdf1 	bl	8012ea0 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	68ba      	ldr	r2, [r7, #8]
 80102c2:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	687a      	ldr	r2, [r7, #4]
 80102c8:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80102ca:	f3ef 8310 	mrs	r3, PRIMASK
 80102ce:	61bb      	str	r3, [r7, #24]
    return(posture);
 80102d0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80102d2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80102d4:	b672      	cpsid	i
    return(int_posture);
 80102d6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80102d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	4a18      	ldr	r2, [pc, #96]	; (8010340 <_tx_semaphore_create+0x98>)
 80102de:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80102e0:	4b18      	ldr	r3, [pc, #96]	; (8010344 <_tx_semaphore_create+0x9c>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d109      	bne.n	80102fc <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80102e8:	4a17      	ldr	r2, [pc, #92]	; (8010348 <_tx_semaphore_create+0xa0>)
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	68fa      	ldr	r2, [r7, #12]
 80102f8:	619a      	str	r2, [r3, #24]
 80102fa:	e011      	b.n	8010320 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80102fc:	4b12      	ldr	r3, [pc, #72]	; (8010348 <_tx_semaphore_create+0xa0>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8010302:	6a3b      	ldr	r3, [r7, #32]
 8010304:	699b      	ldr	r3, [r3, #24]
 8010306:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8010308:	6a3b      	ldr	r3, [r7, #32]
 801030a:	68fa      	ldr	r2, [r7, #12]
 801030c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	68fa      	ldr	r2, [r7, #12]
 8010312:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	69fa      	ldr	r2, [r7, #28]
 8010318:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	6a3a      	ldr	r2, [r7, #32]
 801031e:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8010320:	4b08      	ldr	r3, [pc, #32]	; (8010344 <_tx_semaphore_create+0x9c>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	3301      	adds	r3, #1
 8010326:	4a07      	ldr	r2, [pc, #28]	; (8010344 <_tx_semaphore_create+0x9c>)
 8010328:	6013      	str	r3, [r2, #0]
 801032a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	f383 8810 	msr	PRIMASK, r3
}
 8010334:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010336:	2300      	movs	r3, #0
}
 8010338:	4618      	mov	r0, r3
 801033a:	3728      	adds	r7, #40	; 0x28
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}
 8010340:	53454d41 	.word	0x53454d41
 8010344:	20008164 	.word	0x20008164
 8010348:	20008160 	.word	0x20008160

0801034c <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b08e      	sub	sp, #56	; 0x38
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8010356:	2300      	movs	r3, #0
 8010358:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801035a:	f3ef 8310 	mrs	r3, PRIMASK
 801035e:	623b      	str	r3, [r7, #32]
    return(posture);
 8010360:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8010362:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010364:	b672      	cpsid	i
    return(int_posture);
 8010366:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8010368:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	689b      	ldr	r3, [r3, #8]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d00a      	beq.n	8010388 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	689b      	ldr	r3, [r3, #8]
 8010376:	1e5a      	subs	r2, r3, #1
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	609a      	str	r2, [r3, #8]
 801037c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010380:	69bb      	ldr	r3, [r7, #24]
 8010382:	f383 8810 	msr	PRIMASK, r3
}
 8010386:	e068      	b.n	801045a <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d05d      	beq.n	801044a <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801038e:	4b35      	ldr	r3, [pc, #212]	; (8010464 <_tx_semaphore_get+0x118>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d008      	beq.n	80103a8 <_tx_semaphore_get+0x5c>
 8010396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010398:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	f383 8810 	msr	PRIMASK, r3
}
 80103a0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 80103a2:	230d      	movs	r3, #13
 80103a4:	637b      	str	r3, [r7, #52]	; 0x34
 80103a6:	e058      	b.n	801045a <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80103a8:	4b2f      	ldr	r3, [pc, #188]	; (8010468 <_tx_semaphore_get+0x11c>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 80103ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b0:	4a2e      	ldr	r2, [pc, #184]	; (801046c <_tx_semaphore_get+0x120>)
 80103b2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 80103b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b6:	687a      	ldr	r2, [r7, #4]
 80103b8:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80103ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80103c0:	1c5a      	adds	r2, r3, #1
 80103c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	691b      	ldr	r3, [r3, #16]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d109      	bne.n	80103e4 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103d4:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80103d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103da:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 80103dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103e0:	675a      	str	r2, [r3, #116]	; 0x74
 80103e2:	e011      	b.n	8010408 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80103ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103ee:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80103f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103f4:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80103f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103fa:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80103fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010400:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010406:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	691b      	ldr	r3, [r3, #16]
 801040c:	1c5a      	adds	r2, r3, #1
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8010412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010414:	2206      	movs	r2, #6
 8010416:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041a:	2201      	movs	r2, #1
 801041c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801041e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010420:	683a      	ldr	r2, [r7, #0]
 8010422:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010424:	4b0f      	ldr	r3, [pc, #60]	; (8010464 <_tx_semaphore_get+0x118>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	3301      	adds	r3, #1
 801042a:	4a0e      	ldr	r2, [pc, #56]	; (8010464 <_tx_semaphore_get+0x118>)
 801042c:	6013      	str	r3, [r2, #0]
 801042e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010430:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	f383 8810 	msr	PRIMASK, r3
}
 8010438:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801043a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801043c:	f000 fdca 	bl	8010fd4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8010440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010446:	637b      	str	r3, [r7, #52]	; 0x34
 8010448:	e007      	b.n	801045a <_tx_semaphore_get+0x10e>
 801044a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	f383 8810 	msr	PRIMASK, r3
}
 8010454:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8010456:	230d      	movs	r3, #13
 8010458:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 801045a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801045c:	4618      	mov	r0, r3
 801045e:	3738      	adds	r7, #56	; 0x38
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}
 8010464:	20008230 	.word	0x20008230
 8010468:	20008198 	.word	0x20008198
 801046c:	080101b1 	.word	0x080101b1

08010470 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b08c      	sub	sp, #48	; 0x30
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010478:	f3ef 8310 	mrs	r3, PRIMASK
 801047c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801047e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010480:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010482:	b672      	cpsid	i
    return(int_posture);
 8010484:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8010486:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	691b      	ldr	r3, [r3, #16]
 801048c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 801048e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010490:	2b00      	cmp	r3, #0
 8010492:	d10a      	bne.n	80104aa <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	1c5a      	adds	r2, r3, #1
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	609a      	str	r2, [r3, #8]
 801049e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	f383 8810 	msr	PRIMASK, r3
}
 80104a8:	e033      	b.n	8010512 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 80104b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b2:	3b01      	subs	r3, #1
 80104b4:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 80104b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d103      	bne.n	80104c4 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2200      	movs	r2, #0
 80104c0:	60da      	str	r2, [r3, #12]
 80104c2:	e00e      	b.n	80104e2 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 80104c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104c8:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6a3a      	ldr	r2, [r7, #32]
 80104ce:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80104d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d4:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80104d6:	6a3b      	ldr	r3, [r7, #32]
 80104d8:	69fa      	ldr	r2, [r7, #28]
 80104da:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	6a3a      	ldr	r2, [r7, #32]
 80104e0:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104e6:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80104e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ea:	2200      	movs	r2, #0
 80104ec:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80104ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f0:	2200      	movs	r2, #0
 80104f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80104f6:	4b09      	ldr	r3, [pc, #36]	; (801051c <_tx_semaphore_put+0xac>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	3301      	adds	r3, #1
 80104fc:	4a07      	ldr	r2, [pc, #28]	; (801051c <_tx_semaphore_put+0xac>)
 80104fe:	6013      	str	r3, [r2, #0]
 8010500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010502:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f383 8810 	msr	PRIMASK, r3
}
 801050a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 801050c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801050e:	f000 fc61 	bl	8010dd4 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8010512:	2300      	movs	r3, #0
}
 8010514:	4618      	mov	r0, r3
 8010516:	3730      	adds	r7, #48	; 0x30
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	20008230 	.word	0x20008230

08010520 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b092      	sub	sp, #72	; 0x48
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
 801052c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 801052e:	2300      	movs	r3, #0
 8010530:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8010532:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010534:	21ef      	movs	r1, #239	; 0xef
 8010536:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010538:	f002 fcb2 	bl	8012ea0 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 801053c:	22b0      	movs	r2, #176	; 0xb0
 801053e:	2100      	movs	r1, #0
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f002 fcad 	bl	8012ea0 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	68ba      	ldr	r2, [r7, #8]
 801054a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	683a      	ldr	r2, [r7, #0]
 8010556:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801055c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010562:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010568:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801056e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010576:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801057c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2220      	movs	r2, #32
 8010582:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8010586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010588:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801058a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801058c:	3b01      	subs	r3, #1
 801058e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010590:	4413      	add	r3, r2
 8010592:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010598:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 801059a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801059c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801059e:	429a      	cmp	r2, r3
 80105a0:	d007      	beq.n	80105b2 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2200      	movs	r2, #0
 80105a6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2200      	movs	r2, #0
 80105ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80105b0:	e006      	b.n	80105c0 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105b6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	2203      	movs	r2, #3
 80105c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	4a48      	ldr	r2, [pc, #288]	; (80106ec <_tx_thread_create+0x1cc>)
 80105ca:	655a      	str	r2, [r3, #84]	; 0x54
 80105cc:	68fa      	ldr	r2, [r7, #12]
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80105d2:	4947      	ldr	r1, [pc, #284]	; (80106f0 <_tx_thread_create+0x1d0>)
 80105d4:	68f8      	ldr	r0, [r7, #12]
 80105d6:	f7ef fed3 	bl	8000380 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80105da:	f3ef 8310 	mrs	r3, PRIMASK
 80105de:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80105e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80105e2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80105e4:	b672      	cpsid	i
    return(int_posture);
 80105e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80105e8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	4a41      	ldr	r2, [pc, #260]	; (80106f4 <_tx_thread_create+0x1d4>)
 80105ee:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80105f0:	4b41      	ldr	r3, [pc, #260]	; (80106f8 <_tx_thread_create+0x1d8>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d10b      	bne.n	8010610 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80105f8:	4a40      	ldr	r2, [pc, #256]	; (80106fc <_tx_thread_create+0x1dc>)
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801060e:	e016      	b.n	801063e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8010610:	4b3a      	ldr	r3, [pc, #232]	; (80106fc <_tx_thread_create+0x1dc>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8010616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801061c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 801061e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010620:	68fa      	ldr	r2, [r7, #12]
 8010622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8010626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010628:	68fa      	ldr	r2, [r7, #12]
 801062a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801063a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 801063e:	4b2e      	ldr	r3, [pc, #184]	; (80106f8 <_tx_thread_create+0x1d8>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	3301      	adds	r3, #1
 8010644:	4a2c      	ldr	r2, [pc, #176]	; (80106f8 <_tx_thread_create+0x1d8>)
 8010646:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010648:	4b2d      	ldr	r3, [pc, #180]	; (8010700 <_tx_thread_create+0x1e0>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	3301      	adds	r3, #1
 801064e:	4a2c      	ldr	r2, [pc, #176]	; (8010700 <_tx_thread_create+0x1e0>)
 8010650:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8010652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010654:	2b01      	cmp	r3, #1
 8010656:	d129      	bne.n	80106ac <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010658:	f3ef 8305 	mrs	r3, IPSR
 801065c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 801065e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8010660:	4b28      	ldr	r3, [pc, #160]	; (8010704 <_tx_thread_create+0x1e4>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4313      	orrs	r3, r2
 8010666:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801066a:	d30d      	bcc.n	8010688 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 801066c:	4b26      	ldr	r3, [pc, #152]	; (8010708 <_tx_thread_create+0x1e8>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8010672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010674:	2b00      	cmp	r3, #0
 8010676:	d009      	beq.n	801068c <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8010678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801067a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801067c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801067e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010684:	63da      	str	r2, [r3, #60]	; 0x3c
 8010686:	e001      	b.n	801068c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8010688:	2300      	movs	r3, #0
 801068a:	647b      	str	r3, [r7, #68]	; 0x44
 801068c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	f383 8810 	msr	PRIMASK, r3
}
 8010696:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8010698:	68f8      	ldr	r0, [r7, #12]
 801069a:	f000 fb9b 	bl	8010dd4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801069e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d01e      	beq.n	80106e2 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80106a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80106aa:	e01a      	b.n	80106e2 <_tx_thread_create+0x1c2>
 80106ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	f383 8810 	msr	PRIMASK, r3
}
 80106b6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80106b8:	f3ef 8310 	mrs	r3, PRIMASK
 80106bc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80106be:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80106c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80106c2:	b672      	cpsid	i
    return(int_posture);
 80106c4:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80106c6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80106c8:	4b0d      	ldr	r3, [pc, #52]	; (8010700 <_tx_thread_create+0x1e0>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	3b01      	subs	r3, #1
 80106ce:	4a0c      	ldr	r2, [pc, #48]	; (8010700 <_tx_thread_create+0x1e0>)
 80106d0:	6013      	str	r3, [r2, #0]
 80106d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	f383 8810 	msr	PRIMASK, r3
}
 80106dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80106de:	f000 fb3f 	bl	8010d60 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80106e2:	2300      	movs	r3, #0
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3748      	adds	r7, #72	; 0x48
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	080112a9 	.word	0x080112a9
 80106f0:	08010ae9 	.word	0x08010ae9
 80106f4:	54485244 	.word	0x54485244
 80106f8:	200081a4 	.word	0x200081a4
 80106fc:	200081a0 	.word	0x200081a0
 8010700:	20008230 	.word	0x20008230
 8010704:	2000008c 	.word	0x2000008c
 8010708:	2000819c 	.word	0x2000819c

0801070c <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 801070c:	b480      	push	{r7}
 801070e:	b08b      	sub	sp, #44	; 0x2c
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8010714:	2300      	movs	r3, #0
 8010716:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010718:	f3ef 8310 	mrs	r3, PRIMASK
 801071c:	617b      	str	r3, [r7, #20]
    return(posture);
 801071e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010720:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010722:	b672      	cpsid	i
    return(int_posture);
 8010724:	693b      	ldr	r3, [r7, #16]

    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 8010726:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801072c:	2b01      	cmp	r3, #1
 801072e:	d00b      	beq.n	8010748 <_tx_thread_delete+0x3c>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010734:	2b02      	cmp	r3, #2
 8010736:	d007      	beq.n	8010748 <_tx_thread_delete+0x3c>
 8010738:	6a3b      	ldr	r3, [r7, #32]
 801073a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f383 8810 	msr	PRIMASK, r3
}
 8010742:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 8010744:	2311      	movs	r3, #17
 8010746:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 8010748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074a:	2b00      	cmp	r3, #0
 801074c:	d12d      	bne.n	80107aa <_tx_thread_delete+0x9e>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 8010754:	4b18      	ldr	r3, [pc, #96]	; (80107b8 <_tx_thread_delete+0xac>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	3b01      	subs	r3, #1
 801075a:	4a17      	ldr	r2, [pc, #92]	; (80107b8 <_tx_thread_delete+0xac>)
 801075c:	6013      	str	r3, [r2, #0]

        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 801075e:	4b16      	ldr	r3, [pc, #88]	; (80107b8 <_tx_thread_delete+0xac>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d103      	bne.n	801076e <_tx_thread_delete+0x62>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 8010766:	4b15      	ldr	r3, [pc, #84]	; (80107bc <_tx_thread_delete+0xb0>)
 8010768:	2200      	movs	r2, #0
 801076a:	601a      	str	r2, [r3, #0]
 801076c:	e017      	b.n	801079e <_tx_thread_delete+0x92>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010774:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801077c:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	69ba      	ldr	r2, [r7, #24]
 8010782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            previous_thread -> tx_thread_created_next =  next_thread;
 8010786:	69bb      	ldr	r3, [r7, #24]
 8010788:	69fa      	ldr	r2, [r7, #28]
 801078a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 801078e:	4b0b      	ldr	r3, [pc, #44]	; (80107bc <_tx_thread_delete+0xb0>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	687a      	ldr	r2, [r7, #4]
 8010794:	429a      	cmp	r2, r3
 8010796:	d102      	bne.n	801079e <_tx_thread_delete+0x92>
            {

                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8010798:	4a08      	ldr	r2, [pc, #32]	; (80107bc <_tx_thread_delete+0xb0>)
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	6013      	str	r3, [r2, #0]
 801079e:	6a3b      	ldr	r3, [r7, #32]
 80107a0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	f383 8810 	msr	PRIMASK, r3
}
 80107a8:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 80107aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	372c      	adds	r7, #44	; 0x2c
 80107b0:	46bd      	mov	sp, r7
 80107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b6:	4770      	bx	lr
 80107b8:	200081a4 	.word	0x200081a4
 80107bc:	200081a0 	.word	0x200081a0

080107c0 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b087      	sub	sp, #28
 80107c4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80107c6:	f3ef 8310 	mrs	r3, PRIMASK
 80107ca:	60bb      	str	r3, [r7, #8]
    return(posture);
 80107cc:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 80107ce:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 80107d0:	b672      	cpsid	i
    return(int_posture);
 80107d2:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80107d4:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80107d6:	4b08      	ldr	r3, [pc, #32]	; (80107f8 <_tx_thread_identify+0x38>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	613b      	str	r3, [r7, #16]
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	f383 8810 	msr	PRIMASK, r3
}
 80107e6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 80107e8:	693b      	ldr	r3, [r7, #16]
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	371c      	adds	r7, #28
 80107ee:	46bd      	mov	sp, r7
 80107f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f4:	4770      	bx	lr
 80107f6:	bf00      	nop
 80107f8:	20008198 	.word	0x20008198

080107fc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8010800:	4b12      	ldr	r3, [pc, #72]	; (801084c <_tx_thread_initialize+0x50>)
 8010802:	2200      	movs	r2, #0
 8010804:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8010806:	4b12      	ldr	r3, [pc, #72]	; (8010850 <_tx_thread_initialize+0x54>)
 8010808:	2200      	movs	r2, #0
 801080a:	601a      	str	r2, [r3, #0]
 801080c:	4b11      	ldr	r3, [pc, #68]	; (8010854 <_tx_thread_initialize+0x58>)
 801080e:	2200      	movs	r2, #0
 8010810:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010812:	4b11      	ldr	r3, [pc, #68]	; (8010858 <_tx_thread_initialize+0x5c>)
 8010814:	2220      	movs	r2, #32
 8010816:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8010818:	2280      	movs	r2, #128	; 0x80
 801081a:	2100      	movs	r1, #0
 801081c:	480f      	ldr	r0, [pc, #60]	; (801085c <_tx_thread_initialize+0x60>)
 801081e:	f002 fb3f 	bl	8012ea0 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8010822:	4b0f      	ldr	r3, [pc, #60]	; (8010860 <_tx_thread_initialize+0x64>)
 8010824:	2200      	movs	r2, #0
 8010826:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8010828:	4b0e      	ldr	r3, [pc, #56]	; (8010864 <_tx_thread_initialize+0x68>)
 801082a:	2200      	movs	r2, #0
 801082c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 801082e:	4b0e      	ldr	r3, [pc, #56]	; (8010868 <_tx_thread_initialize+0x6c>)
 8010830:	2200      	movs	r2, #0
 8010832:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8010834:	4b0d      	ldr	r3, [pc, #52]	; (801086c <_tx_thread_initialize+0x70>)
 8010836:	2200      	movs	r2, #0
 8010838:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 801083a:	4b0d      	ldr	r3, [pc, #52]	; (8010870 <_tx_thread_initialize+0x74>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8010842:	4a0b      	ldr	r2, [pc, #44]	; (8010870 <_tx_thread_initialize+0x74>)
 8010844:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8010846:	bf00      	nop
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	20008198 	.word	0x20008198
 8010850:	2000819c 	.word	0x2000819c
 8010854:	200081a8 	.word	0x200081a8
 8010858:	200081ac 	.word	0x200081ac
 801085c:	200081b0 	.word	0x200081b0
 8010860:	200081a0 	.word	0x200081a0
 8010864:	200081a4 	.word	0x200081a4
 8010868:	20008230 	.word	0x20008230
 801086c:	20008234 	.word	0x20008234
 8010870:	20008238 	.word	0x20008238

08010874 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b08c      	sub	sp, #48	; 0x30
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8010880:	2300      	movs	r3, #0
 8010882:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801088a:	68ba      	ldr	r2, [r7, #8]
 801088c:	429a      	cmp	r2, r3
 801088e:	d004      	beq.n	801089a <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d001      	beq.n	801089a <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8010896:	2300      	movs	r3, #0
 8010898:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801089a:	f3ef 8310 	mrs	r3, PRIMASK
 801089e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80108a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80108a2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80108a4:	b672      	cpsid	i
    return(int_posture);
 80108a6:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80108a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80108b0:	68ba      	ldr	r2, [r7, #8]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d902      	bls.n	80108bc <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 80108b6:	2318      	movs	r3, #24
 80108b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80108ba:	e03e      	b.n	801093a <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	68ba      	ldr	r2, [r7, #8]
 80108ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80108d4:	68ba      	ldr	r2, [r7, #8]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d203      	bcs.n	80108e2 <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	68ba      	ldr	r2, [r7, #8]
 80108de:	63da      	str	r2, [r3, #60]	; 0x3c
 80108e0:	e004      	b.n	80108ec <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108f0:	4b17      	ldr	r3, [pc, #92]	; (8010950 <_tx_thread_preemption_change+0xdc>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d920      	bls.n	801093a <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 80108f8:	4b15      	ldr	r3, [pc, #84]	; (8010950 <_tx_thread_preemption_change+0xdc>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	68ba      	ldr	r2, [r7, #8]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d91b      	bls.n	801093a <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8010902:	4b14      	ldr	r3, [pc, #80]	; (8010954 <_tx_thread_preemption_change+0xe0>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	68fa      	ldr	r2, [r7, #12]
 8010908:	429a      	cmp	r2, r3
 801090a:	d116      	bne.n	801093a <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801090c:	4b10      	ldr	r3, [pc, #64]	; (8010950 <_tx_thread_preemption_change+0xdc>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4a11      	ldr	r2, [pc, #68]	; (8010958 <_tx_thread_preemption_change+0xe4>)
 8010912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010916:	4a0f      	ldr	r2, [pc, #60]	; (8010954 <_tx_thread_preemption_change+0xe0>)
 8010918:	6013      	str	r3, [r2, #0]
 801091a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	f383 8810 	msr	PRIMASK, r3
}
 8010924:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8010926:	f000 fa1b 	bl	8010d60 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801092a:	f3ef 8310 	mrs	r3, PRIMASK
 801092e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010930:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010932:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010934:	b672      	cpsid	i
    return(int_posture);
 8010936:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8010938:	62fb      	str	r3, [r7, #44]	; 0x2c
 801093a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	f383 8810 	msr	PRIMASK, r3
}
 8010944:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8010946:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8010948:	4618      	mov	r0, r3
 801094a:	3730      	adds	r7, #48	; 0x30
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}
 8010950:	200081ac 	.word	0x200081ac
 8010954:	2000819c 	.word	0x2000819c
 8010958:	200081b0 	.word	0x200081b0

0801095c <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 801095c:	b480      	push	{r7}
 801095e:	b08b      	sub	sp, #44	; 0x2c
 8010960:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010962:	4b2b      	ldr	r3, [pc, #172]	; (8010a10 <_tx_thread_relinquish+0xb4>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010968:	f3ef 8310 	mrs	r3, PRIMASK
 801096c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801096e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010970:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010972:	b672      	cpsid	i
    return(int_posture);
 8010974:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 8010976:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8010978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097a:	69db      	ldr	r3, [r3, #28]
 801097c:	4a25      	ldr	r2, [pc, #148]	; (8010a14 <_tx_thread_relinquish+0xb8>)
 801097e:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 8010980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010984:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8010986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010988:	6a1b      	ldr	r3, [r3, #32]
 801098a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801098c:	429a      	cmp	r2, r3
 801098e:	d009      	beq.n	80109a4 <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 8010990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010992:	6a1a      	ldr	r2, [r3, #32]
 8010994:	4920      	ldr	r1, [pc, #128]	; (8010a18 <_tx_thread_relinquish+0xbc>)
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 801099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099e:	6a1b      	ldr	r3, [r3, #32]
 80109a0:	4a1e      	ldr	r2, [pc, #120]	; (8010a1c <_tx_thread_relinquish+0xc0>)
 80109a2:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 80109a4:	4b1e      	ldr	r3, [pc, #120]	; (8010a20 <_tx_thread_relinquish+0xc4>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	69fa      	ldr	r2, [r7, #28]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d906      	bls.n	80109bc <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80109ae:	4b1c      	ldr	r3, [pc, #112]	; (8010a20 <_tx_thread_relinquish+0xc4>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	4a19      	ldr	r2, [pc, #100]	; (8010a18 <_tx_thread_relinquish+0xbc>)
 80109b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109b8:	4a18      	ldr	r2, [pc, #96]	; (8010a1c <_tx_thread_relinquish+0xc0>)
 80109ba:	6013      	str	r3, [r2, #0]
 80109bc:	6a3b      	ldr	r3, [r7, #32]
 80109be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	f383 8810 	msr	PRIMASK, r3
}
 80109c6:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 80109c8:	4b14      	ldr	r3, [pc, #80]	; (8010a1c <_tx_thread_relinquish+0xc0>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d017      	beq.n	8010a02 <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80109d2:	4b14      	ldr	r3, [pc, #80]	; (8010a24 <_tx_thread_relinquish+0xc8>)
 80109d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109d8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80109da:	f3ef 8305 	mrs	r3, IPSR
 80109de:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80109e0:	68fb      	ldr	r3, [r7, #12]
    if (__get_ipsr_value() == 0)
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d10c      	bne.n	8010a00 <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80109e6:	f3ef 8310 	mrs	r3, PRIMASK
 80109ea:	60bb      	str	r3, [r7, #8]
    return(posture);
 80109ec:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 80109ee:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80109f0:	b662      	cpsie	i
}
 80109f2:	bf00      	nop
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	f383 8810 	msr	PRIMASK, r3
}
 80109fe:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8010a00:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 8010a02:	bf00      	nop
 8010a04:	372c      	adds	r7, #44	; 0x2c
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop
 8010a10:	20008198 	.word	0x20008198
 8010a14:	2000879c 	.word	0x2000879c
 8010a18:	200081b0 	.word	0x200081b0
 8010a1c:	2000819c 	.word	0x2000819c
 8010a20:	200081ac 	.word	0x200081ac
 8010a24:	e000ed04 	.word	0xe000ed04

08010a28 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b08c      	sub	sp, #48	; 0x30
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8010a30:	2300      	movs	r3, #0
 8010a32:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010a34:	f3ef 8310 	mrs	r3, PRIMASK
 8010a38:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010a3a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010a3c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010a3e:	b672      	cpsid	i
    return(int_posture);
 8010a40:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8010a42:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a48:	2b03      	cmp	r3, #3
 8010a4a:	d12f      	bne.n	8010aac <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010a4c:	f3ef 8305 	mrs	r3, IPSR
 8010a50:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010a52:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8010a54:	4b21      	ldr	r3, [pc, #132]	; (8010adc <_tx_thread_resume+0xb4>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4313      	orrs	r3, r2
 8010a5a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010a5e:	d30d      	bcc.n	8010a7c <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8010a60:	4b1f      	ldr	r3, [pc, #124]	; (8010ae0 <_tx_thread_resume+0xb8>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8010a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d009      	beq.n	8010a80 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8010a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a70:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8010a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a78:	63da      	str	r2, [r3, #60]	; 0x3c
 8010a7a:	e001      	b.n	8010a80 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8010a80:	4b18      	ldr	r3, [pc, #96]	; (8010ae4 <_tx_thread_resume+0xbc>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	3301      	adds	r3, #1
 8010a86:	4a17      	ldr	r2, [pc, #92]	; (8010ae4 <_tx_thread_resume+0xbc>)
 8010a88:	6013      	str	r3, [r2, #0]
 8010a8a:	6a3b      	ldr	r3, [r7, #32]
 8010a8c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	f383 8810 	msr	PRIMASK, r3
}
 8010a94:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f000 f99c 	bl	8010dd4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8010a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d002      	beq.n	8010aa8 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8010aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010aa6:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	e012      	b.n	8010ad2 <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d105      	bne.n	8010ac0 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8010aba:	2319      	movs	r3, #25
 8010abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010abe:	e001      	b.n	8010ac4 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8010ac0:	2312      	movs	r3, #18
 8010ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ac4:	6a3b      	ldr	r3, [r7, #32]
 8010ac6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f383 8810 	msr	PRIMASK, r3
}
 8010ace:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8010ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3730      	adds	r7, #48	; 0x30
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop
 8010adc:	2000008c 	.word	0x2000008c
 8010ae0:	2000819c 	.word	0x2000819c
 8010ae4:	20008230 	.word	0x20008230

08010ae8 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b088      	sub	sp, #32
 8010aec:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010aee:	4b21      	ldr	r3, [pc, #132]	; (8010b74 <_tx_thread_shell_entry+0x8c>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010af8:	69fa      	ldr	r2, [r7, #28]
 8010afa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010afc:	4610      	mov	r0, r2
 8010afe:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8010b00:	4b1d      	ldr	r3, [pc, #116]	; (8010b78 <_tx_thread_shell_entry+0x90>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d003      	beq.n	8010b10 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8010b08:	4b1b      	ldr	r3, [pc, #108]	; (8010b78 <_tx_thread_shell_entry+0x90>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	69f8      	ldr	r0, [r7, #28]
 8010b0e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b10:	f3ef 8310 	mrs	r3, PRIMASK
 8010b14:	607b      	str	r3, [r7, #4]
    return(posture);
 8010b16:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8010b18:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b1a:	b672      	cpsid	i
    return(int_posture);
 8010b1c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8010b1e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	2201      	movs	r2, #1
 8010b24:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	2201      	movs	r2, #1
 8010b2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010b2c:	69fb      	ldr	r3, [r7, #28]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010b32:	4b12      	ldr	r3, [pc, #72]	; (8010b7c <_tx_thread_shell_entry+0x94>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	3301      	adds	r3, #1
 8010b38:	4a10      	ldr	r2, [pc, #64]	; (8010b7c <_tx_thread_shell_entry+0x94>)
 8010b3a:	6013      	str	r3, [r2, #0]
 8010b3c:	69bb      	ldr	r3, [r7, #24]
 8010b3e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	f383 8810 	msr	PRIMASK, r3
}
 8010b46:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8010b48:	f3ef 8314 	mrs	r3, CONTROL
 8010b4c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8010b4e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8010b50:	617b      	str	r3, [r7, #20]
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	f023 0304 	bic.w	r3, r3, #4
 8010b58:	617b      	str	r3, [r7, #20]
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	f383 8814 	msr	CONTROL, r3
}
 8010b64:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8010b66:	69f8      	ldr	r0, [r7, #28]
 8010b68:	f000 fa34 	bl	8010fd4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010b6c:	bf00      	nop
 8010b6e:	3720      	adds	r7, #32
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}
 8010b74:	20008198 	.word	0x20008198
 8010b78:	20008234 	.word	0x20008234
 8010b7c:	20008230 	.word	0x20008230

08010b80 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b08e      	sub	sp, #56	; 0x38
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b88:	f3ef 8310 	mrs	r3, PRIMASK
 8010b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8010b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8010b90:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b92:	b672      	cpsid	i
    return(int_posture);
 8010b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8010b96:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010b98:	4b35      	ldr	r3, [pc, #212]	; (8010c70 <_tx_thread_sleep+0xf0>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8010b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d108      	bne.n	8010bb6 <_tx_thread_sleep+0x36>
 8010ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ba8:	6a3b      	ldr	r3, [r7, #32]
 8010baa:	f383 8810 	msr	PRIMASK, r3
}
 8010bae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8010bb0:	2313      	movs	r3, #19
 8010bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8010bb4:	e056      	b.n	8010c64 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010bb6:	f3ef 8305 	mrs	r3, IPSR
 8010bba:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8010bbc:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8010bbe:	4b2d      	ldr	r3, [pc, #180]	; (8010c74 <_tx_thread_sleep+0xf4>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d008      	beq.n	8010bda <_tx_thread_sleep+0x5a>
 8010bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010bcc:	69bb      	ldr	r3, [r7, #24]
 8010bce:	f383 8810 	msr	PRIMASK, r3
}
 8010bd2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8010bd4:	2313      	movs	r3, #19
 8010bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8010bd8:	e044      	b.n	8010c64 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8010bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bdc:	4a26      	ldr	r2, [pc, #152]	; (8010c78 <_tx_thread_sleep+0xf8>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d108      	bne.n	8010bf4 <_tx_thread_sleep+0x74>
 8010be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	f383 8810 	msr	PRIMASK, r3
}
 8010bec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8010bee:	2313      	movs	r3, #19
 8010bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8010bf2:	e037      	b.n	8010c64 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d108      	bne.n	8010c0c <_tx_thread_sleep+0x8c>
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	f383 8810 	msr	PRIMASK, r3
}
 8010c04:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8010c06:	2300      	movs	r3, #0
 8010c08:	637b      	str	r3, [r7, #52]	; 0x34
 8010c0a:	e02b      	b.n	8010c64 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8010c0c:	4b1b      	ldr	r3, [pc, #108]	; (8010c7c <_tx_thread_sleep+0xfc>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d008      	beq.n	8010c26 <_tx_thread_sleep+0xa6>
 8010c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c16:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	f383 8810 	msr	PRIMASK, r3
}
 8010c1e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8010c20:	2313      	movs	r3, #19
 8010c22:	637b      	str	r3, [r7, #52]	; 0x34
 8010c24:	e01e      	b.n	8010c64 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8010c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c28:	2204      	movs	r2, #4
 8010c2a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c2e:	2201      	movs	r2, #1
 8010c30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c34:	2200      	movs	r2, #0
 8010c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8010c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010c40:	4b0e      	ldr	r3, [pc, #56]	; (8010c7c <_tx_thread_sleep+0xfc>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	3301      	adds	r3, #1
 8010c46:	4a0d      	ldr	r2, [pc, #52]	; (8010c7c <_tx_thread_sleep+0xfc>)
 8010c48:	6013      	str	r3, [r2, #0]
 8010c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	f383 8810 	msr	PRIMASK, r3
}
 8010c54:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010c56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c58:	f000 f9bc 	bl	8010fd4 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8010c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c62:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8010c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3738      	adds	r7, #56	; 0x38
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	20008198 	.word	0x20008198
 8010c74:	2000008c 	.word	0x2000008c
 8010c78:	200082e0 	.word	0x200082e0
 8010c7c:	20008230 	.word	0x20008230

08010c80 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b08a      	sub	sp, #40	; 0x28
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c88:	f3ef 8310 	mrs	r3, PRIMASK
 8010c8c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010c8e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010c90:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c92:	b672      	cpsid	i
    return(int_posture);
 8010c94:	697b      	ldr	r3, [r7, #20]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8010c96:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8010c98:	4b2e      	ldr	r3, [pc, #184]	; (8010d54 <_tx_thread_suspend+0xd4>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d130      	bne.n	8010d08 <_tx_thread_suspend+0x88>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010caa:	f3ef 8305 	mrs	r3, IPSR
 8010cae:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8010cb0:	693a      	ldr	r2, [r7, #16]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8010cb2:	4b29      	ldr	r3, [pc, #164]	; (8010d58 <_tx_thread_suspend+0xd8>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	4313      	orrs	r3, r2
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d109      	bne.n	8010cd0 <_tx_thread_suspend+0x50>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8010cbc:	69fa      	ldr	r2, [r7, #28]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d105      	bne.n	8010cd0 <_tx_thread_suspend+0x50>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8010cc4:	4b25      	ldr	r3, [pc, #148]	; (8010d5c <_tx_thread_suspend+0xdc>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d001      	beq.n	8010cd0 <_tx_thread_suspend+0x50>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 8010ccc:	2314      	movs	r3, #20
 8010cce:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8010cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d132      	bne.n	8010d3c <_tx_thread_suspend+0xbc>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2203      	movs	r2, #3
 8010cda:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2201      	movs	r2, #1
 8010ce0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010ce8:	4b1c      	ldr	r3, [pc, #112]	; (8010d5c <_tx_thread_suspend+0xdc>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	3301      	adds	r3, #1
 8010cee:	4a1b      	ldr	r2, [pc, #108]	; (8010d5c <_tx_thread_suspend+0xdc>)
 8010cf0:	6013      	str	r3, [r2, #0]
 8010cf2:	6a3b      	ldr	r3, [r7, #32]
 8010cf4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f383 8810 	msr	PRIMASK, r3
}
 8010cfc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 f968 	bl	8010fd4 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8010d04:	2300      	movs	r3, #0
 8010d06:	e020      	b.n	8010d4a <_tx_thread_suspend+0xca>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d0c:	2b02      	cmp	r3, #2
 8010d0e:	d102      	bne.n	8010d16 <_tx_thread_suspend+0x96>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8010d10:	2314      	movs	r3, #20
 8010d12:	627b      	str	r3, [r7, #36]	; 0x24
 8010d14:	e012      	b.n	8010d3c <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d1a:	2b01      	cmp	r3, #1
 8010d1c:	d102      	bne.n	8010d24 <_tx_thread_suspend+0xa4>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8010d1e:	2314      	movs	r3, #20
 8010d20:	627b      	str	r3, [r7, #36]	; 0x24
 8010d22:	e00b      	b.n	8010d3c <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d28:	2b03      	cmp	r3, #3
 8010d2a:	d102      	bne.n	8010d32 <_tx_thread_suspend+0xb2>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8010d30:	e004      	b.n	8010d3c <_tx_thread_suspend+0xbc>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2201      	movs	r2, #1
 8010d36:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8010d3c:	6a3b      	ldr	r3, [r7, #32]
 8010d3e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	f383 8810 	msr	PRIMASK, r3
}
 8010d46:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8010d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3728      	adds	r7, #40	; 0x28
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	20008198 	.word	0x20008198
 8010d58:	2000008c 	.word	0x2000008c
 8010d5c:	20008230 	.word	0x20008230

08010d60 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8010d60:	b480      	push	{r7}
 8010d62:	b089      	sub	sp, #36	; 0x24
 8010d64:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010d66:	4b17      	ldr	r3, [pc, #92]	; (8010dc4 <_tx_thread_system_preempt_check+0x64>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d121      	bne.n	8010db6 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8010d72:	4b15      	ldr	r3, [pc, #84]	; (8010dc8 <_tx_thread_system_preempt_check+0x68>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8010d78:	4b14      	ldr	r3, [pc, #80]	; (8010dcc <_tx_thread_system_preempt_check+0x6c>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8010d7e:	69ba      	ldr	r2, [r7, #24]
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d017      	beq.n	8010db6 <_tx_thread_system_preempt_check+0x56>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010d86:	4b12      	ldr	r3, [pc, #72]	; (8010dd0 <_tx_thread_system_preempt_check+0x70>)
 8010d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d8c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010d8e:	f3ef 8305 	mrs	r3, IPSR
 8010d92:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8010d94:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d10c      	bne.n	8010db4 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8010d9e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8010da0:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 8010da2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010da4:	b662      	cpsie	i
}
 8010da6:	bf00      	nop
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f383 8810 	msr	PRIMASK, r3
}
 8010db2:	bf00      	nop
}
 8010db4:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8010db6:	bf00      	nop
 8010db8:	3724      	adds	r7, #36	; 0x24
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc0:	4770      	bx	lr
 8010dc2:	bf00      	nop
 8010dc4:	20008230 	.word	0x20008230
 8010dc8:	20008198 	.word	0x20008198
 8010dcc:	2000819c 	.word	0x2000819c
 8010dd0:	e000ed04 	.word	0xe000ed04

08010dd4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b096      	sub	sp, #88	; 0x58
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8010de0:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8010de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8010de4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8010de6:	b672      	cpsid	i
    return(int_posture);
 8010de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8010dea:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d005      	beq.n	8010e00 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	334c      	adds	r3, #76	; 0x4c
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f000 fd13 	bl	8011824 <_tx_timer_system_deactivate>
 8010dfe:	e002      	b.n	8010e06 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2200      	movs	r2, #0
 8010e04:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8010e06:	4b6c      	ldr	r3, [pc, #432]	; (8010fb8 <_tx_thread_system_resume+0x1e4>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	3b01      	subs	r3, #1
 8010e0c:	4a6a      	ldr	r2, [pc, #424]	; (8010fb8 <_tx_thread_system_resume+0x1e4>)
 8010e0e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	f040 8083 	bne.w	8010f20 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f000 8097 	beq.w	8010f52 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d172      	bne.n	8010f12 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e36:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8010e38:	4a60      	ldr	r2, [pc, #384]	; (8010fbc <_tx_thread_system_resume+0x1e8>)
 8010e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e40:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8010e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d154      	bne.n	8010ef2 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8010e48:	495c      	ldr	r1, [pc, #368]	; (8010fbc <_tx_thread_system_resume+0x1e8>)
 8010e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	687a      	ldr	r2, [r7, #4]
 8010e56:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8010e5e:	2201      	movs	r2, #1
 8010e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e62:	fa02 f303 	lsl.w	r3, r2, r3
 8010e66:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8010e68:	4b55      	ldr	r3, [pc, #340]	; (8010fc0 <_tx_thread_system_resume+0x1ec>)
 8010e6a:	681a      	ldr	r2, [r3, #0]
 8010e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	4a53      	ldr	r2, [pc, #332]	; (8010fc0 <_tx_thread_system_resume+0x1ec>)
 8010e72:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8010e74:	4b53      	ldr	r3, [pc, #332]	; (8010fc4 <_tx_thread_system_resume+0x1f0>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d269      	bcs.n	8010f52 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8010e7e:	4a51      	ldr	r2, [pc, #324]	; (8010fc4 <_tx_thread_system_resume+0x1f0>)
 8010e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e82:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8010e84:	4b50      	ldr	r3, [pc, #320]	; (8010fc8 <_tx_thread_system_resume+0x1f4>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8010e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d103      	bne.n	8010e98 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8010e90:	4a4d      	ldr	r2, [pc, #308]	; (8010fc8 <_tx_thread_system_resume+0x1f4>)
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6013      	str	r3, [r2, #0]
 8010e96:	e05c      	b.n	8010f52 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8010e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d257      	bcs.n	8010f52 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8010ea2:	4a49      	ldr	r2, [pc, #292]	; (8010fc8 <_tx_thread_system_resume+0x1f4>)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6013      	str	r3, [r2, #0]
 8010ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eae:	f383 8810 	msr	PRIMASK, r3
}
 8010eb2:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010eb4:	4b40      	ldr	r3, [pc, #256]	; (8010fb8 <_tx_thread_system_resume+0x1e4>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8010eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d174      	bne.n	8010faa <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010ec0:	4b42      	ldr	r3, [pc, #264]	; (8010fcc <_tx_thread_system_resume+0x1f8>)
 8010ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ec6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010ec8:	f3ef 8305 	mrs	r3, IPSR
 8010ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8010ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d10c      	bne.n	8010eee <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8010ed8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8010edc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010ede:	b662      	cpsie	i
}
 8010ee0:	bf00      	nop
 8010ee2:	6a3b      	ldr	r3, [r7, #32]
 8010ee4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ee6:	69fb      	ldr	r3, [r7, #28]
 8010ee8:	f383 8810 	msr	PRIMASK, r3
}
 8010eec:	bf00      	nop
}
 8010eee:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8010ef0:	e05b      	b.n	8010faa <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8010ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ef6:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8010ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8010efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f08:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f0e:	621a      	str	r2, [r3, #32]
 8010f10:	e01f      	b.n	8010f52 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2200      	movs	r2, #0
 8010f16:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2203      	movs	r2, #3
 8010f1c:	631a      	str	r2, [r3, #48]	; 0x30
 8010f1e:	e018      	b.n	8010f52 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f24:	2b01      	cmp	r3, #1
 8010f26:	d014      	beq.n	8010f52 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f2c:	2b02      	cmp	r3, #2
 8010f2e:	d010      	beq.n	8010f52 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d106      	bne.n	8010f46 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	631a      	str	r2, [r3, #48]	; 0x30
 8010f44:	e005      	b.n	8010f52 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2203      	movs	r2, #3
 8010f50:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8010f52:	4b1f      	ldr	r3, [pc, #124]	; (8010fd0 <_tx_thread_system_resume+0x1fc>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f5a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f5c:	69bb      	ldr	r3, [r7, #24]
 8010f5e:	f383 8810 	msr	PRIMASK, r3
}
 8010f62:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8010f64:	4b18      	ldr	r3, [pc, #96]	; (8010fc8 <_tx_thread_system_resume+0x1f4>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d020      	beq.n	8010fb0 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010f6e:	4b12      	ldr	r3, [pc, #72]	; (8010fb8 <_tx_thread_system_resume+0x1e4>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8010f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d11a      	bne.n	8010fb0 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010f7a:	4b14      	ldr	r3, [pc, #80]	; (8010fcc <_tx_thread_system_resume+0x1f8>)
 8010f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f80:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010f82:	f3ef 8305 	mrs	r3, IPSR
 8010f86:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010f88:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d10f      	bne.n	8010fae <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8010f92:	613b      	str	r3, [r7, #16]
    return(posture);
 8010f94:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8010f96:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010f98:	b662      	cpsie	i
}
 8010f9a:	bf00      	nop
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	f383 8810 	msr	PRIMASK, r3
}
 8010fa6:	bf00      	nop
}
 8010fa8:	e001      	b.n	8010fae <_tx_thread_system_resume+0x1da>
                                return;
 8010faa:	bf00      	nop
 8010fac:	e000      	b.n	8010fb0 <_tx_thread_system_resume+0x1dc>
 8010fae:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8010fb0:	3758      	adds	r7, #88	; 0x58
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	20008230 	.word	0x20008230
 8010fbc:	200081b0 	.word	0x200081b0
 8010fc0:	200081a8 	.word	0x200081a8
 8010fc4:	200081ac 	.word	0x200081ac
 8010fc8:	2000819c 	.word	0x2000819c
 8010fcc:	e000ed04 	.word	0xe000ed04
 8010fd0:	20008198 	.word	0x20008198

08010fd4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b09e      	sub	sp, #120	; 0x78
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8010fdc:	4b81      	ldr	r3, [pc, #516]	; (80111e4 <_tx_thread_system_suspend+0x210>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8010fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8010fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8010fea:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8010fec:	b672      	cpsid	i
    return(int_posture);
 8010fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8010ff0:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8010ff2:	687a      	ldr	r2, [r7, #4]
 8010ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d112      	bne.n	8011020 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ffe:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8011000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011002:	2b00      	cmp	r3, #0
 8011004:	d008      	beq.n	8011018 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8011006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801100c:	d004      	beq.n	8011018 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	334c      	adds	r3, #76	; 0x4c
 8011012:	4618      	mov	r0, r3
 8011014:	f000 fba4 	bl	8011760 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	69db      	ldr	r3, [r3, #28]
 801101c:	4a72      	ldr	r2, [pc, #456]	; (80111e8 <_tx_thread_system_suspend+0x214>)
 801101e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8011020:	4b72      	ldr	r3, [pc, #456]	; (80111ec <_tx_thread_system_suspend+0x218>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	3b01      	subs	r3, #1
 8011026:	4a71      	ldr	r2, [pc, #452]	; (80111ec <_tx_thread_system_suspend+0x218>)
 8011028:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801102e:	2b01      	cmp	r3, #1
 8011030:	f040 80a6 	bne.w	8011180 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2200      	movs	r2, #0
 8011038:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801103e:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6a1b      	ldr	r3, [r3, #32]
 8011044:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8011046:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	429a      	cmp	r2, r3
 801104c:	d015      	beq.n	801107a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011052:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8011054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011056:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011058:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 801105a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801105c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801105e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8011060:	4a63      	ldr	r2, [pc, #396]	; (80111f0 <_tx_thread_system_suspend+0x21c>)
 8011062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011068:	687a      	ldr	r2, [r7, #4]
 801106a:	429a      	cmp	r2, r3
 801106c:	d157      	bne.n	801111e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 801106e:	4960      	ldr	r1, [pc, #384]	; (80111f0 <_tx_thread_system_suspend+0x21c>)
 8011070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011072:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011078:	e051      	b.n	801111e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 801107a:	4a5d      	ldr	r2, [pc, #372]	; (80111f0 <_tx_thread_system_suspend+0x21c>)
 801107c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801107e:	2100      	movs	r1, #0
 8011080:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8011084:	2201      	movs	r2, #1
 8011086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011088:	fa02 f303 	lsl.w	r3, r2, r3
 801108c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801108e:	4b59      	ldr	r3, [pc, #356]	; (80111f4 <_tx_thread_system_suspend+0x220>)
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011094:	43db      	mvns	r3, r3
 8011096:	4013      	ands	r3, r2
 8011098:	4a56      	ldr	r2, [pc, #344]	; (80111f4 <_tx_thread_system_suspend+0x220>)
 801109a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 801109c:	2300      	movs	r3, #0
 801109e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80110a0:	4b54      	ldr	r3, [pc, #336]	; (80111f4 <_tx_thread_system_suspend+0x220>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80110a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d12b      	bne.n	8011104 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80110ac:	4b52      	ldr	r3, [pc, #328]	; (80111f8 <_tx_thread_system_suspend+0x224>)
 80110ae:	2220      	movs	r2, #32
 80110b0:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80110b2:	4b52      	ldr	r3, [pc, #328]	; (80111fc <_tx_thread_system_suspend+0x228>)
 80110b4:	2200      	movs	r2, #0
 80110b6:	601a      	str	r2, [r3, #0]
 80110b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80110ba:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80110bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110be:	f383 8810 	msr	PRIMASK, r3
}
 80110c2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80110c4:	4b49      	ldr	r3, [pc, #292]	; (80111ec <_tx_thread_system_suspend+0x218>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 80110ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	f040 8081 	bne.w	80111d4 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80110d2:	4b4b      	ldr	r3, [pc, #300]	; (8011200 <_tx_thread_system_suspend+0x22c>)
 80110d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110d8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80110da:	f3ef 8305 	mrs	r3, IPSR
 80110de:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 80110e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d10c      	bne.n	8011100 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80110e6:	f3ef 8310 	mrs	r3, PRIMASK
 80110ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 80110ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 80110ee:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80110f0:	b662      	cpsie	i
}
 80110f2:	bf00      	nop
 80110f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110f6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80110f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110fa:	f383 8810 	msr	PRIMASK, r3
}
 80110fe:	bf00      	nop
}
 8011100:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8011102:	e067      	b.n	80111d4 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8011104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011106:	fa93 f3a3 	rbit	r3, r3
 801110a:	65bb      	str	r3, [r7, #88]	; 0x58
 801110c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801110e:	fab3 f383 	clz	r3, r3
 8011112:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8011114:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011118:	4413      	add	r3, r2
 801111a:	4a37      	ldr	r2, [pc, #220]	; (80111f8 <_tx_thread_system_suspend+0x224>)
 801111c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 801111e:	4b37      	ldr	r3, [pc, #220]	; (80111fc <_tx_thread_system_suspend+0x228>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	687a      	ldr	r2, [r7, #4]
 8011124:	429a      	cmp	r2, r3
 8011126:	d12b      	bne.n	8011180 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011128:	4b33      	ldr	r3, [pc, #204]	; (80111f8 <_tx_thread_system_suspend+0x224>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	4a30      	ldr	r2, [pc, #192]	; (80111f0 <_tx_thread_system_suspend+0x21c>)
 801112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011132:	4a32      	ldr	r2, [pc, #200]	; (80111fc <_tx_thread_system_suspend+0x228>)
 8011134:	6013      	str	r3, [r2, #0]
 8011136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011138:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801113a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113c:	f383 8810 	msr	PRIMASK, r3
}
 8011140:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011142:	4b2a      	ldr	r3, [pc, #168]	; (80111ec <_tx_thread_system_suspend+0x218>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8011148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801114a:	2b00      	cmp	r3, #0
 801114c:	d144      	bne.n	80111d8 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801114e:	4b2c      	ldr	r3, [pc, #176]	; (8011200 <_tx_thread_system_suspend+0x22c>)
 8011150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011154:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011156:	f3ef 8305 	mrs	r3, IPSR
 801115a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 801115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 801115e:	2b00      	cmp	r3, #0
 8011160:	d10c      	bne.n	801117c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011162:	f3ef 8310 	mrs	r3, PRIMASK
 8011166:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8011168:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 801116a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 801116c:	b662      	cpsie	i
}
 801116e:	bf00      	nop
 8011170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011172:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011174:	6a3b      	ldr	r3, [r7, #32]
 8011176:	f383 8810 	msr	PRIMASK, r3
}
 801117a:	bf00      	nop
}
 801117c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 801117e:	e02b      	b.n	80111d8 <_tx_thread_system_suspend+0x204>
 8011180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011182:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	f383 8810 	msr	PRIMASK, r3
}
 801118a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801118c:	4b1b      	ldr	r3, [pc, #108]	; (80111fc <_tx_thread_system_suspend+0x228>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011192:	429a      	cmp	r2, r3
 8011194:	d022      	beq.n	80111dc <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011196:	4b15      	ldr	r3, [pc, #84]	; (80111ec <_tx_thread_system_suspend+0x218>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 801119c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d11c      	bne.n	80111dc <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80111a2:	4b17      	ldr	r3, [pc, #92]	; (8011200 <_tx_thread_system_suspend+0x22c>)
 80111a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111a8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80111aa:	f3ef 8305 	mrs	r3, IPSR
 80111ae:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80111b0:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d10c      	bne.n	80111d0 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80111b6:	f3ef 8310 	mrs	r3, PRIMASK
 80111ba:	617b      	str	r3, [r7, #20]
    return(posture);
 80111bc:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 80111be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80111c0:	b662      	cpsie	i
}
 80111c2:	bf00      	nop
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f383 8810 	msr	PRIMASK, r3
}
 80111ce:	bf00      	nop
}
 80111d0:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80111d2:	e003      	b.n	80111dc <_tx_thread_system_suspend+0x208>
                return;
 80111d4:	bf00      	nop
 80111d6:	e002      	b.n	80111de <_tx_thread_system_suspend+0x20a>
            return;
 80111d8:	bf00      	nop
 80111da:	e000      	b.n	80111de <_tx_thread_system_suspend+0x20a>
    return;
 80111dc:	bf00      	nop
}
 80111de:	3778      	adds	r7, #120	; 0x78
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	20008198 	.word	0x20008198
 80111e8:	2000879c 	.word	0x2000879c
 80111ec:	20008230 	.word	0x20008230
 80111f0:	200081b0 	.word	0x200081b0
 80111f4:	200081a8 	.word	0x200081a8
 80111f8:	200081ac 	.word	0x200081ac
 80111fc:	2000819c 	.word	0x2000819c
 8011200:	e000ed04 	.word	0xe000ed04

08011204 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8011204:	b480      	push	{r7}
 8011206:	b087      	sub	sp, #28
 8011208:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801120a:	4b21      	ldr	r3, [pc, #132]	; (8011290 <_tx_thread_time_slice+0x8c>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011210:	f3ef 8310 	mrs	r3, PRIMASK
 8011214:	60fb      	str	r3, [r7, #12]
    return(posture);
 8011216:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8011218:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 801121a:	b672      	cpsid	i
    return(int_posture);
 801121c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 801121e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8011220:	4b1c      	ldr	r3, [pc, #112]	; (8011294 <_tx_thread_time_slice+0x90>)
 8011222:	2200      	movs	r2, #0
 8011224:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d024      	beq.n	8011276 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011230:	2b00      	cmp	r3, #0
 8011232:	d120      	bne.n	8011276 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	69da      	ldr	r2, [r3, #28]
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	699b      	ldr	r3, [r3, #24]
 8011240:	4a15      	ldr	r2, [pc, #84]	; (8011298 <_tx_thread_time_slice+0x94>)
 8011242:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	6a1b      	ldr	r3, [r3, #32]
 8011248:	697a      	ldr	r2, [r7, #20]
 801124a:	429a      	cmp	r2, r3
 801124c:	d013      	beq.n	8011276 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011256:	429a      	cmp	r2, r3
 8011258:	d10d      	bne.n	8011276 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801125e:	697a      	ldr	r2, [r7, #20]
 8011260:	6a12      	ldr	r2, [r2, #32]
 8011262:	490e      	ldr	r1, [pc, #56]	; (801129c <_tx_thread_time_slice+0x98>)
 8011264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011268:	4b0d      	ldr	r3, [pc, #52]	; (80112a0 <_tx_thread_time_slice+0x9c>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4a0b      	ldr	r2, [pc, #44]	; (801129c <_tx_thread_time_slice+0x98>)
 801126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011272:	4a0c      	ldr	r2, [pc, #48]	; (80112a4 <_tx_thread_time_slice+0xa0>)
 8011274:	6013      	str	r3, [r2, #0]
 8011276:	693b      	ldr	r3, [r7, #16]
 8011278:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f383 8810 	msr	PRIMASK, r3
}
 8011280:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8011282:	bf00      	nop
 8011284:	371c      	adds	r7, #28
 8011286:	46bd      	mov	sp, r7
 8011288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop
 8011290:	20008198 	.word	0x20008198
 8011294:	20008240 	.word	0x20008240
 8011298:	2000879c 	.word	0x2000879c
 801129c:	200081b0 	.word	0x200081b0
 80112a0:	200081ac 	.word	0x200081ac
 80112a4:	2000819c 	.word	0x2000819c

080112a8 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b08a      	sub	sp, #40	; 0x28
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80112b4:	f3ef 8310 	mrs	r3, PRIMASK
 80112b8:	617b      	str	r3, [r7, #20]
    return(posture);
 80112ba:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80112bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80112be:	b672      	cpsid	i
    return(int_posture);
 80112c0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80112c2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80112c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112c8:	2b04      	cmp	r3, #4
 80112ca:	d10e      	bne.n	80112ea <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80112cc:	4b13      	ldr	r3, [pc, #76]	; (801131c <_tx_thread_timeout+0x74>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	3301      	adds	r3, #1
 80112d2:	4a12      	ldr	r2, [pc, #72]	; (801131c <_tx_thread_timeout+0x74>)
 80112d4:	6013      	str	r3, [r2, #0]
 80112d6:	6a3b      	ldr	r3, [r7, #32]
 80112d8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	f383 8810 	msr	PRIMASK, r3
}
 80112e0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80112e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112e4:	f7ff fd76 	bl	8010dd4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80112e8:	e013      	b.n	8011312 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80112ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112ee:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80112f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80112f6:	61bb      	str	r3, [r7, #24]
 80112f8:	6a3b      	ldr	r3, [r7, #32]
 80112fa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	f383 8810 	msr	PRIMASK, r3
}
 8011302:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8011304:	69fb      	ldr	r3, [r7, #28]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d003      	beq.n	8011312 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801130a:	69fb      	ldr	r3, [r7, #28]
 801130c:	69b9      	ldr	r1, [r7, #24]
 801130e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011310:	4798      	blx	r3
}
 8011312:	bf00      	nop
 8011314:	3728      	adds	r7, #40	; 0x28
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	20008230 	.word	0x20008230

08011320 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b088      	sub	sp, #32
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011328:	f3ef 8310 	mrs	r3, PRIMASK
 801132c:	617b      	str	r3, [r7, #20]
    return(posture);
 801132e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011330:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011332:	b672      	cpsid	i
    return(int_posture);
 8011334:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8011336:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6a1b      	ldr	r3, [r3, #32]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d002      	beq.n	8011346 <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 8011340:	2317      	movs	r3, #23
 8011342:	61fb      	str	r3, [r7, #28]
 8011344:	e00d      	b.n	8011362 <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	689b      	ldr	r3, [r3, #8]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d102      	bne.n	8011354 <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 801134e:	2317      	movs	r3, #23
 8011350:	61fb      	str	r3, [r7, #28]
 8011352:	e006      	b.n	8011362 <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	3308      	adds	r3, #8
 8011358:	4618      	mov	r0, r3
 801135a:	f000 fa01 	bl	8011760 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 801135e:	2300      	movs	r3, #0
 8011360:	61fb      	str	r3, [r7, #28]
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	f383 8810 	msr	PRIMASK, r3
}
 801136c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 801136e:	69fb      	ldr	r3, [r7, #28]
}
 8011370:	4618      	mov	r0, r3
 8011372:	3720      	adds	r7, #32
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b08a      	sub	sp, #40	; 0x28
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	607a      	str	r2, [r7, #4]
 8011384:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8011386:	222c      	movs	r2, #44	; 0x2c
 8011388:	2100      	movs	r1, #0
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f001 fd88 	bl	8012ea0 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	68ba      	ldr	r2, [r7, #8]
 8011394:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801139a:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113a0:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	687a      	ldr	r2, [r7, #4]
 80113a6:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	683a      	ldr	r2, [r7, #0]
 80113ac:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80113ae:	f3ef 8310 	mrs	r3, PRIMASK
 80113b2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80113b4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80113b6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80113b8:	b672      	cpsid	i
    return(int_posture);
 80113ba:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80113bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	4a1c      	ldr	r2, [pc, #112]	; (8011434 <_tx_timer_create+0xbc>)
 80113c2:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 80113c4:	4b1c      	ldr	r3, [pc, #112]	; (8011438 <_tx_timer_create+0xc0>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d109      	bne.n	80113e0 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 80113cc:	4a1b      	ldr	r2, [pc, #108]	; (801143c <_tx_timer_create+0xc4>)
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	68fa      	ldr	r2, [r7, #12]
 80113d6:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	68fa      	ldr	r2, [r7, #12]
 80113dc:	629a      	str	r2, [r3, #40]	; 0x28
 80113de:	e011      	b.n	8011404 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 80113e0:	4b16      	ldr	r3, [pc, #88]	; (801143c <_tx_timer_create+0xc4>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 80113e6:	6a3b      	ldr	r3, [r7, #32]
 80113e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ea:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 80113ec:	6a3b      	ldr	r3, [r7, #32]
 80113ee:	68fa      	ldr	r2, [r7, #12]
 80113f0:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	68fa      	ldr	r2, [r7, #12]
 80113f6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	69fa      	ldr	r2, [r7, #28]
 80113fc:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	6a3a      	ldr	r2, [r7, #32]
 8011402:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8011404:	4b0c      	ldr	r3, [pc, #48]	; (8011438 <_tx_timer_create+0xc0>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	3301      	adds	r3, #1
 801140a:	4a0b      	ldr	r2, [pc, #44]	; (8011438 <_tx_timer_create+0xc0>)
 801140c:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 801140e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011410:	2b01      	cmp	r3, #1
 8011412:	d104      	bne.n	801141e <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	3308      	adds	r3, #8
 8011418:	4618      	mov	r0, r3
 801141a:	f000 f9a1 	bl	8011760 <_tx_timer_system_activate>
 801141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011420:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	f383 8810 	msr	PRIMASK, r3
}
 8011428:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801142a:	2300      	movs	r3, #0
}
 801142c:	4618      	mov	r0, r3
 801142e:	3728      	adds	r7, #40	; 0x28
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}
 8011434:	4154494d 	.word	0x4154494d
 8011438:	200082d8 	.word	0x200082d8
 801143c:	200082d4 	.word	0x200082d4

08011440 <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 8011440:	b480      	push	{r7}
 8011442:	b08d      	sub	sp, #52	; 0x34
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;


    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	3308      	adds	r3, #8
 801144c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801144e:	f3ef 8310 	mrs	r3, PRIMASK
 8011452:	613b      	str	r3, [r7, #16]
    return(posture);
 8011454:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8011456:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011458:	b672      	cpsid	i
    return(int_posture);
 801145a:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 801145c:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 801145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011460:	699b      	ldr	r3, [r3, #24]
 8011462:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 8011464:	69fb      	ldr	r3, [r7, #28]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d07f      	beq.n	801156a <_tx_timer_deactivate+0x12a>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 801146a:	2300      	movs	r3, #0
 801146c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 801146e:	4b45      	ldr	r3, [pc, #276]	; (8011584 <_tx_timer_deactivate+0x144>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	69fa      	ldr	r2, [r7, #28]
 8011474:	429a      	cmp	r2, r3
 8011476:	d306      	bcc.n	8011486 <_tx_timer_deactivate+0x46>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8011478:	4b43      	ldr	r3, [pc, #268]	; (8011588 <_tx_timer_deactivate+0x148>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	69fa      	ldr	r2, [r7, #28]
 801147e:	429a      	cmp	r2, r3
 8011480:	d201      	bcs.n	8011486 <_tx_timer_deactivate+0x46>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 8011482:	2301      	movs	r3, #1
 8011484:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 8011486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011488:	2b01      	cmp	r3, #1
 801148a:	d12e      	bne.n	80114ea <_tx_timer_deactivate+0xaa>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 801148c:	4b3f      	ldr	r3, [pc, #252]	; (801158c <_tx_timer_deactivate+0x14c>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	69fa      	ldr	r2, [r7, #28]
 8011492:	429a      	cmp	r2, r3
 8011494:	d307      	bcc.n	80114a6 <_tx_timer_deactivate+0x66>
            {

                /* Calculate ticks left to expiration - just the difference between this
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 8011496:	4b3d      	ldr	r3, [pc, #244]	; (801158c <_tx_timer_deactivate+0x14c>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	69fa      	ldr	r2, [r7, #28]
 801149c:	1ad3      	subs	r3, r2, r3
 801149e:	109b      	asrs	r3, r3, #2
 80114a0:	3301      	adds	r3, #1
 80114a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80114a4:	e010      	b.n	80114c8 <_tx_timer_deactivate+0x88>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 80114a6:	4b37      	ldr	r3, [pc, #220]	; (8011584 <_tx_timer_deactivate+0x144>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	69fa      	ldr	r2, [r7, #28]
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	109b      	asrs	r3, r3, #2
 80114b0:	62fb      	str	r3, [r7, #44]	; 0x2c

                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 80114b2:	4b35      	ldr	r3, [pc, #212]	; (8011588 <_tx_timer_deactivate+0x148>)
 80114b4:	681a      	ldr	r2, [r3, #0]
 80114b6:	4b35      	ldr	r3, [pc, #212]	; (801158c <_tx_timer_deactivate+0x14c>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	1ad3      	subs	r3, r2, r3
 80114bc:	109b      	asrs	r3, r3, #2
 80114be:	461a      	mov	r2, r3
 80114c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c2:	4413      	add	r3, r2
 80114c4:	3301      	adds	r3, #1
 80114c6:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80114c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	2b20      	cmp	r3, #32
 80114ce:	d908      	bls.n	80114e2 <_tx_timer_deactivate+0xa2>
            {

                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 80114d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d2:	681a      	ldr	r2, [r3, #0]
 80114d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d6:	4413      	add	r3, r2
 80114d8:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =
 80114dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114de:	601a      	str	r2, [r3, #0]
 80114e0:	e01c      	b.n	801151c <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 80114e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114e6:	601a      	str	r2, [r3, #0]
 80114e8:	e018      	b.n	801151c <_tx_timer_deactivate+0xdc>
        }
        else
        {

            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 80114ea:	4b29      	ldr	r3, [pc, #164]	; (8011590 <_tx_timer_deactivate+0x150>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d00f      	beq.n	8011514 <_tx_timer_deactivate+0xd4>
            {

                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80114f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2b20      	cmp	r3, #32
 80114fa:	d906      	bls.n	801150a <_tx_timer_deactivate+0xca>
                {

                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80114fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =
 8011504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011506:	601a      	str	r2, [r3, #0]
 8011508:	e008      	b.n	801151c <_tx_timer_deactivate+0xdc>
                }
                else
                {

                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 801150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150c:	685a      	ldr	r2, [r3, #4]
 801150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011510:	601a      	str	r2, [r3, #0]
 8011512:	e003      	b.n	801151c <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 8011514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011516:	685a      	ldr	r2, [r3, #4]
 8011518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 801151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151e:	691b      	ldr	r3, [r3, #16]
 8011520:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 8011522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	429a      	cmp	r2, r3
 8011528:	d108      	bne.n	801153c <_tx_timer_deactivate+0xfc>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 801152a:	69fb      	ldr	r3, [r7, #28]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011530:	429a      	cmp	r2, r3
 8011532:	d117      	bne.n	8011564 <_tx_timer_deactivate+0x124>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8011534:	69fb      	ldr	r3, [r7, #28]
 8011536:	2200      	movs	r2, #0
 8011538:	601a      	str	r2, [r3, #0]
 801153a:	e013      	b.n	8011564 <_tx_timer_deactivate+0x124>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 801153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153e:	695b      	ldr	r3, [r3, #20]
 8011540:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8011542:	69bb      	ldr	r3, [r7, #24]
 8011544:	697a      	ldr	r2, [r7, #20]
 8011546:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	69ba      	ldr	r2, [r7, #24]
 801154c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 801154e:	69fb      	ldr	r3, [r7, #28]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011554:	429a      	cmp	r2, r3
 8011556:	d105      	bne.n	8011564 <_tx_timer_deactivate+0x124>
            {

                /* Update the next timer in the list with the list head
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8011558:	69bb      	ldr	r3, [r7, #24]
 801155a:	69fa      	ldr	r2, [r7, #28]
 801155c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	69ba      	ldr	r2, [r7, #24]
 8011562:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8011564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011566:	2200      	movs	r2, #0
 8011568:	619a      	str	r2, [r3, #24]
 801156a:	6a3b      	ldr	r3, [r7, #32]
 801156c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	f383 8810 	msr	PRIMASK, r3
}
 8011574:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011576:	2300      	movs	r3, #0
}
 8011578:	4618      	mov	r0, r3
 801157a:	3734      	adds	r7, #52	; 0x34
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr
 8011584:	200082c4 	.word	0x200082c4
 8011588:	200082c8 	.word	0x200082c8
 801158c:	200082cc 	.word	0x200082cc
 8011590:	200082dc 	.word	0x200082dc

08011594 <_tx_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b088      	sub	sp, #32
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801159c:	f3ef 8310 	mrs	r3, PRIMASK
 80115a0:	613b      	str	r3, [r7, #16]
    return(posture);
 80115a2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80115a4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80115a6:	b672      	cpsid	i
    return(int_posture);
 80115a8:	68fb      	ldr	r3, [r7, #12]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE
 80115aa:	61fb      	str	r3, [r7, #28]

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6a1b      	ldr	r3, [r3, #32]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d004      	beq.n	80115be <_tx_timer_delete+0x2a>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	3308      	adds	r3, #8
 80115b8:	4618      	mov	r0, r3
 80115ba:	f000 f933 	bl	8011824 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_TIMER_DELETE_INSERT

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2200      	movs	r2, #0
 80115c2:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 80115c4:	4b15      	ldr	r3, [pc, #84]	; (801161c <_tx_timer_delete+0x88>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	3b01      	subs	r3, #1
 80115ca:	4a14      	ldr	r2, [pc, #80]	; (801161c <_tx_timer_delete+0x88>)
 80115cc:	6013      	str	r3, [r2, #0]

    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 80115ce:	4b13      	ldr	r3, [pc, #76]	; (801161c <_tx_timer_delete+0x88>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d103      	bne.n	80115de <_tx_timer_delete+0x4a>
    {

        /* Only created timer, just set the created list to NULL.  */
        _tx_timer_created_ptr =  TX_NULL;
 80115d6:	4b12      	ldr	r3, [pc, #72]	; (8011620 <_tx_timer_delete+0x8c>)
 80115d8:	2200      	movs	r2, #0
 80115da:	601a      	str	r2, [r3, #0]
 80115dc:	e013      	b.n	8011606 <_tx_timer_delete+0x72>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_timer =                               timer_ptr -> tx_timer_created_next;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115e2:	61bb      	str	r3, [r7, #24]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115e8:	617b      	str	r3, [r7, #20]
        next_timer -> tx_timer_created_previous =  previous_timer;
 80115ea:	69bb      	ldr	r3, [r7, #24]
 80115ec:	697a      	ldr	r2, [r7, #20]
 80115ee:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =  next_timer;
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	69ba      	ldr	r2, [r7, #24]
 80115f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 80115f6:	4b0a      	ldr	r3, [pc, #40]	; (8011620 <_tx_timer_delete+0x8c>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	687a      	ldr	r2, [r7, #4]
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d102      	bne.n	8011606 <_tx_timer_delete+0x72>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 8011600:	4a07      	ldr	r2, [pc, #28]	; (8011620 <_tx_timer_delete+0x8c>)
 8011602:	69bb      	ldr	r3, [r7, #24]
 8011604:	6013      	str	r3, [r2, #0]
 8011606:	69fb      	ldr	r3, [r7, #28]
 8011608:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	f383 8810 	msr	PRIMASK, r3
}
 8011610:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011612:	2300      	movs	r3, #0
}
 8011614:	4618      	mov	r0, r3
 8011616:	3720      	adds	r7, #32
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	200082d8 	.word	0x200082d8
 8011620:	200082d4 	.word	0x200082d4

08011624 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801162a:	f3ef 8310 	mrs	r3, PRIMASK
 801162e:	607b      	str	r3, [r7, #4]
    return(posture);
 8011630:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8011632:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011634:	b672      	cpsid	i
    return(int_posture);
 8011636:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8011638:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 801163a:	4b09      	ldr	r3, [pc, #36]	; (8011660 <_tx_timer_expiration_process+0x3c>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	3301      	adds	r3, #1
 8011640:	4a07      	ldr	r2, [pc, #28]	; (8011660 <_tx_timer_expiration_process+0x3c>)
 8011642:	6013      	str	r3, [r2, #0]
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	f383 8810 	msr	PRIMASK, r3
}
 801164e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8011650:	4804      	ldr	r0, [pc, #16]	; (8011664 <_tx_timer_expiration_process+0x40>)
 8011652:	f7ff fbbf 	bl	8010dd4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011656:	bf00      	nop
 8011658:	3710      	adds	r7, #16
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	20008230 	.word	0x20008230
 8011664:	200082e0 	.word	0x200082e0

08011668 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8011668:	b590      	push	{r4, r7, lr}
 801166a:	b089      	sub	sp, #36	; 0x24
 801166c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801166e:	4b28      	ldr	r3, [pc, #160]	; (8011710 <_tx_timer_initialize+0xa8>)
 8011670:	2200      	movs	r2, #0
 8011672:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8011674:	4b27      	ldr	r3, [pc, #156]	; (8011714 <_tx_timer_initialize+0xac>)
 8011676:	2200      	movs	r2, #0
 8011678:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801167a:	4b27      	ldr	r3, [pc, #156]	; (8011718 <_tx_timer_initialize+0xb0>)
 801167c:	2200      	movs	r2, #0
 801167e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8011680:	4b26      	ldr	r3, [pc, #152]	; (801171c <_tx_timer_initialize+0xb4>)
 8011682:	2200      	movs	r2, #0
 8011684:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8011686:	4b26      	ldr	r3, [pc, #152]	; (8011720 <_tx_timer_initialize+0xb8>)
 8011688:	2200      	movs	r2, #0
 801168a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801168c:	2280      	movs	r2, #128	; 0x80
 801168e:	2100      	movs	r1, #0
 8011690:	4824      	ldr	r0, [pc, #144]	; (8011724 <_tx_timer_initialize+0xbc>)
 8011692:	f001 fc05 	bl	8012ea0 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8011696:	4b24      	ldr	r3, [pc, #144]	; (8011728 <_tx_timer_initialize+0xc0>)
 8011698:	4a22      	ldr	r2, [pc, #136]	; (8011724 <_tx_timer_initialize+0xbc>)
 801169a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 801169c:	4b23      	ldr	r3, [pc, #140]	; (801172c <_tx_timer_initialize+0xc4>)
 801169e:	4a21      	ldr	r2, [pc, #132]	; (8011724 <_tx_timer_initialize+0xbc>)
 80116a0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80116a2:	4b23      	ldr	r3, [pc, #140]	; (8011730 <_tx_timer_initialize+0xc8>)
 80116a4:	4a23      	ldr	r2, [pc, #140]	; (8011734 <_tx_timer_initialize+0xcc>)
 80116a6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80116a8:	4b21      	ldr	r3, [pc, #132]	; (8011730 <_tx_timer_initialize+0xc8>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	3304      	adds	r3, #4
 80116ae:	4a20      	ldr	r2, [pc, #128]	; (8011730 <_tx_timer_initialize+0xc8>)
 80116b0:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80116b2:	4b21      	ldr	r3, [pc, #132]	; (8011738 <_tx_timer_initialize+0xd0>)
 80116b4:	4a21      	ldr	r2, [pc, #132]	; (801173c <_tx_timer_initialize+0xd4>)
 80116b6:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80116b8:	4b21      	ldr	r3, [pc, #132]	; (8011740 <_tx_timer_initialize+0xd8>)
 80116ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80116be:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80116c0:	4b20      	ldr	r3, [pc, #128]	; (8011744 <_tx_timer_initialize+0xdc>)
 80116c2:	2200      	movs	r2, #0
 80116c4:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80116c6:	4b1c      	ldr	r3, [pc, #112]	; (8011738 <_tx_timer_initialize+0xd0>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	4a1d      	ldr	r2, [pc, #116]	; (8011740 <_tx_timer_initialize+0xd8>)
 80116cc:	6812      	ldr	r2, [r2, #0]
 80116ce:	491d      	ldr	r1, [pc, #116]	; (8011744 <_tx_timer_initialize+0xdc>)
 80116d0:	6809      	ldr	r1, [r1, #0]
 80116d2:	481c      	ldr	r0, [pc, #112]	; (8011744 <_tx_timer_initialize+0xdc>)
 80116d4:	6800      	ldr	r0, [r0, #0]
 80116d6:	2400      	movs	r4, #0
 80116d8:	9405      	str	r4, [sp, #20]
 80116da:	2400      	movs	r4, #0
 80116dc:	9404      	str	r4, [sp, #16]
 80116de:	9003      	str	r0, [sp, #12]
 80116e0:	9102      	str	r1, [sp, #8]
 80116e2:	9201      	str	r2, [sp, #4]
 80116e4:	9300      	str	r3, [sp, #0]
 80116e6:	4b18      	ldr	r3, [pc, #96]	; (8011748 <_tx_timer_initialize+0xe0>)
 80116e8:	4a18      	ldr	r2, [pc, #96]	; (801174c <_tx_timer_initialize+0xe4>)
 80116ea:	4919      	ldr	r1, [pc, #100]	; (8011750 <_tx_timer_initialize+0xe8>)
 80116ec:	4819      	ldr	r0, [pc, #100]	; (8011754 <_tx_timer_initialize+0xec>)
 80116ee:	f7fe ff17 	bl	8010520 <_tx_thread_create>
 80116f2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d1e5      	bne.n	80116c6 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80116fa:	4b17      	ldr	r3, [pc, #92]	; (8011758 <_tx_timer_initialize+0xf0>)
 80116fc:	2200      	movs	r2, #0
 80116fe:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8011700:	4b16      	ldr	r3, [pc, #88]	; (801175c <_tx_timer_initialize+0xf4>)
 8011702:	2200      	movs	r2, #0
 8011704:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8011706:	bf00      	nop
 8011708:	370c      	adds	r7, #12
 801170a:	46bd      	mov	sp, r7
 801170c:	bd90      	pop	{r4, r7, pc}
 801170e:	bf00      	nop
 8011710:	2000823c 	.word	0x2000823c
 8011714:	2000879c 	.word	0x2000879c
 8011718:	20008240 	.word	0x20008240
 801171c:	200082d0 	.word	0x200082d0
 8011720:	200082dc 	.word	0x200082dc
 8011724:	20008244 	.word	0x20008244
 8011728:	200082c4 	.word	0x200082c4
 801172c:	200082cc 	.word	0x200082cc
 8011730:	200082c8 	.word	0x200082c8
 8011734:	200082c0 	.word	0x200082c0
 8011738:	20008390 	.word	0x20008390
 801173c:	2000839c 	.word	0x2000839c
 8011740:	20008394 	.word	0x20008394
 8011744:	20008398 	.word	0x20008398
 8011748:	4154494d 	.word	0x4154494d
 801174c:	08011895 	.word	0x08011895
 8011750:	080140d4 	.word	0x080140d4
 8011754:	200082e0 	.word	0x200082e0
 8011758:	200082d4 	.word	0x200082d4
 801175c:	200082d8 	.word	0x200082d8

08011760 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8011760:	b480      	push	{r7}
 8011762:	b089      	sub	sp, #36	; 0x24
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d04a      	beq.n	801180a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801177a:	d046      	beq.n	801180a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	699b      	ldr	r3, [r3, #24]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d142      	bne.n	801180a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	2b20      	cmp	r3, #32
 8011788:	d902      	bls.n	8011790 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801178a:	231f      	movs	r3, #31
 801178c:	61bb      	str	r3, [r7, #24]
 801178e:	e002      	b.n	8011796 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	3b01      	subs	r3, #1
 8011794:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8011796:	4b20      	ldr	r3, [pc, #128]	; (8011818 <_tx_timer_system_activate+0xb8>)
 8011798:	681a      	ldr	r2, [r3, #0]
 801179a:	69bb      	ldr	r3, [r7, #24]
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	4413      	add	r3, r2
 80117a0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80117a2:	4b1e      	ldr	r3, [pc, #120]	; (801181c <_tx_timer_system_activate+0xbc>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	69fa      	ldr	r2, [r7, #28]
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d30b      	bcc.n	80117c4 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80117ac:	4b1b      	ldr	r3, [pc, #108]	; (801181c <_tx_timer_system_activate+0xbc>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	69fa      	ldr	r2, [r7, #28]
 80117b2:	1ad3      	subs	r3, r2, r3
 80117b4:	109b      	asrs	r3, r3, #2
 80117b6:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80117b8:	4b19      	ldr	r3, [pc, #100]	; (8011820 <_tx_timer_system_activate+0xc0>)
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	693b      	ldr	r3, [r7, #16]
 80117be:	009b      	lsls	r3, r3, #2
 80117c0:	4413      	add	r3, r2
 80117c2:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d109      	bne.n	80117e0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	687a      	ldr	r2, [r7, #4]
 80117d0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80117d8:	69fb      	ldr	r3, [r7, #28]
 80117da:	687a      	ldr	r2, [r7, #4]
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	e011      	b.n	8011804 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	695b      	ldr	r3, [r3, #20]
 80117ea:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	687a      	ldr	r2, [r7, #4]
 80117f0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	687a      	ldr	r2, [r7, #4]
 80117f6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	68fa      	ldr	r2, [r7, #12]
 80117fc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	68ba      	ldr	r2, [r7, #8]
 8011802:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	69fa      	ldr	r2, [r7, #28]
 8011808:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 801180a:	bf00      	nop
 801180c:	3724      	adds	r7, #36	; 0x24
 801180e:	46bd      	mov	sp, r7
 8011810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011814:	4770      	bx	lr
 8011816:	bf00      	nop
 8011818:	200082cc 	.word	0x200082cc
 801181c:	200082c8 	.word	0x200082c8
 8011820:	200082c4 	.word	0x200082c4

08011824 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8011824:	b480      	push	{r7}
 8011826:	b087      	sub	sp, #28
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	699b      	ldr	r3, [r3, #24]
 8011830:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d026      	beq.n	8011886 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	691b      	ldr	r3, [r3, #16]
 801183c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801183e:	687a      	ldr	r2, [r7, #4]
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	429a      	cmp	r2, r3
 8011844:	d108      	bne.n	8011858 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	429a      	cmp	r2, r3
 801184e:	d117      	bne.n	8011880 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	2200      	movs	r2, #0
 8011854:	601a      	str	r2, [r3, #0]
 8011856:	e013      	b.n	8011880 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	695b      	ldr	r3, [r3, #20]
 801185c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	68fa      	ldr	r2, [r7, #12]
 8011862:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	693a      	ldr	r2, [r7, #16]
 8011868:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	429a      	cmp	r2, r3
 8011872:	d105      	bne.n	8011880 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	697a      	ldr	r2, [r7, #20]
 8011878:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	693a      	ldr	r2, [r7, #16]
 801187e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2200      	movs	r2, #0
 8011884:	619a      	str	r2, [r3, #24]
    }
}
 8011886:	bf00      	nop
 8011888:	371c      	adds	r7, #28
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr
	...

08011894 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b098      	sub	sp, #96	; 0x60
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 801189c:	2300      	movs	r3, #0
 801189e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	4a73      	ldr	r2, [pc, #460]	; (8011a70 <_tx_timer_thread_entry+0x1dc>)
 80118a4:	4293      	cmp	r3, r2
 80118a6:	f040 80de 	bne.w	8011a66 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80118aa:	f3ef 8310 	mrs	r3, PRIMASK
 80118ae:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80118b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80118b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80118b4:	b672      	cpsid	i
    return(int_posture);
 80118b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80118b8:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80118ba:	4b6e      	ldr	r3, [pc, #440]	; (8011a74 <_tx_timer_thread_entry+0x1e0>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d003      	beq.n	80118d0 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f107 020c 	add.w	r2, r7, #12
 80118ce:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80118d0:	4b68      	ldr	r3, [pc, #416]	; (8011a74 <_tx_timer_thread_entry+0x1e0>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2200      	movs	r2, #0
 80118d6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80118d8:	4b66      	ldr	r3, [pc, #408]	; (8011a74 <_tx_timer_thread_entry+0x1e0>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	3304      	adds	r3, #4
 80118de:	4a65      	ldr	r2, [pc, #404]	; (8011a74 <_tx_timer_thread_entry+0x1e0>)
 80118e0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80118e2:	4b64      	ldr	r3, [pc, #400]	; (8011a74 <_tx_timer_thread_entry+0x1e0>)
 80118e4:	681a      	ldr	r2, [r3, #0]
 80118e6:	4b64      	ldr	r3, [pc, #400]	; (8011a78 <_tx_timer_thread_entry+0x1e4>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d103      	bne.n	80118f6 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80118ee:	4b63      	ldr	r3, [pc, #396]	; (8011a7c <_tx_timer_thread_entry+0x1e8>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	4a60      	ldr	r2, [pc, #384]	; (8011a74 <_tx_timer_thread_entry+0x1e0>)
 80118f4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80118f6:	4b62      	ldr	r3, [pc, #392]	; (8011a80 <_tx_timer_thread_entry+0x1ec>)
 80118f8:	2200      	movs	r2, #0
 80118fa:	601a      	str	r2, [r3, #0]
 80118fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118fe:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011902:	f383 8810 	msr	PRIMASK, r3
}
 8011906:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011908:	f3ef 8310 	mrs	r3, PRIMASK
 801190c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801190e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8011910:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8011912:	b672      	cpsid	i
    return(int_posture);
 8011914:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8011916:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8011918:	e07f      	b.n	8011a1a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	691b      	ldr	r3, [r3, #16]
 8011922:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8011924:	2300      	movs	r3, #0
 8011926:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8011928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801192a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801192c:	429a      	cmp	r2, r3
 801192e:	d102      	bne.n	8011936 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8011930:	2300      	movs	r3, #0
 8011932:	60fb      	str	r3, [r7, #12]
 8011934:	e00e      	b.n	8011954 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8011936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011938:	695b      	ldr	r3, [r3, #20]
 801193a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801193c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801193e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011940:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8011942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011946:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8011948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801194a:	f107 020c 	add.w	r2, r7, #12
 801194e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8011950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011952:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8011954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	2b20      	cmp	r3, #32
 801195a:	d911      	bls.n	8011980 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 801195c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8011964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011966:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8011968:	2300      	movs	r3, #0
 801196a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801196c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801196e:	f107 0208 	add.w	r2, r7, #8
 8011972:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8011974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011978:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801197a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801197c:	60bb      	str	r3, [r7, #8]
 801197e:	e01a      	b.n	80119b6 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8011980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011982:	689b      	ldr	r3, [r3, #8]
 8011984:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8011986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 801198c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801198e:	685a      	ldr	r2, [r3, #4]
 8011990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011992:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8011994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d009      	beq.n	80119b0 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801199c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801199e:	f107 0208 	add.w	r2, r7, #8
 80119a2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80119a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119a8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80119aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119ac:	60bb      	str	r3, [r7, #8]
 80119ae:	e002      	b.n	80119b6 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80119b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119b2:	2200      	movs	r2, #0
 80119b4:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80119b6:	4a33      	ldr	r2, [pc, #204]	; (8011a84 <_tx_timer_thread_entry+0x1f0>)
 80119b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119ba:	6013      	str	r3, [r2, #0]
 80119bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119be:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80119c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c2:	f383 8810 	msr	PRIMASK, r3
}
 80119c6:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80119c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d002      	beq.n	80119d4 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80119ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80119d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80119d2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80119d4:	f3ef 8310 	mrs	r3, PRIMASK
 80119d8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80119da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80119dc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80119de:	b672      	cpsid	i
    return(int_posture);
 80119e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80119e2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80119e4:	4b27      	ldr	r3, [pc, #156]	; (8011a84 <_tx_timer_thread_entry+0x1f0>)
 80119e6:	2200      	movs	r2, #0
 80119e8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d105      	bne.n	80119fe <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80119f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119f4:	2200      	movs	r2, #0
 80119f6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80119f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80119fa:	f7ff feb1 	bl	8011760 <_tx_timer_system_activate>
 80119fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a00:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a02:	69bb      	ldr	r3, [r7, #24]
 8011a04:	f383 8810 	msr	PRIMASK, r3
}
 8011a08:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8011a0e:	623b      	str	r3, [r7, #32]
    return(posture);
 8011a10:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011a12:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011a14:	b672      	cpsid	i
    return(int_posture);
 8011a16:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8011a18:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	f47f af7c 	bne.w	801191a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8011a22:	4b17      	ldr	r3, [pc, #92]	; (8011a80 <_tx_timer_thread_entry+0x1ec>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d116      	bne.n	8011a58 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8011a2a:	4b17      	ldr	r3, [pc, #92]	; (8011a88 <_tx_timer_thread_entry+0x1f4>)
 8011a2c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a30:	2203      	movs	r2, #3
 8011a32:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a36:	2201      	movs	r2, #1
 8011a38:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8011a3a:	4b14      	ldr	r3, [pc, #80]	; (8011a8c <_tx_timer_thread_entry+0x1f8>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	4a12      	ldr	r2, [pc, #72]	; (8011a8c <_tx_timer_thread_entry+0x1f8>)
 8011a42:	6013      	str	r3, [r2, #0]
 8011a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a46:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a48:	697b      	ldr	r3, [r7, #20]
 8011a4a:	f383 8810 	msr	PRIMASK, r3
}
 8011a4e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8011a50:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011a52:	f7ff fabf 	bl	8010fd4 <_tx_thread_system_suspend>
 8011a56:	e728      	b.n	80118aa <_tx_timer_thread_entry+0x16>
 8011a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a5a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	f383 8810 	msr	PRIMASK, r3
}
 8011a62:	bf00      	nop
            TX_DISABLE
 8011a64:	e721      	b.n	80118aa <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8011a66:	bf00      	nop
 8011a68:	3760      	adds	r7, #96	; 0x60
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	4154494d 	.word	0x4154494d
 8011a74:	200082cc 	.word	0x200082cc
 8011a78:	200082c8 	.word	0x200082c8
 8011a7c:	200082c4 	.word	0x200082c4
 8011a80:	200082d0 	.word	0x200082d0
 8011a84:	200082dc 	.word	0x200082dc
 8011a88:	200082e0 	.word	0x200082e0
 8011a8c:	20008230 	.word	0x20008230

08011a90 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b08a      	sub	sp, #40	; 0x28
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	60f8      	str	r0, [r7, #12]
 8011a98:	60b9      	str	r1, [r7, #8]
 8011a9a:	607a      	str	r2, [r7, #4]
 8011a9c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d102      	bne.n	8011aae <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011aa8:	2302      	movs	r3, #2
 8011aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8011aac:	e029      	b.n	8011b02 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	4a2d      	ldr	r2, [pc, #180]	; (8011b68 <_txe_byte_allocate+0xd8>)
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d002      	beq.n	8011abe <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011ab8:	2302      	movs	r3, #2
 8011aba:	627b      	str	r3, [r7, #36]	; 0x24
 8011abc:	e021      	b.n	8011b02 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d102      	bne.n	8011aca <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8011ac4:	2303      	movs	r3, #3
 8011ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8011ac8:	e01b      	b.n	8011b02 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d102      	bne.n	8011ad6 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8011ad0:	2305      	movs	r3, #5
 8011ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8011ad4:	e015      	b.n	8011b02 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	69db      	ldr	r3, [r3, #28]
 8011ada:	687a      	ldr	r2, [r7, #4]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d902      	bls.n	8011ae6 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8011ae0:	2305      	movs	r3, #5
 8011ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8011ae4:	e00d      	b.n	8011b02 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d00a      	beq.n	8011b02 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011aec:	f3ef 8305 	mrs	r3, IPSR
 8011af0:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8011af2:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011af4:	4b1d      	ldr	r3, [pc, #116]	; (8011b6c <_txe_byte_allocate+0xdc>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4313      	orrs	r3, r2
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d001      	beq.n	8011b02 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8011afe:	2304      	movs	r3, #4
 8011b00:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8011b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d108      	bne.n	8011b1a <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8011b08:	4b19      	ldr	r3, [pc, #100]	; (8011b70 <_txe_byte_allocate+0xe0>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8011b0e:	6a3b      	ldr	r3, [r7, #32]
 8011b10:	4a18      	ldr	r2, [pc, #96]	; (8011b74 <_txe_byte_allocate+0xe4>)
 8011b12:	4293      	cmp	r3, r2
 8011b14:	d101      	bne.n	8011b1a <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8011b16:	2313      	movs	r3, #19
 8011b18:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8011b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d114      	bne.n	8011b4a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011b20:	f3ef 8305 	mrs	r3, IPSR
 8011b24:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011b26:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011b28:	4b10      	ldr	r3, [pc, #64]	; (8011b6c <_txe_byte_allocate+0xdc>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	4313      	orrs	r3, r2
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d00b      	beq.n	8011b4a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011b32:	f3ef 8305 	mrs	r3, IPSR
 8011b36:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011b38:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011b3a:	4b0c      	ldr	r3, [pc, #48]	; (8011b6c <_txe_byte_allocate+0xdc>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	4313      	orrs	r3, r2
 8011b40:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011b44:	d201      	bcs.n	8011b4a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011b46:	2313      	movs	r3, #19
 8011b48:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d106      	bne.n	8011b5e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	687a      	ldr	r2, [r7, #4]
 8011b54:	68b9      	ldr	r1, [r7, #8]
 8011b56:	68f8      	ldr	r0, [r7, #12]
 8011b58:	f7fc fdac 	bl	800e6b4 <_tx_byte_allocate>
 8011b5c:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8011b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3728      	adds	r7, #40	; 0x28
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	42595445 	.word	0x42595445
 8011b6c:	2000008c 	.word	0x2000008c
 8011b70:	20008198 	.word	0x20008198
 8011b74:	200082e0 	.word	0x200082e0

08011b78 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b092      	sub	sp, #72	; 0x48
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
 8011b84:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011b86:	2300      	movs	r3, #0
 8011b88:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d102      	bne.n	8011b96 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011b90:	2302      	movs	r3, #2
 8011b92:	647b      	str	r3, [r7, #68]	; 0x44
 8011b94:	e075      	b.n	8011c82 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8011b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b98:	2b34      	cmp	r3, #52	; 0x34
 8011b9a:	d002      	beq.n	8011ba2 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011b9c:	2302      	movs	r3, #2
 8011b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8011ba0:	e06f      	b.n	8011c82 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8011ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011baa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011bac:	b672      	cpsid	i
    return(int_posture);
 8011bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011bb0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8011bb2:	4b3b      	ldr	r3, [pc, #236]	; (8011ca0 <_txe_byte_pool_create+0x128>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	3301      	adds	r3, #1
 8011bb8:	4a39      	ldr	r2, [pc, #228]	; (8011ca0 <_txe_byte_pool_create+0x128>)
 8011bba:	6013      	str	r3, [r2, #0]
 8011bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bbe:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc2:	f383 8810 	msr	PRIMASK, r3
}
 8011bc6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8011bc8:	4b36      	ldr	r3, [pc, #216]	; (8011ca4 <_txe_byte_pool_create+0x12c>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8011bce:	2300      	movs	r3, #0
 8011bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8011bd2:	e009      	b.n	8011be8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d00b      	beq.n	8011bf4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8011bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8011be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011be4:	3301      	adds	r3, #1
 8011be6:	643b      	str	r3, [r7, #64]	; 0x40
 8011be8:	4b2f      	ldr	r3, [pc, #188]	; (8011ca8 <_txe_byte_pool_create+0x130>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d3f0      	bcc.n	8011bd4 <_txe_byte_pool_create+0x5c>
 8011bf2:	e000      	b.n	8011bf6 <_txe_byte_pool_create+0x7e>
                break;
 8011bf4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8011bfa:	623b      	str	r3, [r7, #32]
    return(posture);
 8011bfc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011bfe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c00:	b672      	cpsid	i
    return(int_posture);
 8011c02:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011c04:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8011c06:	4b26      	ldr	r3, [pc, #152]	; (8011ca0 <_txe_byte_pool_create+0x128>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	3b01      	subs	r3, #1
 8011c0c:	4a24      	ldr	r2, [pc, #144]	; (8011ca0 <_txe_byte_pool_create+0x128>)
 8011c0e:	6013      	str	r3, [r2, #0]
 8011c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c12:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c16:	f383 8810 	msr	PRIMASK, r3
}
 8011c1a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011c1c:	f7ff f8a0 	bl	8010d60 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8011c20:	68fa      	ldr	r2, [r7, #12]
 8011c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c24:	429a      	cmp	r2, r3
 8011c26:	d102      	bne.n	8011c2e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8011c28:	2302      	movs	r3, #2
 8011c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8011c2c:	e029      	b.n	8011c82 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d102      	bne.n	8011c3a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8011c34:	2303      	movs	r3, #3
 8011c36:	647b      	str	r3, [r7, #68]	; 0x44
 8011c38:	e023      	b.n	8011c82 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	2b63      	cmp	r3, #99	; 0x63
 8011c3e:	d802      	bhi.n	8011c46 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8011c40:	2305      	movs	r3, #5
 8011c42:	647b      	str	r3, [r7, #68]	; 0x44
 8011c44:	e01d      	b.n	8011c82 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011c46:	4b19      	ldr	r3, [pc, #100]	; (8011cac <_txe_byte_pool_create+0x134>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8011c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c4e:	4a18      	ldr	r2, [pc, #96]	; (8011cb0 <_txe_byte_pool_create+0x138>)
 8011c50:	4293      	cmp	r3, r2
 8011c52:	d101      	bne.n	8011c58 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011c54:	2313      	movs	r3, #19
 8011c56:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c58:	f3ef 8305 	mrs	r3, IPSR
 8011c5c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011c5e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011c60:	4b14      	ldr	r3, [pc, #80]	; (8011cb4 <_txe_byte_pool_create+0x13c>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	4313      	orrs	r3, r2
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d00b      	beq.n	8011c82 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c6a:	f3ef 8305 	mrs	r3, IPSR
 8011c6e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011c70:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011c72:	4b10      	ldr	r3, [pc, #64]	; (8011cb4 <_txe_byte_pool_create+0x13c>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	4313      	orrs	r3, r2
 8011c78:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011c7c:	d201      	bcs.n	8011c82 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8011c7e:	2313      	movs	r3, #19
 8011c80:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d106      	bne.n	8011c96 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	687a      	ldr	r2, [r7, #4]
 8011c8c:	68b9      	ldr	r1, [r7, #8]
 8011c8e:	68f8      	ldr	r0, [r7, #12]
 8011c90:	f7fc fe52 	bl	800e938 <_tx_byte_pool_create>
 8011c94:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8011c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3748      	adds	r7, #72	; 0x48
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}
 8011ca0:	20008230 	.word	0x20008230
 8011ca4:	20008188 	.word	0x20008188
 8011ca8:	2000818c 	.word	0x2000818c
 8011cac:	20008198 	.word	0x20008198
 8011cb0:	200082e0 	.word	0x200082e0
 8011cb4:	2000008c 	.word	0x2000008c

08011cb8 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b092      	sub	sp, #72	; 0x48
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	60f8      	str	r0, [r7, #12]
 8011cc0:	60b9      	str	r1, [r7, #8]
 8011cc2:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d102      	bne.n	8011cd4 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8011cce:	2306      	movs	r3, #6
 8011cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8011cd2:	e069      	b.n	8011da8 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2b24      	cmp	r3, #36	; 0x24
 8011cd8:	d002      	beq.n	8011ce0 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8011cda:	2306      	movs	r3, #6
 8011cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8011cde:	e063      	b.n	8011da8 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8011ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011cea:	b672      	cpsid	i
    return(int_posture);
 8011cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011cee:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8011cf0:	4b34      	ldr	r3, [pc, #208]	; (8011dc4 <_txe_event_flags_create+0x10c>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	4a33      	ldr	r2, [pc, #204]	; (8011dc4 <_txe_event_flags_create+0x10c>)
 8011cf8:	6013      	str	r3, [r2, #0]
 8011cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d00:	f383 8810 	msr	PRIMASK, r3
}
 8011d04:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8011d06:	4b30      	ldr	r3, [pc, #192]	; (8011dc8 <_txe_event_flags_create+0x110>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8011d10:	e009      	b.n	8011d26 <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 8011d12:	68fa      	ldr	r2, [r7, #12]
 8011d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d00b      	beq.n	8011d32 <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8011d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d1c:	699b      	ldr	r3, [r3, #24]
 8011d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8011d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d22:	3301      	adds	r3, #1
 8011d24:	643b      	str	r3, [r7, #64]	; 0x40
 8011d26:	4b29      	ldr	r3, [pc, #164]	; (8011dcc <_txe_event_flags_create+0x114>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d3f0      	bcc.n	8011d12 <_txe_event_flags_create+0x5a>
 8011d30:	e000      	b.n	8011d34 <_txe_event_flags_create+0x7c>
                break;
 8011d32:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011d34:	f3ef 8310 	mrs	r3, PRIMASK
 8011d38:	623b      	str	r3, [r7, #32]
    return(posture);
 8011d3a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011d3c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d3e:	b672      	cpsid	i
    return(int_posture);
 8011d40:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011d42:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8011d44:	4b1f      	ldr	r3, [pc, #124]	; (8011dc4 <_txe_event_flags_create+0x10c>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	3b01      	subs	r3, #1
 8011d4a:	4a1e      	ldr	r2, [pc, #120]	; (8011dc4 <_txe_event_flags_create+0x10c>)
 8011d4c:	6013      	str	r3, [r2, #0]
 8011d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d50:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d54:	f383 8810 	msr	PRIMASK, r3
}
 8011d58:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011d5a:	f7ff f801 	bl	8010d60 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 8011d5e:	68fa      	ldr	r2, [r7, #12]
 8011d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d102      	bne.n	8011d6c <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 8011d66:	2306      	movs	r3, #6
 8011d68:	647b      	str	r3, [r7, #68]	; 0x44
 8011d6a:	e01d      	b.n	8011da8 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011d6c:	4b18      	ldr	r3, [pc, #96]	; (8011dd0 <_txe_event_flags_create+0x118>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8011d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d74:	4a17      	ldr	r2, [pc, #92]	; (8011dd4 <_txe_event_flags_create+0x11c>)
 8011d76:	4293      	cmp	r3, r2
 8011d78:	d101      	bne.n	8011d7e <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011d7a:	2313      	movs	r3, #19
 8011d7c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011d7e:	f3ef 8305 	mrs	r3, IPSR
 8011d82:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011d84:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011d86:	4b14      	ldr	r3, [pc, #80]	; (8011dd8 <_txe_event_flags_create+0x120>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	4313      	orrs	r3, r2
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d00b      	beq.n	8011da8 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011d90:	f3ef 8305 	mrs	r3, IPSR
 8011d94:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011d96:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011d98:	4b0f      	ldr	r3, [pc, #60]	; (8011dd8 <_txe_event_flags_create+0x120>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4313      	orrs	r3, r2
 8011d9e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011da2:	d201      	bcs.n	8011da8 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8011da4:	2313      	movs	r3, #19
 8011da6:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d104      	bne.n	8011db8 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8011dae:	68b9      	ldr	r1, [r7, #8]
 8011db0:	68f8      	ldr	r0, [r7, #12]
 8011db2:	f7fc ffeb 	bl	800ed8c <_tx_event_flags_create>
 8011db6:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8011db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3748      	adds	r7, #72	; 0x48
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
 8011dc2:	bf00      	nop
 8011dc4:	20008230 	.word	0x20008230
 8011dc8:	20008170 	.word	0x20008170
 8011dcc:	20008174 	.word	0x20008174
 8011dd0:	20008198 	.word	0x20008198
 8011dd4:	200082e0 	.word	0x200082e0
 8011dd8:	2000008c 	.word	0x2000008c

08011ddc <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b08a      	sub	sp, #40	; 0x28
 8011de0:	af02      	add	r7, sp, #8
 8011de2:	60f8      	str	r0, [r7, #12]
 8011de4:	60b9      	str	r1, [r7, #8]
 8011de6:	607a      	str	r2, [r7, #4]
 8011de8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011dea:	2300      	movs	r3, #0
 8011dec:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d102      	bne.n	8011dfa <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8011df4:	2306      	movs	r3, #6
 8011df6:	61fb      	str	r3, [r7, #28]
 8011df8:	e025      	b.n	8011e46 <_txe_event_flags_get+0x6a>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	4a1e      	ldr	r2, [pc, #120]	; (8011e78 <_txe_event_flags_get+0x9c>)
 8011e00:	4293      	cmp	r3, r2
 8011e02:	d002      	beq.n	8011e0a <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8011e04:	2306      	movs	r3, #6
 8011e06:	61fb      	str	r3, [r7, #28]
 8011e08:	e01d      	b.n	8011e46 <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d102      	bne.n	8011e16 <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8011e10:	2303      	movs	r3, #3
 8011e12:	61fb      	str	r3, [r7, #28]
 8011e14:	e017      	b.n	8011e46 <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d014      	beq.n	8011e46 <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011e1c:	f3ef 8305 	mrs	r3, IPSR
 8011e20:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011e22:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011e24:	4b15      	ldr	r3, [pc, #84]	; (8011e7c <_txe_event_flags_get+0xa0>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	4313      	orrs	r3, r2
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d002      	beq.n	8011e34 <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8011e2e:	2304      	movs	r3, #4
 8011e30:	61fb      	str	r3, [r7, #28]
 8011e32:	e008      	b.n	8011e46 <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8011e34:	4b12      	ldr	r3, [pc, #72]	; (8011e80 <_txe_event_flags_get+0xa4>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	4a11      	ldr	r2, [pc, #68]	; (8011e84 <_txe_event_flags_get+0xa8>)
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d101      	bne.n	8011e46 <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8011e42:	2304      	movs	r3, #4
 8011e44:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8011e46:	69fb      	ldr	r3, [r7, #28]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d104      	bne.n	8011e56 <_txe_event_flags_get+0x7a>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2b03      	cmp	r3, #3
 8011e50:	d901      	bls.n	8011e56 <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 8011e52:	2308      	movs	r3, #8
 8011e54:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011e56:	69fb      	ldr	r3, [r7, #28]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d108      	bne.n	8011e6e <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8011e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5e:	9300      	str	r3, [sp, #0]
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	68b9      	ldr	r1, [r7, #8]
 8011e66:	68f8      	ldr	r0, [r7, #12]
 8011e68:	f7fc ffde 	bl	800ee28 <_tx_event_flags_get>
 8011e6c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8011e6e:	69fb      	ldr	r3, [r7, #28]
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3720      	adds	r7, #32
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}
 8011e78:	4456444e 	.word	0x4456444e
 8011e7c:	2000008c 	.word	0x2000008c
 8011e80:	20008198 	.word	0x20008198
 8011e84:	200082e0 	.word	0x200082e0

08011e88 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b086      	sub	sp, #24
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011e94:	2300      	movs	r3, #0
 8011e96:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d102      	bne.n	8011ea4 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8011e9e:	2306      	movs	r3, #6
 8011ea0:	617b      	str	r3, [r7, #20]
 8011ea2:	e00f      	b.n	8011ec4 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	4a0d      	ldr	r2, [pc, #52]	; (8011ee0 <_txe_event_flags_set+0x58>)
 8011eaa:	4293      	cmp	r3, r2
 8011eac:	d002      	beq.n	8011eb4 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8011eae:	2306      	movs	r3, #6
 8011eb0:	617b      	str	r3, [r7, #20]
 8011eb2:	e007      	b.n	8011ec4 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2b02      	cmp	r3, #2
 8011eb8:	d004      	beq.n	8011ec4 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d001      	beq.n	8011ec4 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 8011ec0:	2308      	movs	r3, #8
 8011ec2:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d105      	bne.n	8011ed6 <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	68b9      	ldr	r1, [r7, #8]
 8011ece:	68f8      	ldr	r0, [r7, #12]
 8011ed0:	f7fd f88c 	bl	800efec <_tx_event_flags_set>
 8011ed4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8011ed6:	697b      	ldr	r3, [r7, #20]
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3718      	adds	r7, #24
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	4456444e 	.word	0x4456444e

08011ee4 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b092      	sub	sp, #72	; 0x48
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	60f8      	str	r0, [r7, #12]
 8011eec:	60b9      	str	r1, [r7, #8]
 8011eee:	607a      	str	r2, [r7, #4]
 8011ef0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d102      	bne.n	8011f02 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8011efc:	231c      	movs	r3, #28
 8011efe:	647b      	str	r3, [r7, #68]	; 0x44
 8011f00:	e053      	b.n	8011faa <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	2b34      	cmp	r3, #52	; 0x34
 8011f06:	d002      	beq.n	8011f0e <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8011f08:	231c      	movs	r3, #28
 8011f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8011f0c:	e04d      	b.n	8011faa <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8011f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011f16:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011f18:	b672      	cpsid	i
    return(int_posture);
 8011f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011f1c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8011f1e:	4b3a      	ldr	r3, [pc, #232]	; (8012008 <_txe_mutex_create+0x124>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	3301      	adds	r3, #1
 8011f24:	4a38      	ldr	r2, [pc, #224]	; (8012008 <_txe_mutex_create+0x124>)
 8011f26:	6013      	str	r3, [r2, #0]
 8011f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f2e:	f383 8810 	msr	PRIMASK, r3
}
 8011f32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8011f34:	4b35      	ldr	r3, [pc, #212]	; (801200c <_txe_mutex_create+0x128>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	643b      	str	r3, [r7, #64]	; 0x40
 8011f3e:	e009      	b.n	8011f54 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d00b      	beq.n	8011f60 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8011f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f4a:	6a1b      	ldr	r3, [r3, #32]
 8011f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8011f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f50:	3301      	adds	r3, #1
 8011f52:	643b      	str	r3, [r7, #64]	; 0x40
 8011f54:	4b2e      	ldr	r3, [pc, #184]	; (8012010 <_txe_mutex_create+0x12c>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d3f0      	bcc.n	8011f40 <_txe_mutex_create+0x5c>
 8011f5e:	e000      	b.n	8011f62 <_txe_mutex_create+0x7e>
                break;
 8011f60:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011f62:	f3ef 8310 	mrs	r3, PRIMASK
 8011f66:	623b      	str	r3, [r7, #32]
    return(posture);
 8011f68:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011f6a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011f6c:	b672      	cpsid	i
    return(int_posture);
 8011f6e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011f70:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8011f72:	4b25      	ldr	r3, [pc, #148]	; (8012008 <_txe_mutex_create+0x124>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	3b01      	subs	r3, #1
 8011f78:	4a23      	ldr	r2, [pc, #140]	; (8012008 <_txe_mutex_create+0x124>)
 8011f7a:	6013      	str	r3, [r2, #0]
 8011f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f82:	f383 8810 	msr	PRIMASK, r3
}
 8011f86:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011f88:	f7fe feea 	bl	8010d60 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8011f8c:	68fa      	ldr	r2, [r7, #12]
 8011f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d102      	bne.n	8011f9a <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8011f94:	231c      	movs	r3, #28
 8011f96:	647b      	str	r3, [r7, #68]	; 0x44
 8011f98:	e007      	b.n	8011faa <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2b01      	cmp	r3, #1
 8011f9e:	d004      	beq.n	8011faa <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d001      	beq.n	8011faa <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8011fa6:	231f      	movs	r3, #31
 8011fa8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d11d      	bne.n	8011fec <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8011fb0:	4b18      	ldr	r3, [pc, #96]	; (8012014 <_txe_mutex_create+0x130>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8011fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fb8:	4a17      	ldr	r2, [pc, #92]	; (8012018 <_txe_mutex_create+0x134>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d101      	bne.n	8011fc2 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8011fbe:	2313      	movs	r3, #19
 8011fc0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011fc2:	f3ef 8305 	mrs	r3, IPSR
 8011fc6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011fc8:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011fca:	4b14      	ldr	r3, [pc, #80]	; (801201c <_txe_mutex_create+0x138>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	4313      	orrs	r3, r2
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00b      	beq.n	8011fec <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011fd4:	f3ef 8305 	mrs	r3, IPSR
 8011fd8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011fda:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011fdc:	4b0f      	ldr	r3, [pc, #60]	; (801201c <_txe_mutex_create+0x138>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4313      	orrs	r3, r2
 8011fe2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011fe6:	d201      	bcs.n	8011fec <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011fe8:	2313      	movs	r3, #19
 8011fea:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d105      	bne.n	8011ffe <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8011ff2:	687a      	ldr	r2, [r7, #4]
 8011ff4:	68b9      	ldr	r1, [r7, #8]
 8011ff6:	68f8      	ldr	r0, [r7, #12]
 8011ff8:	f7fd fb38 	bl	800f66c <_tx_mutex_create>
 8011ffc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8011ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8012000:	4618      	mov	r0, r3
 8012002:	3748      	adds	r7, #72	; 0x48
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}
 8012008:	20008230 	.word	0x20008230
 801200c:	20008178 	.word	0x20008178
 8012010:	2000817c 	.word	0x2000817c
 8012014:	20008198 	.word	0x20008198
 8012018:	200082e0 	.word	0x200082e0
 801201c:	2000008c 	.word	0x2000008c

08012020 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b086      	sub	sp, #24
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012028:	2300      	movs	r3, #0
 801202a:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d102      	bne.n	8012038 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012032:	231c      	movs	r3, #28
 8012034:	617b      	str	r3, [r7, #20]
 8012036:	e023      	b.n	8012080 <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	4a13      	ldr	r2, [pc, #76]	; (801208c <_txe_mutex_delete+0x6c>)
 801203e:	4293      	cmp	r3, r2
 8012040:	d002      	beq.n	8012048 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012042:	231c      	movs	r3, #28
 8012044:	617b      	str	r3, [r7, #20]
 8012046:	e01b      	b.n	8012080 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012048:	f3ef 8305 	mrs	r3, IPSR
 801204c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801204e:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012050:	4b0f      	ldr	r3, [pc, #60]	; (8012090 <_txe_mutex_delete+0x70>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	4313      	orrs	r3, r2
 8012056:	2b00      	cmp	r3, #0
 8012058:	d002      	beq.n	8012060 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 801205a:	2313      	movs	r3, #19
 801205c:	617b      	str	r3, [r7, #20]
 801205e:	e00f      	b.n	8012080 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012060:	4b0c      	ldr	r3, [pc, #48]	; (8012094 <_txe_mutex_delete+0x74>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	4a0b      	ldr	r2, [pc, #44]	; (8012098 <_txe_mutex_delete+0x78>)
 801206a:	4293      	cmp	r3, r2
 801206c:	d101      	bne.n	8012072 <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801206e:	2313      	movs	r3, #19
 8012070:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d103      	bne.n	8012080 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f7fd fb51 	bl	800f720 <_tx_mutex_delete>
 801207e:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8012080:	697b      	ldr	r3, [r7, #20]
}
 8012082:	4618      	mov	r0, r3
 8012084:	3718      	adds	r7, #24
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}
 801208a:	bf00      	nop
 801208c:	4d555445 	.word	0x4d555445
 8012090:	2000008c 	.word	0x2000008c
 8012094:	20008198 	.word	0x20008198
 8012098:	200082e0 	.word	0x200082e0

0801209c <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b088      	sub	sp, #32
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
 80120a4:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80120a6:	2300      	movs	r3, #0
 80120a8:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d102      	bne.n	80120b6 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80120b0:	231c      	movs	r3, #28
 80120b2:	61fb      	str	r3, [r7, #28]
 80120b4:	e01f      	b.n	80120f6 <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4a21      	ldr	r2, [pc, #132]	; (8012140 <_txe_mutex_get+0xa4>)
 80120bc:	4293      	cmp	r3, r2
 80120be:	d002      	beq.n	80120c6 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80120c0:	231c      	movs	r3, #28
 80120c2:	61fb      	str	r3, [r7, #28]
 80120c4:	e017      	b.n	80120f6 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d014      	beq.n	80120f6 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80120cc:	f3ef 8305 	mrs	r3, IPSR
 80120d0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80120d2:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80120d4:	4b1b      	ldr	r3, [pc, #108]	; (8012144 <_txe_mutex_get+0xa8>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4313      	orrs	r3, r2
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d002      	beq.n	80120e4 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80120de:	2304      	movs	r3, #4
 80120e0:	61fb      	str	r3, [r7, #28]
 80120e2:	e008      	b.n	80120f6 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80120e4:	4b18      	ldr	r3, [pc, #96]	; (8012148 <_txe_mutex_get+0xac>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80120ea:	69bb      	ldr	r3, [r7, #24]
 80120ec:	4a17      	ldr	r2, [pc, #92]	; (801214c <_txe_mutex_get+0xb0>)
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d101      	bne.n	80120f6 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80120f2:	2304      	movs	r3, #4
 80120f4:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80120f6:	69fb      	ldr	r3, [r7, #28]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d114      	bne.n	8012126 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80120fc:	f3ef 8305 	mrs	r3, IPSR
 8012100:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012102:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012104:	4b0f      	ldr	r3, [pc, #60]	; (8012144 <_txe_mutex_get+0xa8>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	4313      	orrs	r3, r2
 801210a:	2b00      	cmp	r3, #0
 801210c:	d00b      	beq.n	8012126 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801210e:	f3ef 8305 	mrs	r3, IPSR
 8012112:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8012114:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012116:	4b0b      	ldr	r3, [pc, #44]	; (8012144 <_txe_mutex_get+0xa8>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	4313      	orrs	r3, r2
 801211c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012120:	d201      	bcs.n	8012126 <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012122:	2313      	movs	r3, #19
 8012124:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012126:	69fb      	ldr	r3, [r7, #28]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d104      	bne.n	8012136 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 801212c:	6839      	ldr	r1, [r7, #0]
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7fd fba0 	bl	800f874 <_tx_mutex_get>
 8012134:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8012136:	69fb      	ldr	r3, [r7, #28]
}
 8012138:	4618      	mov	r0, r3
 801213a:	3720      	adds	r7, #32
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	4d555445 	.word	0x4d555445
 8012144:	2000008c 	.word	0x2000008c
 8012148:	20008198 	.word	0x20008198
 801214c:	200082e0 	.word	0x200082e0

08012150 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b086      	sub	sp, #24
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012158:	2300      	movs	r3, #0
 801215a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d102      	bne.n	8012168 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012162:	231c      	movs	r3, #28
 8012164:	617b      	str	r3, [r7, #20]
 8012166:	e01c      	b.n	80121a2 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	4a13      	ldr	r2, [pc, #76]	; (80121bc <_txe_mutex_put+0x6c>)
 801216e:	4293      	cmp	r3, r2
 8012170:	d002      	beq.n	8012178 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012172:	231c      	movs	r3, #28
 8012174:	617b      	str	r3, [r7, #20]
 8012176:	e014      	b.n	80121a2 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012178:	f3ef 8305 	mrs	r3, IPSR
 801217c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801217e:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012180:	4b0f      	ldr	r3, [pc, #60]	; (80121c0 <_txe_mutex_put+0x70>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	4313      	orrs	r3, r2
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00b      	beq.n	80121a2 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801218a:	f3ef 8305 	mrs	r3, IPSR
 801218e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8012190:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012192:	4b0b      	ldr	r3, [pc, #44]	; (80121c0 <_txe_mutex_put+0x70>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	4313      	orrs	r3, r2
 8012198:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801219c:	d201      	bcs.n	80121a2 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801219e:	2313      	movs	r3, #19
 80121a0:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d103      	bne.n	80121b0 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f7fd fddb 	bl	800fd64 <_tx_mutex_put>
 80121ae:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80121b0:	697b      	ldr	r3, [r7, #20]
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3718      	adds	r7, #24
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	bf00      	nop
 80121bc:	4d555445 	.word	0x4d555445
 80121c0:	2000008c 	.word	0x2000008c

080121c4 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b092      	sub	sp, #72	; 0x48
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
 80121d0:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80121d2:	2300      	movs	r3, #0
 80121d4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d102      	bne.n	80121e2 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80121dc:	230c      	movs	r3, #12
 80121de:	647b      	str	r3, [r7, #68]	; 0x44
 80121e0:	e054      	b.n	801228c <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	2b1c      	cmp	r3, #28
 80121e6:	d002      	beq.n	80121ee <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80121e8:	230c      	movs	r3, #12
 80121ea:	647b      	str	r3, [r7, #68]	; 0x44
 80121ec:	e04e      	b.n	801228c <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80121ee:	f3ef 8310 	mrs	r3, PRIMASK
 80121f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80121f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80121f6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80121f8:	b672      	cpsid	i
    return(int_posture);
 80121fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80121fc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80121fe:	4b36      	ldr	r3, [pc, #216]	; (80122d8 <_txe_semaphore_create+0x114>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	3301      	adds	r3, #1
 8012204:	4a34      	ldr	r2, [pc, #208]	; (80122d8 <_txe_semaphore_create+0x114>)
 8012206:	6013      	str	r3, [r2, #0]
 8012208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801220e:	f383 8810 	msr	PRIMASK, r3
}
 8012212:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8012214:	4b31      	ldr	r3, [pc, #196]	; (80122dc <_txe_semaphore_create+0x118>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801221a:	2300      	movs	r3, #0
 801221c:	643b      	str	r3, [r7, #64]	; 0x40
 801221e:	e009      	b.n	8012234 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8012220:	68fa      	ldr	r2, [r7, #12]
 8012222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012224:	429a      	cmp	r2, r3
 8012226:	d00b      	beq.n	8012240 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8012228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801222a:	695b      	ldr	r3, [r3, #20]
 801222c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801222e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012230:	3301      	adds	r3, #1
 8012232:	643b      	str	r3, [r7, #64]	; 0x40
 8012234:	4b2a      	ldr	r3, [pc, #168]	; (80122e0 <_txe_semaphore_create+0x11c>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801223a:	429a      	cmp	r2, r3
 801223c:	d3f0      	bcc.n	8012220 <_txe_semaphore_create+0x5c>
 801223e:	e000      	b.n	8012242 <_txe_semaphore_create+0x7e>
                break;
 8012240:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012242:	f3ef 8310 	mrs	r3, PRIMASK
 8012246:	623b      	str	r3, [r7, #32]
    return(posture);
 8012248:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801224a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801224c:	b672      	cpsid	i
    return(int_posture);
 801224e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012250:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012252:	4b21      	ldr	r3, [pc, #132]	; (80122d8 <_txe_semaphore_create+0x114>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	3b01      	subs	r3, #1
 8012258:	4a1f      	ldr	r2, [pc, #124]	; (80122d8 <_txe_semaphore_create+0x114>)
 801225a:	6013      	str	r3, [r2, #0]
 801225c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801225e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012262:	f383 8810 	msr	PRIMASK, r3
}
 8012266:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012268:	f7fe fd7a 	bl	8010d60 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 801226c:	68fa      	ldr	r2, [r7, #12]
 801226e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012270:	429a      	cmp	r2, r3
 8012272:	d102      	bne.n	801227a <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8012274:	230c      	movs	r3, #12
 8012276:	647b      	str	r3, [r7, #68]	; 0x44
 8012278:	e008      	b.n	801228c <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801227a:	4b1a      	ldr	r3, [pc, #104]	; (80122e4 <_txe_semaphore_create+0x120>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8012280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012282:	4a19      	ldr	r2, [pc, #100]	; (80122e8 <_txe_semaphore_create+0x124>)
 8012284:	4293      	cmp	r3, r2
 8012286:	d101      	bne.n	801228c <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012288:	2313      	movs	r3, #19
 801228a:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801228c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801228e:	2b00      	cmp	r3, #0
 8012290:	d114      	bne.n	80122bc <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012292:	f3ef 8305 	mrs	r3, IPSR
 8012296:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012298:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801229a:	4b14      	ldr	r3, [pc, #80]	; (80122ec <_txe_semaphore_create+0x128>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	4313      	orrs	r3, r2
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d00b      	beq.n	80122bc <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80122a4:	f3ef 8305 	mrs	r3, IPSR
 80122a8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80122aa:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80122ac:	4b0f      	ldr	r3, [pc, #60]	; (80122ec <_txe_semaphore_create+0x128>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	4313      	orrs	r3, r2
 80122b2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80122b6:	d201      	bcs.n	80122bc <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80122b8:	2313      	movs	r3, #19
 80122ba:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80122bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d105      	bne.n	80122ce <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 80122c2:	687a      	ldr	r2, [r7, #4]
 80122c4:	68b9      	ldr	r1, [r7, #8]
 80122c6:	68f8      	ldr	r0, [r7, #12]
 80122c8:	f7fd ffee 	bl	80102a8 <_tx_semaphore_create>
 80122cc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80122ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	3748      	adds	r7, #72	; 0x48
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}
 80122d8:	20008230 	.word	0x20008230
 80122dc:	20008160 	.word	0x20008160
 80122e0:	20008164 	.word	0x20008164
 80122e4:	20008198 	.word	0x20008198
 80122e8:	200082e0 	.word	0x200082e0
 80122ec:	2000008c 	.word	0x2000008c

080122f0 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b086      	sub	sp, #24
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
 80122f8:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80122fa:	2300      	movs	r3, #0
 80122fc:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d102      	bne.n	801230a <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8012304:	230c      	movs	r3, #12
 8012306:	617b      	str	r3, [r7, #20]
 8012308:	e01f      	b.n	801234a <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	4a15      	ldr	r2, [pc, #84]	; (8012364 <_txe_semaphore_get+0x74>)
 8012310:	4293      	cmp	r3, r2
 8012312:	d002      	beq.n	801231a <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8012314:	230c      	movs	r3, #12
 8012316:	617b      	str	r3, [r7, #20]
 8012318:	e017      	b.n	801234a <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d014      	beq.n	801234a <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012320:	f3ef 8305 	mrs	r3, IPSR
 8012324:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8012326:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012328:	4b0f      	ldr	r3, [pc, #60]	; (8012368 <_txe_semaphore_get+0x78>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	4313      	orrs	r3, r2
 801232e:	2b00      	cmp	r3, #0
 8012330:	d002      	beq.n	8012338 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8012332:	2304      	movs	r3, #4
 8012334:	617b      	str	r3, [r7, #20]
 8012336:	e008      	b.n	801234a <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8012338:	4b0c      	ldr	r3, [pc, #48]	; (801236c <_txe_semaphore_get+0x7c>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	4a0b      	ldr	r2, [pc, #44]	; (8012370 <_txe_semaphore_get+0x80>)
 8012342:	4293      	cmp	r3, r2
 8012344:	d101      	bne.n	801234a <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8012346:	2304      	movs	r3, #4
 8012348:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d104      	bne.n	801235a <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8012350:	6839      	ldr	r1, [r7, #0]
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f7fd fffa 	bl	801034c <_tx_semaphore_get>
 8012358:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801235a:	697b      	ldr	r3, [r7, #20]
}
 801235c:	4618      	mov	r0, r3
 801235e:	3718      	adds	r7, #24
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}
 8012364:	53454d41 	.word	0x53454d41
 8012368:	2000008c 	.word	0x2000008c
 801236c:	20008198 	.word	0x20008198
 8012370:	200082e0 	.word	0x200082e0

08012374 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d102      	bne.n	8012388 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8012382:	230c      	movs	r3, #12
 8012384:	60fb      	str	r3, [r7, #12]
 8012386:	e00b      	b.n	80123a0 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	4a07      	ldr	r2, [pc, #28]	; (80123ac <_txe_semaphore_put+0x38>)
 801238e:	4293      	cmp	r3, r2
 8012390:	d002      	beq.n	8012398 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8012392:	230c      	movs	r3, #12
 8012394:	60fb      	str	r3, [r7, #12]
 8012396:	e003      	b.n	80123a0 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f7fe f869 	bl	8010470 <_tx_semaphore_put>
 801239e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80123a0:	68fb      	ldr	r3, [r7, #12]
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3710      	adds	r7, #16
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
 80123aa:	bf00      	nop
 80123ac:	53454d41 	.word	0x53454d41

080123b0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b09a      	sub	sp, #104	; 0x68
 80123b4:	af06      	add	r7, sp, #24
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	607a      	str	r2, [r7, #4]
 80123bc:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80123be:	2300      	movs	r3, #0
 80123c0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d102      	bne.n	80123ce <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80123c8:	230e      	movs	r3, #14
 80123ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80123cc:	e0bb      	b.n	8012546 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80123ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80123d0:	2bb0      	cmp	r3, #176	; 0xb0
 80123d2:	d002      	beq.n	80123da <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80123d4:	230e      	movs	r3, #14
 80123d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80123d8:	e0b5      	b.n	8012546 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80123da:	f3ef 8310 	mrs	r3, PRIMASK
 80123de:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80123e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80123e2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80123e4:	b672      	cpsid	i
    return(int_posture);
 80123e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80123e8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80123ea:	4b64      	ldr	r3, [pc, #400]	; (801257c <_txe_thread_create+0x1cc>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	3301      	adds	r3, #1
 80123f0:	4a62      	ldr	r2, [pc, #392]	; (801257c <_txe_thread_create+0x1cc>)
 80123f2:	6013      	str	r3, [r2, #0]
 80123f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123fa:	f383 8810 	msr	PRIMASK, r3
}
 80123fe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8012400:	2300      	movs	r3, #0
 8012402:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8012404:	4b5e      	ldr	r3, [pc, #376]	; (8012580 <_txe_thread_create+0x1d0>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801240a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801240c:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 801240e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012410:	3b01      	subs	r3, #1
 8012412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012414:	4413      	add	r3, r2
 8012416:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8012418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801241a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801241c:	2300      	movs	r3, #0
 801241e:	647b      	str	r3, [r7, #68]	; 0x44
 8012420:	e02b      	b.n	801247a <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8012422:	68fa      	ldr	r2, [r7, #12]
 8012424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012426:	429a      	cmp	r2, r3
 8012428:	d101      	bne.n	801242e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801242a:	2301      	movs	r3, #1
 801242c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 801242e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012430:	2b01      	cmp	r3, #1
 8012432:	d028      	beq.n	8012486 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8012434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012436:	68db      	ldr	r3, [r3, #12]
 8012438:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801243a:	429a      	cmp	r2, r3
 801243c:	d308      	bcc.n	8012450 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801243e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012440:	691b      	ldr	r3, [r3, #16]
 8012442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012444:	429a      	cmp	r2, r3
 8012446:	d203      	bcs.n	8012450 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8012448:	2300      	movs	r3, #0
 801244a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801244c:	2301      	movs	r3, #1
 801244e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8012450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012452:	68db      	ldr	r3, [r3, #12]
 8012454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012456:	429a      	cmp	r2, r3
 8012458:	d308      	bcc.n	801246c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801245a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801245c:	691b      	ldr	r3, [r3, #16]
 801245e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012460:	429a      	cmp	r2, r3
 8012462:	d203      	bcs.n	801246c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8012464:	2300      	movs	r3, #0
 8012466:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8012468:	2301      	movs	r3, #1
 801246a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 801246c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012472:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8012474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012476:	3301      	adds	r3, #1
 8012478:	647b      	str	r3, [r7, #68]	; 0x44
 801247a:	4b42      	ldr	r3, [pc, #264]	; (8012584 <_txe_thread_create+0x1d4>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012480:	429a      	cmp	r2, r3
 8012482:	d3ce      	bcc.n	8012422 <_txe_thread_create+0x72>
 8012484:	e000      	b.n	8012488 <_txe_thread_create+0xd8>
                break;
 8012486:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012488:	f3ef 8310 	mrs	r3, PRIMASK
 801248c:	61fb      	str	r3, [r7, #28]
    return(posture);
 801248e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8012490:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012492:	b672      	cpsid	i
    return(int_posture);
 8012494:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012496:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012498:	4b38      	ldr	r3, [pc, #224]	; (801257c <_txe_thread_create+0x1cc>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	3b01      	subs	r3, #1
 801249e:	4a37      	ldr	r2, [pc, #220]	; (801257c <_txe_thread_create+0x1cc>)
 80124a0:	6013      	str	r3, [r2, #0]
 80124a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124a4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80124a6:	6a3b      	ldr	r3, [r7, #32]
 80124a8:	f383 8810 	msr	PRIMASK, r3
}
 80124ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80124ae:	f7fe fc57 	bl	8010d60 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80124b2:	68fa      	ldr	r2, [r7, #12]
 80124b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d102      	bne.n	80124c0 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80124ba:	230e      	movs	r3, #14
 80124bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124be:	e042      	b.n	8012546 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80124c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d102      	bne.n	80124cc <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80124c6:	2303      	movs	r3, #3
 80124c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124ca:	e03c      	b.n	8012546 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d102      	bne.n	80124d8 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80124d2:	2303      	movs	r3, #3
 80124d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124d6:	e036      	b.n	8012546 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80124d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80124da:	2bc7      	cmp	r3, #199	; 0xc7
 80124dc:	d802      	bhi.n	80124e4 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80124de:	2305      	movs	r3, #5
 80124e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124e2:	e030      	b.n	8012546 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80124e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80124e6:	2b1f      	cmp	r3, #31
 80124e8:	d902      	bls.n	80124f0 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80124ea:	230f      	movs	r3, #15
 80124ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124ee:	e02a      	b.n	8012546 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80124f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80124f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d902      	bls.n	80124fe <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80124f8:	2318      	movs	r3, #24
 80124fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124fc:	e023      	b.n	8012546 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80124fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012500:	2b01      	cmp	r3, #1
 8012502:	d902      	bls.n	801250a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8012504:	2310      	movs	r3, #16
 8012506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012508:	e01d      	b.n	8012546 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 801250a:	4b1f      	ldr	r3, [pc, #124]	; (8012588 <_txe_thread_create+0x1d8>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8012510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012512:	4a1e      	ldr	r2, [pc, #120]	; (801258c <_txe_thread_create+0x1dc>)
 8012514:	4293      	cmp	r3, r2
 8012516:	d101      	bne.n	801251c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012518:	2313      	movs	r3, #19
 801251a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801251c:	f3ef 8305 	mrs	r3, IPSR
 8012520:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012522:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012524:	4b1a      	ldr	r3, [pc, #104]	; (8012590 <_txe_thread_create+0x1e0>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	4313      	orrs	r3, r2
 801252a:	2b00      	cmp	r3, #0
 801252c:	d00b      	beq.n	8012546 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801252e:	f3ef 8305 	mrs	r3, IPSR
 8012532:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012534:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012536:	4b16      	ldr	r3, [pc, #88]	; (8012590 <_txe_thread_create+0x1e0>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4313      	orrs	r3, r2
 801253c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012540:	d201      	bcs.n	8012546 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8012542:	2313      	movs	r3, #19
 8012544:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012548:	2b00      	cmp	r3, #0
 801254a:	d112      	bne.n	8012572 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 801254c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801254e:	9305      	str	r3, [sp, #20]
 8012550:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012552:	9304      	str	r3, [sp, #16]
 8012554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012556:	9303      	str	r3, [sp, #12]
 8012558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801255a:	9302      	str	r3, [sp, #8]
 801255c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801255e:	9301      	str	r3, [sp, #4]
 8012560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012562:	9300      	str	r3, [sp, #0]
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	687a      	ldr	r2, [r7, #4]
 8012568:	68b9      	ldr	r1, [r7, #8]
 801256a:	68f8      	ldr	r0, [r7, #12]
 801256c:	f7fd ffd8 	bl	8010520 <_tx_thread_create>
 8012570:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8012572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8012574:	4618      	mov	r0, r3
 8012576:	3750      	adds	r7, #80	; 0x50
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}
 801257c:	20008230 	.word	0x20008230
 8012580:	200081a0 	.word	0x200081a0
 8012584:	200081a4 	.word	0x200081a4
 8012588:	20008198 	.word	0x20008198
 801258c:	200082e0 	.word	0x200082e0
 8012590:	2000008c 	.word	0x2000008c

08012594 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b084      	sub	sp, #16
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801259c:	f3ef 8305 	mrs	r3, IPSR
 80125a0:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80125a2:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80125a4:	4b0f      	ldr	r3, [pc, #60]	; (80125e4 <_txe_thread_delete+0x50>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	4313      	orrs	r3, r2
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d002      	beq.n	80125b4 <_txe_thread_delete+0x20>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80125ae:	2313      	movs	r3, #19
 80125b0:	60fb      	str	r3, [r7, #12]
 80125b2:	e011      	b.n	80125d8 <_txe_thread_delete+0x44>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d102      	bne.n	80125c0 <_txe_thread_delete+0x2c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80125ba:	230e      	movs	r3, #14
 80125bc:	60fb      	str	r3, [r7, #12]
 80125be:	e00b      	b.n	80125d8 <_txe_thread_delete+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	4a08      	ldr	r2, [pc, #32]	; (80125e8 <_txe_thread_delete+0x54>)
 80125c6:	4293      	cmp	r3, r2
 80125c8:	d002      	beq.n	80125d0 <_txe_thread_delete+0x3c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80125ca:	230e      	movs	r3, #14
 80125cc:	60fb      	str	r3, [r7, #12]
 80125ce:	e003      	b.n	80125d8 <_txe_thread_delete+0x44>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7fe f89b 	bl	801070c <_tx_thread_delete>
 80125d6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80125d8:	68fb      	ldr	r3, [r7, #12]
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3710      	adds	r7, #16
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	bf00      	nop
 80125e4:	2000008c 	.word	0x2000008c
 80125e8:	54485244 	.word	0x54485244

080125ec <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80125f2:	4b0a      	ldr	r3, [pc, #40]	; (801261c <_txe_thread_relinquish+0x30>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d00a      	beq.n	8012614 <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80125fe:	f3ef 8305 	mrs	r3, IPSR
 8012602:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 8012604:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8012606:	4b06      	ldr	r3, [pc, #24]	; (8012620 <_txe_thread_relinquish+0x34>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	4313      	orrs	r3, r2
 801260c:	2b00      	cmp	r3, #0
 801260e:	d101      	bne.n	8012614 <_txe_thread_relinquish+0x28>
        {

            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 8012610:	f7fe f9a4 	bl	801095c <_tx_thread_relinquish>
        }
    }
}
 8012614:	bf00      	nop
 8012616:	3708      	adds	r7, #8
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	20008198 	.word	0x20008198
 8012620:	2000008c 	.word	0x2000008c

08012624 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d102      	bne.n	8012638 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012632:	230e      	movs	r3, #14
 8012634:	60fb      	str	r3, [r7, #12]
 8012636:	e00b      	b.n	8012650 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	4a07      	ldr	r2, [pc, #28]	; (801265c <_txe_thread_resume+0x38>)
 801263e:	4293      	cmp	r3, r2
 8012640:	d002      	beq.n	8012648 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012642:	230e      	movs	r3, #14
 8012644:	60fb      	str	r3, [r7, #12]
 8012646:	e003      	b.n	8012650 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f7fe f9ed 	bl	8010a28 <_tx_thread_resume>
 801264e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8012650:	68fb      	ldr	r3, [r7, #12]
}
 8012652:	4618      	mov	r0, r3
 8012654:	3710      	adds	r7, #16
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
 801265a:	bf00      	nop
 801265c:	54485244 	.word	0x54485244

08012660 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b084      	sub	sp, #16
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d102      	bne.n	8012674 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801266e:	230e      	movs	r3, #14
 8012670:	60fb      	str	r3, [r7, #12]
 8012672:	e00b      	b.n	801268c <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	4a07      	ldr	r2, [pc, #28]	; (8012698 <_txe_thread_suspend+0x38>)
 801267a:	4293      	cmp	r3, r2
 801267c:	d002      	beq.n	8012684 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801267e:	230e      	movs	r3, #14
 8012680:	60fb      	str	r3, [r7, #12]
 8012682:	e003      	b.n	801268c <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f7fe fafb 	bl	8010c80 <_tx_thread_suspend>
 801268a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801268c:	68fb      	ldr	r3, [r7, #12]
}
 801268e:	4618      	mov	r0, r3
 8012690:	3710      	adds	r7, #16
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	54485244 	.word	0x54485244

0801269c <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b084      	sub	sp, #16
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d102      	bne.n	80126b0 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80126aa:	2315      	movs	r3, #21
 80126ac:	60fb      	str	r3, [r7, #12]
 80126ae:	e00b      	b.n	80126c8 <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	4a07      	ldr	r2, [pc, #28]	; (80126d4 <_txe_timer_activate+0x38>)
 80126b6:	4293      	cmp	r3, r2
 80126b8:	d002      	beq.n	80126c0 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80126ba:	2315      	movs	r3, #21
 80126bc:	60fb      	str	r3, [r7, #12]
 80126be:	e003      	b.n	80126c8 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f7fe fe2d 	bl	8011320 <_tx_timer_activate>
 80126c6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80126c8:	68fb      	ldr	r3, [r7, #12]
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3710      	adds	r7, #16
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}
 80126d2:	bf00      	nop
 80126d4:	4154494d 	.word	0x4154494d

080126d8 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b096      	sub	sp, #88	; 0x58
 80126dc:	af04      	add	r7, sp, #16
 80126de:	60f8      	str	r0, [r7, #12]
 80126e0:	60b9      	str	r1, [r7, #8]
 80126e2:	607a      	str	r2, [r7, #4]
 80126e4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80126e6:	2300      	movs	r3, #0
 80126e8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d102      	bne.n	80126f6 <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80126f0:	2315      	movs	r3, #21
 80126f2:	647b      	str	r3, [r7, #68]	; 0x44
 80126f4:	e059      	b.n	80127aa <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 80126f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80126f8:	2b2c      	cmp	r3, #44	; 0x2c
 80126fa:	d002      	beq.n	8012702 <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80126fc:	2315      	movs	r3, #21
 80126fe:	647b      	str	r3, [r7, #68]	; 0x44
 8012700:	e053      	b.n	80127aa <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012702:	f3ef 8310 	mrs	r3, PRIMASK
 8012706:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801270a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801270c:	b672      	cpsid	i
    return(int_posture);
 801270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8012710:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8012712:	4b41      	ldr	r3, [pc, #260]	; (8012818 <_txe_timer_create+0x140>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	3301      	adds	r3, #1
 8012718:	4a3f      	ldr	r2, [pc, #252]	; (8012818 <_txe_timer_create+0x140>)
 801271a:	6013      	str	r3, [r2, #0]
 801271c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012722:	f383 8810 	msr	PRIMASK, r3
}
 8012726:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 8012728:	4b3c      	ldr	r3, [pc, #240]	; (801281c <_txe_timer_create+0x144>)
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 801272e:	2300      	movs	r3, #0
 8012730:	643b      	str	r3, [r7, #64]	; 0x40
 8012732:	e009      	b.n	8012748 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 8012734:	68fa      	ldr	r2, [r7, #12]
 8012736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012738:	429a      	cmp	r2, r3
 801273a:	d00b      	beq.n	8012754 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 801273c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012740:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 8012742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012744:	3301      	adds	r3, #1
 8012746:	643b      	str	r3, [r7, #64]	; 0x40
 8012748:	4b35      	ldr	r3, [pc, #212]	; (8012820 <_txe_timer_create+0x148>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801274e:	429a      	cmp	r2, r3
 8012750:	d3f0      	bcc.n	8012734 <_txe_timer_create+0x5c>
 8012752:	e000      	b.n	8012756 <_txe_timer_create+0x7e>
                break;
 8012754:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012756:	f3ef 8310 	mrs	r3, PRIMASK
 801275a:	623b      	str	r3, [r7, #32]
    return(posture);
 801275c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801275e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012760:	b672      	cpsid	i
    return(int_posture);
 8012762:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012764:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012766:	4b2c      	ldr	r3, [pc, #176]	; (8012818 <_txe_timer_create+0x140>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	3b01      	subs	r3, #1
 801276c:	4a2a      	ldr	r2, [pc, #168]	; (8012818 <_txe_timer_create+0x140>)
 801276e:	6013      	str	r3, [r2, #0]
 8012770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012772:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012776:	f383 8810 	msr	PRIMASK, r3
}
 801277a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801277c:	f7fe faf0 	bl	8010d60 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 8012780:	68fa      	ldr	r2, [r7, #12]
 8012782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012784:	429a      	cmp	r2, r3
 8012786:	d102      	bne.n	801278e <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 8012788:	2315      	movs	r3, #21
 801278a:	647b      	str	r3, [r7, #68]	; 0x44
 801278c:	e00d      	b.n	80127aa <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 801278e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012790:	2b00      	cmp	r3, #0
 8012792:	d102      	bne.n	801279a <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 8012794:	2316      	movs	r3, #22
 8012796:	647b      	str	r3, [r7, #68]	; 0x44
 8012798:	e007      	b.n	80127aa <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 801279a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801279c:	2b01      	cmp	r3, #1
 801279e:	d004      	beq.n	80127aa <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 80127a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d001      	beq.n	80127aa <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 80127a6:	2317      	movs	r3, #23
 80127a8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80127aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d11d      	bne.n	80127ec <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80127b0:	4b1c      	ldr	r3, [pc, #112]	; (8012824 <_txe_timer_create+0x14c>)
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80127b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127b8:	4a1b      	ldr	r2, [pc, #108]	; (8012828 <_txe_timer_create+0x150>)
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d101      	bne.n	80127c2 <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80127be:	2313      	movs	r3, #19
 80127c0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80127c2:	f3ef 8305 	mrs	r3, IPSR
 80127c6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80127c8:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80127ca:	4b18      	ldr	r3, [pc, #96]	; (801282c <_txe_timer_create+0x154>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	4313      	orrs	r3, r2
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d00b      	beq.n	80127ec <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80127d4:	f3ef 8305 	mrs	r3, IPSR
 80127d8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80127da:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80127dc:	4b13      	ldr	r3, [pc, #76]	; (801282c <_txe_timer_create+0x154>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	4313      	orrs	r3, r2
 80127e2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80127e6:	d201      	bcs.n	80127ec <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80127e8:	2313      	movs	r3, #19
 80127ea:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80127ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d10c      	bne.n	801280c <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 80127f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127f4:	9302      	str	r3, [sp, #8]
 80127f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127f8:	9301      	str	r3, [sp, #4]
 80127fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127fc:	9300      	str	r3, [sp, #0]
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	687a      	ldr	r2, [r7, #4]
 8012802:	68b9      	ldr	r1, [r7, #8]
 8012804:	68f8      	ldr	r0, [r7, #12]
 8012806:	f7fe fdb7 	bl	8011378 <_tx_timer_create>
 801280a:	6478      	str	r0, [r7, #68]	; 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 801280c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801280e:	4618      	mov	r0, r3
 8012810:	3748      	adds	r7, #72	; 0x48
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	20008230 	.word	0x20008230
 801281c:	200082d4 	.word	0x200082d4
 8012820:	200082d8 	.word	0x200082d8
 8012824:	20008198 	.word	0x20008198
 8012828:	200082e0 	.word	0x200082e0
 801282c:	2000008c 	.word	0x2000008c

08012830 <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d102      	bne.n	8012844 <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 801283e:	2315      	movs	r3, #21
 8012840:	60fb      	str	r3, [r7, #12]
 8012842:	e00b      	b.n	801285c <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4a07      	ldr	r2, [pc, #28]	; (8012868 <_txe_timer_deactivate+0x38>)
 801284a:	4293      	cmp	r3, r2
 801284c:	d002      	beq.n	8012854 <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 801284e:	2315      	movs	r3, #21
 8012850:	60fb      	str	r3, [r7, #12]
 8012852:	e003      	b.n	801285c <_txe_timer_deactivate+0x2c>
    }
    else
    {

        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f7fe fdf3 	bl	8011440 <_tx_timer_deactivate>
 801285a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801285c:	68fb      	ldr	r3, [r7, #12]
}
 801285e:	4618      	mov	r0, r3
 8012860:	3710      	adds	r7, #16
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	4154494d 	.word	0x4154494d

0801286c <_txe_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_delete(TX_TIMER *timer_ptr)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b086      	sub	sp, #24
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012874:	2300      	movs	r3, #0
 8012876:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d102      	bne.n	8012884 <_txe_timer_delete+0x18>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 801287e:	2315      	movs	r3, #21
 8012880:	617b      	str	r3, [r7, #20]
 8012882:	e023      	b.n	80128cc <_txe_timer_delete+0x60>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	4a13      	ldr	r2, [pc, #76]	; (80128d8 <_txe_timer_delete+0x6c>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d002      	beq.n	8012894 <_txe_timer_delete+0x28>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 801288e:	2315      	movs	r3, #21
 8012890:	617b      	str	r3, [r7, #20]
 8012892:	e01b      	b.n	80128cc <_txe_timer_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012894:	f3ef 8305 	mrs	r3, IPSR
 8012898:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801289a:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801289c:	4b0f      	ldr	r3, [pc, #60]	; (80128dc <_txe_timer_delete+0x70>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	4313      	orrs	r3, r2
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d002      	beq.n	80128ac <_txe_timer_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80128a6:	2313      	movs	r3, #19
 80128a8:	617b      	str	r3, [r7, #20]
 80128aa:	e00f      	b.n	80128cc <_txe_timer_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80128ac:	4b0c      	ldr	r3, [pc, #48]	; (80128e0 <_txe_timer_delete+0x74>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	4a0b      	ldr	r2, [pc, #44]	; (80128e4 <_txe_timer_delete+0x78>)
 80128b6:	4293      	cmp	r3, r2
 80128b8:	d101      	bne.n	80128be <_txe_timer_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80128ba:	2313      	movs	r3, #19
 80128bc:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d103      	bne.n	80128cc <_txe_timer_delete+0x60>
        {
#endif

            /* Call actual application timer delete function.  */
            status =  _tx_timer_delete(timer_ptr);
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f7fe fe65 	bl	8011594 <_tx_timer_delete>
 80128ca:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 80128cc:	697b      	ldr	r3, [r7, #20]
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3718      	adds	r7, #24
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	4154494d 	.word	0x4154494d
 80128dc:	2000008c 	.word	0x2000008c
 80128e0:	20008198 	.word	0x20008198
 80128e4:	200082e0 	.word	0x200082e0

080128e8 <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b08c      	sub	sp, #48	; 0x30
 80128ec:	af08      	add	r7, sp, #32
 80128ee:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 80128f0:	2300      	movs	r3, #0
 80128f2:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN MX_NetXDuo_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END MX_NetXDuo_MEM_POOL */

  /* USER CODE BEGIN MX_NetXDuo_Init */
  printf("Nx_UDP_Echo_Server application started..\n");
 80128f8:	4881      	ldr	r0, [pc, #516]	; (8012b00 <MX_NetXDuo_Init+0x218>)
 80128fa:	f000 fb5f 	bl	8012fbc <puts>

  /* Allocate the memory for packet_pool.  */
  ret = tx_byte_allocate(byte_pool, (VOID **) &pointer,
 80128fe:	2300      	movs	r3, #0
 8012900:	f643 6230 	movw	r2, #15920	; 0x3e30
 8012904:	497f      	ldr	r1, [pc, #508]	; (8012b04 <MX_NetXDuo_Init+0x21c>)
 8012906:	68b8      	ldr	r0, [r7, #8]
 8012908:	f7ff f8c2 	bl	8011a90 <_txe_byte_allocate>
 801290c:	60f8      	str	r0, [r7, #12]
                         NX_PACKET_POOL_SIZE, TX_NO_WAIT);

  /* Create the Packet pool to be used for packet allocation */
  ret = nx_packet_pool_create(&AppPool, "Main Packet Pool", PAYLOAD_SIZE, pointer, NX_PACKET_POOL_SIZE);
 801290e:	4b7d      	ldr	r3, [pc, #500]	; (8012b04 <MX_NetXDuo_Init+0x21c>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	223c      	movs	r2, #60	; 0x3c
 8012914:	9201      	str	r2, [sp, #4]
 8012916:	f643 6230 	movw	r2, #15920	; 0x3e30
 801291a:	9200      	str	r2, [sp, #0]
 801291c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8012920:	4979      	ldr	r1, [pc, #484]	; (8012b08 <MX_NetXDuo_Init+0x220>)
 8012922:	487a      	ldr	r0, [pc, #488]	; (8012b0c <MX_NetXDuo_Init+0x224>)
 8012924:	f7fb fb80 	bl	800e028 <_nxe_packet_pool_create>
 8012928:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d001      	beq.n	8012934 <MX_NetXDuo_Init+0x4c>
  {
    return NX_NOT_ENABLED;
 8012930:	2314      	movs	r3, #20
 8012932:	e0e0      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

   /* Allocate the NX_IP instance pool. */
  ret = tx_byte_allocate(byte_pool, (VOID **) &pointer, 2 * DEFAULT_MEMORY_SIZE, TX_NO_WAIT);
 8012934:	2300      	movs	r3, #0
 8012936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801293a:	4972      	ldr	r1, [pc, #456]	; (8012b04 <MX_NetXDuo_Init+0x21c>)
 801293c:	68b8      	ldr	r0, [r7, #8]
 801293e:	f7ff f8a7 	bl	8011a90 <_txe_byte_allocate>
 8012942:	60f8      	str	r0, [r7, #12]

  if (ret != TX_SUCCESS)
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d001      	beq.n	801294e <MX_NetXDuo_Init+0x66>
  {
    return NX_NOT_ENABLED;
 801294a:	2314      	movs	r3, #20
 801294c:	e0d3      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /* Create the main NX_IP instance */
  ret = nx_ip_create(&IpInstance, "Main Ip instance", NULL_ADDRESS, NULL_ADDRESS, &AppPool, nx_stm32_eth_driver,
 801294e:	4b6d      	ldr	r3, [pc, #436]	; (8012b04 <MX_NetXDuo_Init+0x21c>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	f240 72bc 	movw	r2, #1980	; 0x7bc
 8012956:	9205      	str	r2, [sp, #20]
 8012958:	220a      	movs	r2, #10
 801295a:	9204      	str	r2, [sp, #16]
 801295c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012960:	9203      	str	r2, [sp, #12]
 8012962:	9302      	str	r3, [sp, #8]
 8012964:	4b6a      	ldr	r3, [pc, #424]	; (8012b10 <MX_NetXDuo_Init+0x228>)
 8012966:	9301      	str	r3, [sp, #4]
 8012968:	4b68      	ldr	r3, [pc, #416]	; (8012b0c <MX_NetXDuo_Init+0x224>)
 801296a:	9300      	str	r3, [sp, #0]
 801296c:	2300      	movs	r3, #0
 801296e:	2200      	movs	r2, #0
 8012970:	4968      	ldr	r1, [pc, #416]	; (8012b14 <MX_NetXDuo_Init+0x22c>)
 8012972:	4869      	ldr	r0, [pc, #420]	; (8012b18 <MX_NetXDuo_Init+0x230>)
 8012974:	f7fb f98e 	bl	800dc94 <_nxe_ip_create>
 8012978:	60f8      	str	r0, [r7, #12]
                     pointer, 2 * DEFAULT_MEMORY_SIZE, DEFAULT_PRIORITY);

  if (ret != NX_SUCCESS)
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d001      	beq.n	8012984 <MX_NetXDuo_Init+0x9c>
  {
    return NX_NOT_ENABLED;
 8012980:	2314      	movs	r3, #20
 8012982:	e0b8      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /* Allocate the packet pool. */
  ret = tx_byte_allocate(byte_pool, (VOID **) &pointer, DEFAULT_MEMORY_SIZE, TX_NO_WAIT);
 8012984:	2300      	movs	r3, #0
 8012986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801298a:	495e      	ldr	r1, [pc, #376]	; (8012b04 <MX_NetXDuo_Init+0x21c>)
 801298c:	68b8      	ldr	r0, [r7, #8]
 801298e:	f7ff f87f 	bl	8011a90 <_txe_byte_allocate>
 8012992:	60f8      	str	r0, [r7, #12]

  if (ret != TX_SUCCESS)
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d001      	beq.n	801299e <MX_NetXDuo_Init+0xb6>
  {
    return NX_NOT_ENABLED;
 801299a:	2314      	movs	r3, #20
 801299c:	e0ab      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /*  Enable the ARP protocol and provide the ARP cache size for the IP instance */
  ret = nx_arp_enable(&IpInstance, (VOID *)pointer, DEFAULT_MEMORY_SIZE);
 801299e:	4b59      	ldr	r3, [pc, #356]	; (8012b04 <MX_NetXDuo_Init+0x21c>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80129a6:	4619      	mov	r1, r3
 80129a8:	485b      	ldr	r0, [pc, #364]	; (8012b18 <MX_NetXDuo_Init+0x230>)
 80129aa:	f7fb f865 	bl	800da78 <_nxe_arp_enable>
 80129ae:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d001      	beq.n	80129ba <MX_NetXDuo_Init+0xd2>
  {
    return NX_NOT_ENABLED;
 80129b6:	2314      	movs	r3, #20
 80129b8:	e09d      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /* Enable the ICMP */
  ret = nx_icmp_enable(&IpInstance);
 80129ba:	4857      	ldr	r0, [pc, #348]	; (8012b18 <MX_NetXDuo_Init+0x230>)
 80129bc:	f7fb f8a8 	bl	800db10 <_nxe_icmp_enable>
 80129c0:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d001      	beq.n	80129cc <MX_NetXDuo_Init+0xe4>
  {
    return NX_NOT_ENABLED;
 80129c8:	2314      	movs	r3, #20
 80129ca:	e094      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /* Enable the UDP protocol required for  DHCP communication */
  ret = nx_udp_enable(&IpInstance);
 80129cc:	4852      	ldr	r0, [pc, #328]	; (8012b18 <MX_NetXDuo_Init+0x230>)
 80129ce:	f7fb fc65 	bl	800e29c <_nxe_udp_enable>
 80129d2:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d001      	beq.n	80129de <MX_NetXDuo_Init+0xf6>
  {
    return NX_NOT_ENABLED;
 80129da:	2314      	movs	r3, #20
 80129dc:	e08b      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /* Allocate the main thread pool. */
  ret = tx_byte_allocate(byte_pool, (VOID **) &pointer, 2 * DEFAULT_MEMORY_SIZE, TX_NO_WAIT);
 80129de:	2300      	movs	r3, #0
 80129e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80129e4:	4947      	ldr	r1, [pc, #284]	; (8012b04 <MX_NetXDuo_Init+0x21c>)
 80129e6:	68b8      	ldr	r0, [r7, #8]
 80129e8:	f7ff f852 	bl	8011a90 <_txe_byte_allocate>
 80129ec:	60f8      	str	r0, [r7, #12]

  if (ret != TX_SUCCESS)
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d001      	beq.n	80129f8 <MX_NetXDuo_Init+0x110>
  {
    return NX_NOT_ENABLED;
 80129f4:	2314      	movs	r3, #20
 80129f6:	e07e      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /* Create the main thread */
  ret = tx_thread_create(&AppMainThread, "App Main thread", App_Main_Thread_Entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 80129f8:	4b42      	ldr	r3, [pc, #264]	; (8012b04 <MX_NetXDuo_Init+0x21c>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	22b0      	movs	r2, #176	; 0xb0
 80129fe:	9206      	str	r2, [sp, #24]
 8012a00:	2201      	movs	r2, #1
 8012a02:	9205      	str	r2, [sp, #20]
 8012a04:	2200      	movs	r2, #0
 8012a06:	9204      	str	r2, [sp, #16]
 8012a08:	220a      	movs	r2, #10
 8012a0a:	9203      	str	r2, [sp, #12]
 8012a0c:	220a      	movs	r2, #10
 8012a0e:	9202      	str	r2, [sp, #8]
 8012a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a14:	9201      	str	r2, [sp, #4]
 8012a16:	9300      	str	r3, [sp, #0]
 8012a18:	2300      	movs	r3, #0
 8012a1a:	4a40      	ldr	r2, [pc, #256]	; (8012b1c <MX_NetXDuo_Init+0x234>)
 8012a1c:	4940      	ldr	r1, [pc, #256]	; (8012b20 <MX_NetXDuo_Init+0x238>)
 8012a1e:	4841      	ldr	r0, [pc, #260]	; (8012b24 <MX_NetXDuo_Init+0x23c>)
 8012a20:	f7ff fcc6 	bl	80123b0 <_txe_thread_create>
 8012a24:	60f8      	str	r0, [r7, #12]
                        DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d001      	beq.n	8012a30 <MX_NetXDuo_Init+0x148>
  {
    return NX_NOT_ENABLED;
 8012a2c:	2314      	movs	r3, #20
 8012a2e:	e062      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /* Allocate the memory for UDP server thread   */
  ret = tx_byte_allocate(byte_pool, (VOID **) &pointer, 2 * DEFAULT_MEMORY_SIZE, TX_NO_WAIT);
 8012a30:	2300      	movs	r3, #0
 8012a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a36:	4933      	ldr	r1, [pc, #204]	; (8012b04 <MX_NetXDuo_Init+0x21c>)
 8012a38:	68b8      	ldr	r0, [r7, #8]
 8012a3a:	f7ff f829 	bl	8011a90 <_txe_byte_allocate>
 8012a3e:	60f8      	str	r0, [r7, #12]

  if (ret != TX_SUCCESS)
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d001      	beq.n	8012a4a <MX_NetXDuo_Init+0x162>
  {
    return NX_NOT_ENABLED;
 8012a46:	2314      	movs	r3, #20
 8012a48:	e055      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /* create the UDP server thread */
  ret = tx_thread_create(&AppUDPThread, "App UDP Thread", App_UDP_Thread_Entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 8012a4a:	4b2e      	ldr	r3, [pc, #184]	; (8012b04 <MX_NetXDuo_Init+0x21c>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	22b0      	movs	r2, #176	; 0xb0
 8012a50:	9206      	str	r2, [sp, #24]
 8012a52:	2200      	movs	r2, #0
 8012a54:	9205      	str	r2, [sp, #20]
 8012a56:	2200      	movs	r2, #0
 8012a58:	9204      	str	r2, [sp, #16]
 8012a5a:	220a      	movs	r2, #10
 8012a5c:	9203      	str	r2, [sp, #12]
 8012a5e:	220a      	movs	r2, #10
 8012a60:	9202      	str	r2, [sp, #8]
 8012a62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a66:	9201      	str	r2, [sp, #4]
 8012a68:	9300      	str	r3, [sp, #0]
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	4a2e      	ldr	r2, [pc, #184]	; (8012b28 <MX_NetXDuo_Init+0x240>)
 8012a6e:	492f      	ldr	r1, [pc, #188]	; (8012b2c <MX_NetXDuo_Init+0x244>)
 8012a70:	482f      	ldr	r0, [pc, #188]	; (8012b30 <MX_NetXDuo_Init+0x248>)
 8012a72:	f7ff fc9d 	bl	80123b0 <_txe_thread_create>
 8012a76:	60f8      	str	r0, [r7, #12]
                        DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_DONT_START);

  if (ret != TX_SUCCESS)
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d001      	beq.n	8012a82 <MX_NetXDuo_Init+0x19a>
  {
    return NX_NOT_ENABLED;
 8012a7e:	2314      	movs	r3, #20
 8012a80:	e039      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /* Allocate the memory for Link thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8012a82:	2300      	movs	r3, #0
 8012a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a88:	491e      	ldr	r1, [pc, #120]	; (8012b04 <MX_NetXDuo_Init+0x21c>)
 8012a8a:	68b8      	ldr	r0, [r7, #8]
 8012a8c:	f7ff f800 	bl	8011a90 <_txe_byte_allocate>
 8012a90:	4603      	mov	r3, r0
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d001      	beq.n	8012a9a <MX_NetXDuo_Init+0x1b2>
  {
    return TX_POOL_ERROR;
 8012a96:	2302      	movs	r3, #2
 8012a98:	e02d      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /* create the Link thread */
  ret = tx_thread_create(&AppLinkThread, "App Link Thread", App_Link_Thread_Entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 8012a9a:	4b1a      	ldr	r3, [pc, #104]	; (8012b04 <MX_NetXDuo_Init+0x21c>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	22b0      	movs	r2, #176	; 0xb0
 8012aa0:	9206      	str	r2, [sp, #24]
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	9205      	str	r2, [sp, #20]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	9204      	str	r2, [sp, #16]
 8012aaa:	220b      	movs	r2, #11
 8012aac:	9203      	str	r2, [sp, #12]
 8012aae:	220b      	movs	r2, #11
 8012ab0:	9202      	str	r2, [sp, #8]
 8012ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012ab6:	9201      	str	r2, [sp, #4]
 8012ab8:	9300      	str	r3, [sp, #0]
 8012aba:	2300      	movs	r3, #0
 8012abc:	4a1d      	ldr	r2, [pc, #116]	; (8012b34 <MX_NetXDuo_Init+0x24c>)
 8012abe:	491e      	ldr	r1, [pc, #120]	; (8012b38 <MX_NetXDuo_Init+0x250>)
 8012ac0:	481e      	ldr	r0, [pc, #120]	; (8012b3c <MX_NetXDuo_Init+0x254>)
 8012ac2:	f7ff fc75 	bl	80123b0 <_txe_thread_create>
 8012ac6:	60f8      	str	r0, [r7, #12]
                         LINK_PRIORITY, LINK_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d001      	beq.n	8012ad2 <MX_NetXDuo_Init+0x1ea>
  {
    return NX_NOT_ENABLED;
 8012ace:	2314      	movs	r3, #20
 8012ad0:	e011      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /* create the DHCP client */
  ret = nx_dhcp_create(&DHCPClient, &IpInstance, "DHCP Client");
 8012ad2:	4a1b      	ldr	r2, [pc, #108]	; (8012b40 <MX_NetXDuo_Init+0x258>)
 8012ad4:	4910      	ldr	r1, [pc, #64]	; (8012b18 <MX_NetXDuo_Init+0x230>)
 8012ad6:	481b      	ldr	r0, [pc, #108]	; (8012b44 <MX_NetXDuo_Init+0x25c>)
 8012ad8:	f7f2 fd00 	bl	80054dc <_nxe_dhcp_create>
 8012adc:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d001      	beq.n	8012ae8 <MX_NetXDuo_Init+0x200>
  {
    return NX_NOT_ENABLED;
 8012ae4:	2314      	movs	r3, #20
 8012ae6:	e006      	b.n	8012af6 <MX_NetXDuo_Init+0x20e>
  }

  /* Create a semaphore to be used to notify the main thread when the IP address is resolved*/
  tx_semaphore_create(&Semaphore, "DHCP Semaphore", 0);
 8012ae8:	231c      	movs	r3, #28
 8012aea:	2200      	movs	r2, #0
 8012aec:	4916      	ldr	r1, [pc, #88]	; (8012b48 <MX_NetXDuo_Init+0x260>)
 8012aee:	4817      	ldr	r0, [pc, #92]	; (8012b4c <MX_NetXDuo_Init+0x264>)
 8012af0:	f7ff fb68 	bl	80121c4 <_txe_semaphore_create>
  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 8012af4:	68fb      	ldr	r3, [r7, #12]
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3710      	adds	r7, #16
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	080140e8 	.word	0x080140e8
 8012b04:	2000b198 	.word	0x2000b198
 8012b08:	08014114 	.word	0x08014114
 8012b0c:	200089cc 	.word	0x200089cc
 8012b10:	080079a1 	.word	0x080079a1
 8012b14:	08014128 	.word	0x08014128
 8012b18:	20008a08 	.word	0x20008a08
 8012b1c:	08012b6d 	.word	0x08012b6d
 8012b20:	0801413c 	.word	0x0801413c
 8012b24:	200087a0 	.word	0x200087a0
 8012b28:	08012c29 	.word	0x08012c29
 8012b2c:	0801414c 	.word	0x0801414c
 8012b30:	20008850 	.word	0x20008850
 8012b34:	08012d85 	.word	0x08012d85
 8012b38:	0801415c 	.word	0x0801415c
 8012b3c:	20008900 	.word	0x20008900
 8012b40:	0801416c 	.word	0x0801416c
 8012b44:	200091c4 	.word	0x200091c4
 8012b48:	08014178 	.word	0x08014178
 8012b4c:	200089b0 	.word	0x200089b0

08012b50 <ip_address_change_notify_callback>:
* @param ip_instance: NX_IP instance
* @param ptr: user data
* @retval none
*/
static VOID ip_address_change_notify_callback(NX_IP *ip_instance, VOID *ptr)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
  /* release the semaphore as soon as an IP address is available */
  tx_semaphore_put(&Semaphore);
 8012b5a:	4803      	ldr	r0, [pc, #12]	; (8012b68 <ip_address_change_notify_callback+0x18>)
 8012b5c:	f7ff fc0a 	bl	8012374 <_txe_semaphore_put>
}
 8012b60:	bf00      	nop
 8012b62:	3708      	adds	r7, #8
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	200089b0 	.word	0x200089b0

08012b6c <App_Main_Thread_Entry>:
* @brief  Main thread entry.
* @param thread_input: ULONG user argument used by the thread entry
* @retval none
*/
static VOID App_Main_Thread_Entry(ULONG thread_input)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b086      	sub	sp, #24
 8012b70:	af02      	add	r7, sp, #8
 8012b72:	6078      	str	r0, [r7, #4]
  UINT ret;

  ret = nx_ip_address_change_notify(&IpInstance, ip_address_change_notify_callback, NULL);
 8012b74:	2200      	movs	r2, #0
 8012b76:	4923      	ldr	r1, [pc, #140]	; (8012c04 <App_Main_Thread_Entry+0x98>)
 8012b78:	4823      	ldr	r0, [pc, #140]	; (8012c08 <App_Main_Thread_Entry+0x9c>)
 8012b7a:	f7fb f809 	bl	800db90 <_nxe_ip_address_change_notify>
 8012b7e:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d001      	beq.n	8012b8a <App_Main_Thread_Entry+0x1e>
  {
    Error_Handler();
 8012b86:	f7ee f8df 	bl	8000d48 <Error_Handler>
  }

  ret = nx_dhcp_start(&DHCPClient);
 8012b8a:	4820      	ldr	r0, [pc, #128]	; (8012c0c <App_Main_Thread_Entry+0xa0>)
 8012b8c:	f7f2 fe96 	bl	80058bc <_nxe_dhcp_start>
 8012b90:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d001      	beq.n	8012b9c <App_Main_Thread_Entry+0x30>
  {
    Error_Handler();
 8012b98:	f7ee f8d6 	bl	8000d48 <Error_Handler>
  }

  /* wait until an IP address is ready */
  if(tx_semaphore_get(&Semaphore, TX_WAIT_FOREVER) != TX_SUCCESS)
 8012b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8012ba0:	481b      	ldr	r0, [pc, #108]	; (8012c10 <App_Main_Thread_Entry+0xa4>)
 8012ba2:	f7ff fba5 	bl	80122f0 <_txe_semaphore_get>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d001      	beq.n	8012bb0 <App_Main_Thread_Entry+0x44>
  {
    Error_Handler();
 8012bac:	f7ee f8cc 	bl	8000d48 <Error_Handler>
  }
  /* get IP address */
  ret = nx_ip_address_get(&IpInstance, &IpAddress, &NetMask);
 8012bb0:	4a18      	ldr	r2, [pc, #96]	; (8012c14 <App_Main_Thread_Entry+0xa8>)
 8012bb2:	4919      	ldr	r1, [pc, #100]	; (8012c18 <App_Main_Thread_Entry+0xac>)
 8012bb4:	4814      	ldr	r0, [pc, #80]	; (8012c08 <App_Main_Thread_Entry+0x9c>)
 8012bb6:	f7fb f829 	bl	800dc0c <_nxe_ip_address_get>
 8012bba:	60f8      	str	r0, [r7, #12]

  PRINT_IP_ADDRESS(IpAddress);
 8012bbc:	4b16      	ldr	r3, [pc, #88]	; (8012c18 <App_Main_Thread_Entry+0xac>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	0e19      	lsrs	r1, r3, #24
 8012bc2:	4b15      	ldr	r3, [pc, #84]	; (8012c18 <App_Main_Thread_Entry+0xac>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	0c1b      	lsrs	r3, r3, #16
 8012bc8:	b2d8      	uxtb	r0, r3
 8012bca:	4b13      	ldr	r3, [pc, #76]	; (8012c18 <App_Main_Thread_Entry+0xac>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	0a1b      	lsrs	r3, r3, #8
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	4a11      	ldr	r2, [pc, #68]	; (8012c18 <App_Main_Thread_Entry+0xac>)
 8012bd4:	6812      	ldr	r2, [r2, #0]
 8012bd6:	b2d2      	uxtb	r2, r2
 8012bd8:	9201      	str	r2, [sp, #4]
 8012bda:	9300      	str	r3, [sp, #0]
 8012bdc:	4603      	mov	r3, r0
 8012bde:	460a      	mov	r2, r1
 8012be0:	490e      	ldr	r1, [pc, #56]	; (8012c1c <App_Main_Thread_Entry+0xb0>)
 8012be2:	480f      	ldr	r0, [pc, #60]	; (8012c20 <App_Main_Thread_Entry+0xb4>)
 8012be4:	f000 f964 	bl	8012eb0 <iprintf>

  if (ret != NX_SUCCESS)
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d001      	beq.n	8012bf2 <App_Main_Thread_Entry+0x86>
  {
    Error_Handler();
 8012bee:	f7ee f8ab 	bl	8000d48 <Error_Handler>
  }

  /* the network is correctly initialized, start the TCP server thread */
  tx_thread_resume(&AppUDPThread);
 8012bf2:	480c      	ldr	r0, [pc, #48]	; (8012c24 <App_Main_Thread_Entry+0xb8>)
 8012bf4:	f7ff fd16 	bl	8012624 <_txe_thread_resume>

  /* this thread is not needed any more, relinquish it */
  tx_thread_relinquish();
 8012bf8:	f7ff fcf8 	bl	80125ec <_txe_thread_relinquish>

  return;
 8012bfc:	bf00      	nop
}
 8012bfe:	3710      	adds	r7, #16
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}
 8012c04:	08012b51 	.word	0x08012b51
 8012c08:	20008a08 	.word	0x20008a08
 8012c0c:	200091c4 	.word	0x200091c4
 8012c10:	200089b0 	.word	0x200089b0
 8012c14:	2000b194 	.word	0x2000b194
 8012c18:	2000b190 	.word	0x2000b190
 8012c1c:	08014188 	.word	0x08014188
 8012c20:	08014194 	.word	0x08014194
 8012c24:	20008850 	.word	0x20008850

08012c28 <App_UDP_Thread_Entry>:

static VOID App_UDP_Thread_Entry(ULONG thread_input)
{
 8012c28:	b5b0      	push	{r4, r5, r7, lr}
 8012c2a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8012c2e:	af04      	add	r7, sp, #16
 8012c30:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8012c34:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8012c38:	6018      	str	r0, [r3, #0]
  UCHAR data_buffer[512];
  ULONG source_ip_address;
  NX_PACKET *data_packet;

  /* create the UDP socket */
  ret = nx_udp_socket_create(&IpInstance, &UDPSocket, "UDP Server Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, QUEUE_MAX_SIZE);
 8012c3a:	2378      	movs	r3, #120	; 0x78
 8012c3c:	9303      	str	r3, [sp, #12]
 8012c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c42:	9302      	str	r3, [sp, #8]
 8012c44:	2380      	movs	r3, #128	; 0x80
 8012c46:	9301      	str	r3, [sp, #4]
 8012c48:	2300      	movs	r3, #0
 8012c4a:	9300      	str	r3, [sp, #0]
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	4a47      	ldr	r2, [pc, #284]	; (8012d6c <App_UDP_Thread_Entry+0x144>)
 8012c50:	4947      	ldr	r1, [pc, #284]	; (8012d70 <App_UDP_Thread_Entry+0x148>)
 8012c52:	4848      	ldr	r0, [pc, #288]	; (8012d74 <App_UDP_Thread_Entry+0x14c>)
 8012c54:	f7fb fba0 	bl	800e398 <_nxe_udp_socket_create>
 8012c58:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

  if (ret != NX_SUCCESS)
 8012c5c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d001      	beq.n	8012c68 <App_UDP_Thread_Entry+0x40>
  {
     Error_Handler();
 8012c64:	f7ee f870 	bl	8000d48 <Error_Handler>
  }

  /* bind the socket indefinitely on the required port */
  ret = nx_udp_socket_bind(&UDPSocket, DEFAULT_PORT, TX_WAIT_FOREVER);
 8012c68:	f04f 32ff 	mov.w	r2, #4294967295
 8012c6c:	f241 7170 	movw	r1, #6000	; 0x1770
 8012c70:	483f      	ldr	r0, [pc, #252]	; (8012d70 <App_UDP_Thread_Entry+0x148>)
 8012c72:	f7fb fb4b 	bl	800e30c <_nxe_udp_socket_bind>
 8012c76:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

  if (ret != NX_SUCCESS)
 8012c7a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d002      	beq.n	8012c88 <App_UDP_Thread_Entry+0x60>
  {
     Error_Handler();
 8012c82:	f7ee f861 	bl	8000d48 <Error_Handler>
 8012c86:	e004      	b.n	8012c92 <App_UDP_Thread_Entry+0x6a>
  }
  else
  {
    printf("UDP Server listening on PORT %d.. \n", DEFAULT_PORT);
 8012c88:	f241 7170 	movw	r1, #6000	; 0x1770
 8012c8c:	483a      	ldr	r0, [pc, #232]	; (8012d78 <App_UDP_Thread_Entry+0x150>)
 8012c8e:	f000 f90f 	bl	8012eb0 <iprintf>
  }

  while(1)
  {
    TX_MEMSET(data_buffer, '\0', sizeof(data_buffer));
 8012c92:	f107 0314 	add.w	r3, r7, #20
 8012c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c9a:	2100      	movs	r1, #0
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f000 f8ff 	bl	8012ea0 <memset>

    /* wait for data for 1 sec */
    ret = nx_udp_socket_receive(&UDPSocket, &data_packet, 100);
 8012ca2:	f107 030c 	add.w	r3, r7, #12
 8012ca6:	2264      	movs	r2, #100	; 0x64
 8012ca8:	4619      	mov	r1, r3
 8012caa:	4831      	ldr	r0, [pc, #196]	; (8012d70 <App_UDP_Thread_Entry+0x148>)
 8012cac:	f7fb fc08 	bl	800e4c0 <_nxe_udp_socket_receive>
 8012cb0:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

    if (ret == NX_SUCCESS)
 8012cb4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d151      	bne.n	8012d60 <App_UDP_Thread_Entry+0x138>
    {
      /* data is available, read it into the data buffer */
      nx_packet_data_retrieve(data_packet, data_buffer, &bytes_read);
 8012cbc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8012cc0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8012cca:	f107 0114 	add.w	r1, r7, #20
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7fb f98e 	bl	800dff0 <_nxe_packet_data_retrieve>

     // send by hercules A:1,1$0D$0A == A:1,1\r\n
    //  cmd_process(data_buffer, bytes_read);

      /* get info about the client address and port */
      nx_udp_source_extract(data_packet, &source_ip_address, &source_port);
 8012cd4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8012cd8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8012ce2:	f107 0110 	add.w	r1, r7, #16
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7fb fcb2 	bl	800e650 <_nxe_udp_source_extract>

      /* print the client address, the remote port and the received data */
      PRINT_DATA(source_ip_address, source_port, data_buffer);
 8012cec:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8012cf0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	0e18      	lsrs	r0, r3, #24
 8012cf8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8012cfc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	0c1b      	lsrs	r3, r3, #16
 8012d04:	b2dc      	uxtb	r4, r3
 8012d06:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8012d0a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	0a1b      	lsrs	r3, r3, #8
 8012d12:	b2dd      	uxtb	r5, r3
 8012d14:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8012d18:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	b2db      	uxtb	r3, r3
 8012d20:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8012d24:	f107 0114 	add.w	r1, r7, #20
 8012d28:	9102      	str	r1, [sp, #8]
 8012d2a:	9201      	str	r2, [sp, #4]
 8012d2c:	9300      	str	r3, [sp, #0]
 8012d2e:	462b      	mov	r3, r5
 8012d30:	4622      	mov	r2, r4
 8012d32:	4601      	mov	r1, r0
 8012d34:	4811      	ldr	r0, [pc, #68]	; (8012d7c <App_UDP_Thread_Entry+0x154>)
 8012d36:	f000 f8bb 	bl	8012eb0 <iprintf>

      /* resend the same packet to the client */
      ret =  nx_udp_socket_send(&UDPSocket, data_packet, source_ip_address, source_port);
 8012d3a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8012d3e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012d42:	681a      	ldr	r2, [r3, #0]
 8012d44:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012d48:	f107 010c 	add.w	r1, r7, #12
 8012d4c:	4808      	ldr	r0, [pc, #32]	; (8012d70 <App_UDP_Thread_Entry+0x148>)
 8012d4e:	f7fb fbf9 	bl	800e544 <_nxe_udp_socket_send>
 8012d52:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

      /* toggle the green led to monitor visually the traffic */
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8012d56:	2101      	movs	r1, #1
 8012d58:	4809      	ldr	r0, [pc, #36]	; (8012d80 <App_UDP_Thread_Entry+0x158>)
 8012d5a:	f7f0 fa5a 	bl	8003212 <HAL_GPIO_TogglePin>
 8012d5e:	e798      	b.n	8012c92 <App_UDP_Thread_Entry+0x6a>
    }
    else
    {
        /* the server is in idle state, toggle the green led */
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8012d60:	2101      	movs	r1, #1
 8012d62:	4807      	ldr	r0, [pc, #28]	; (8012d80 <App_UDP_Thread_Entry+0x158>)
 8012d64:	f7f0 fa55 	bl	8003212 <HAL_GPIO_TogglePin>
    TX_MEMSET(data_buffer, '\0', sizeof(data_buffer));
 8012d68:	e793      	b.n	8012c92 <App_UDP_Thread_Entry+0x6a>
 8012d6a:	bf00      	nop
 8012d6c:	080141b0 	.word	0x080141b0
 8012d70:	2000b118 	.word	0x2000b118
 8012d74:	20008a08 	.word	0x20008a08
 8012d78:	080141c4 	.word	0x080141c4
 8012d7c:	080141e8 	.word	0x080141e8
 8012d80:	40020400 	.word	0x40020400

08012d84 <App_Link_Thread_Entry>:
* @brief  Link thread entry
* @param thread_input: ULONG thread parameter
* @retval none
*/
static VOID App_Link_Thread_Entry(ULONG thread_input)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b088      	sub	sp, #32
 8012d88:	af02      	add	r7, sp, #8
 8012d8a:	6078      	str	r0, [r7, #4]
  ULONG actual_status;
  UINT linkdown = 0, status;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	617b      	str	r3, [r7, #20]

  while(1)
  {
    /* Get Physical Link stackavailtus. */
    status = nx_ip_interface_status_check(&IpInstance, 0, NX_IP_LINK_ENABLED,
 8012d90:	f107 030c 	add.w	r3, r7, #12
 8012d94:	220a      	movs	r2, #10
 8012d96:	9200      	str	r2, [sp, #0]
 8012d98:	2204      	movs	r2, #4
 8012d9a:	2100      	movs	r1, #0
 8012d9c:	481e      	ldr	r0, [pc, #120]	; (8012e18 <App_Link_Thread_Entry+0x94>)
 8012d9e:	f7fb f889 	bl	800deb4 <_nxe_ip_interface_status_check>
 8012da2:	6138      	str	r0, [r7, #16]
                                      &actual_status, 10);

    if(status == NX_SUCCESS)
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d129      	bne.n	8012dfe <App_Link_Thread_Entry+0x7a>
    {
      if(linkdown == 1)
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	2b01      	cmp	r3, #1
 8012dae:	d12e      	bne.n	8012e0e <App_Link_Thread_Entry+0x8a>
      {
        linkdown = 0;
 8012db0:	2300      	movs	r3, #0
 8012db2:	617b      	str	r3, [r7, #20]
        status = nx_ip_interface_status_check(&IpInstance, 0, NX_IP_ADDRESS_RESOLVED,
 8012db4:	f107 030c 	add.w	r3, r7, #12
 8012db8:	220a      	movs	r2, #10
 8012dba:	9200      	str	r2, [sp, #0]
 8012dbc:	2202      	movs	r2, #2
 8012dbe:	2100      	movs	r1, #0
 8012dc0:	4815      	ldr	r0, [pc, #84]	; (8012e18 <App_Link_Thread_Entry+0x94>)
 8012dc2:	f7fb f877 	bl	800deb4 <_nxe_ip_interface_status_check>
 8012dc6:	6138      	str	r0, [r7, #16]
                                      &actual_status, 10);
        if(status == NX_SUCCESS)
 8012dc8:	693b      	ldr	r3, [r7, #16]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d106      	bne.n	8012ddc <App_Link_Thread_Entry+0x58>
        {
          /* The network cable is connected again. */
          printf("The network cable is connected again.\n");
 8012dce:	4813      	ldr	r0, [pc, #76]	; (8012e1c <App_Link_Thread_Entry+0x98>)
 8012dd0:	f000 f8f4 	bl	8012fbc <puts>
          /* Print UDP Echo Server is available again. */
          printf("UDP Echo Server is available again.\n");
 8012dd4:	4812      	ldr	r0, [pc, #72]	; (8012e20 <App_Link_Thread_Entry+0x9c>)
 8012dd6:	f000 f8f1 	bl	8012fbc <puts>
 8012dda:	e018      	b.n	8012e0e <App_Link_Thread_Entry+0x8a>
        }
        else
        {
          /* The network cable is connected. */
          printf("The network cable is connected.\n");
 8012ddc:	4811      	ldr	r0, [pc, #68]	; (8012e24 <App_Link_Thread_Entry+0xa0>)
 8012dde:	f000 f8ed 	bl	8012fbc <puts>
          /* Send command to Enable Nx driver. */
          nx_ip_driver_direct_command(&IpInstance, NX_LINK_ENABLE,
 8012de2:	f107 030c 	add.w	r3, r7, #12
 8012de6:	461a      	mov	r2, r3
 8012de8:	2102      	movs	r1, #2
 8012dea:	480b      	ldr	r0, [pc, #44]	; (8012e18 <App_Link_Thread_Entry+0x94>)
 8012dec:	f7fb f822 	bl	800de34 <_nxe_ip_driver_direct_command>
                                      &actual_status);
          /* Restart DHCP Client. */
          nx_dhcp_stop(&DHCPClient);
 8012df0:	480d      	ldr	r0, [pc, #52]	; (8012e28 <App_Link_Thread_Entry+0xa4>)
 8012df2:	f7f2 ff67 	bl	8005cc4 <_nxe_dhcp_stop>
          nx_dhcp_start(&DHCPClient);
 8012df6:	480c      	ldr	r0, [pc, #48]	; (8012e28 <App_Link_Thread_Entry+0xa4>)
 8012df8:	f7f2 fd60 	bl	80058bc <_nxe_dhcp_start>
 8012dfc:	e007      	b.n	8012e0e <App_Link_Thread_Entry+0x8a>
        }
      }
    }
    else
    {
      if(0 == linkdown)
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d104      	bne.n	8012e0e <App_Link_Thread_Entry+0x8a>
      {
        linkdown = 1;
 8012e04:	2301      	movs	r3, #1
 8012e06:	617b      	str	r3, [r7, #20]
        /* The network cable is not connected. */
        printf("The network cable is not connected.\n");
 8012e08:	4808      	ldr	r0, [pc, #32]	; (8012e2c <App_Link_Thread_Entry+0xa8>)
 8012e0a:	f000 f8d7 	bl	8012fbc <puts>
      }
    }

    tx_thread_sleep(NX_ETH_CABLE_CONNECTION_CHECK_PERIOD);
 8012e0e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8012e12:	f7fd feb5 	bl	8010b80 <_tx_thread_sleep>
    status = nx_ip_interface_status_check(&IpInstance, 0, NX_IP_LINK_ENABLED,
 8012e16:	e7bb      	b.n	8012d90 <App_Link_Thread_Entry+0xc>
 8012e18:	20008a08 	.word	0x20008a08
 8012e1c:	08014208 	.word	0x08014208
 8012e20:	08014230 	.word	0x08014230
 8012e24:	08014254 	.word	0x08014254
 8012e28:	200091c4 	.word	0x200091c4
 8012e2c:	08014274 	.word	0x08014274

08012e30 <__errno>:
 8012e30:	4b01      	ldr	r3, [pc, #4]	; (8012e38 <__errno+0x8>)
 8012e32:	6818      	ldr	r0, [r3, #0]
 8012e34:	4770      	bx	lr
 8012e36:	bf00      	nop
 8012e38:	20000090 	.word	0x20000090

08012e3c <__libc_init_array>:
 8012e3c:	b570      	push	{r4, r5, r6, lr}
 8012e3e:	4d0d      	ldr	r5, [pc, #52]	; (8012e74 <__libc_init_array+0x38>)
 8012e40:	4c0d      	ldr	r4, [pc, #52]	; (8012e78 <__libc_init_array+0x3c>)
 8012e42:	1b64      	subs	r4, r4, r5
 8012e44:	10a4      	asrs	r4, r4, #2
 8012e46:	2600      	movs	r6, #0
 8012e48:	42a6      	cmp	r6, r4
 8012e4a:	d109      	bne.n	8012e60 <__libc_init_array+0x24>
 8012e4c:	4d0b      	ldr	r5, [pc, #44]	; (8012e7c <__libc_init_array+0x40>)
 8012e4e:	4c0c      	ldr	r4, [pc, #48]	; (8012e80 <__libc_init_array+0x44>)
 8012e50:	f001 f8f4 	bl	801403c <_init>
 8012e54:	1b64      	subs	r4, r4, r5
 8012e56:	10a4      	asrs	r4, r4, #2
 8012e58:	2600      	movs	r6, #0
 8012e5a:	42a6      	cmp	r6, r4
 8012e5c:	d105      	bne.n	8012e6a <__libc_init_array+0x2e>
 8012e5e:	bd70      	pop	{r4, r5, r6, pc}
 8012e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e64:	4798      	blx	r3
 8012e66:	3601      	adds	r6, #1
 8012e68:	e7ee      	b.n	8012e48 <__libc_init_array+0xc>
 8012e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e6e:	4798      	blx	r3
 8012e70:	3601      	adds	r6, #1
 8012e72:	e7f2      	b.n	8012e5a <__libc_init_array+0x1e>
 8012e74:	08014400 	.word	0x08014400
 8012e78:	08014400 	.word	0x08014400
 8012e7c:	08014400 	.word	0x08014400
 8012e80:	08014404 	.word	0x08014404

08012e84 <memcpy>:
 8012e84:	440a      	add	r2, r1
 8012e86:	4291      	cmp	r1, r2
 8012e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8012e8c:	d100      	bne.n	8012e90 <memcpy+0xc>
 8012e8e:	4770      	bx	lr
 8012e90:	b510      	push	{r4, lr}
 8012e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e9a:	4291      	cmp	r1, r2
 8012e9c:	d1f9      	bne.n	8012e92 <memcpy+0xe>
 8012e9e:	bd10      	pop	{r4, pc}

08012ea0 <memset>:
 8012ea0:	4402      	add	r2, r0
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	4293      	cmp	r3, r2
 8012ea6:	d100      	bne.n	8012eaa <memset+0xa>
 8012ea8:	4770      	bx	lr
 8012eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8012eae:	e7f9      	b.n	8012ea4 <memset+0x4>

08012eb0 <iprintf>:
 8012eb0:	b40f      	push	{r0, r1, r2, r3}
 8012eb2:	4b0a      	ldr	r3, [pc, #40]	; (8012edc <iprintf+0x2c>)
 8012eb4:	b513      	push	{r0, r1, r4, lr}
 8012eb6:	681c      	ldr	r4, [r3, #0]
 8012eb8:	b124      	cbz	r4, 8012ec4 <iprintf+0x14>
 8012eba:	69a3      	ldr	r3, [r4, #24]
 8012ebc:	b913      	cbnz	r3, 8012ec4 <iprintf+0x14>
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	f000 faba 	bl	8013438 <__sinit>
 8012ec4:	ab05      	add	r3, sp, #20
 8012ec6:	9a04      	ldr	r2, [sp, #16]
 8012ec8:	68a1      	ldr	r1, [r4, #8]
 8012eca:	9301      	str	r3, [sp, #4]
 8012ecc:	4620      	mov	r0, r4
 8012ece:	f000 fcdd 	bl	801388c <_vfiprintf_r>
 8012ed2:	b002      	add	sp, #8
 8012ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ed8:	b004      	add	sp, #16
 8012eda:	4770      	bx	lr
 8012edc:	20000090 	.word	0x20000090

08012ee0 <_puts_r>:
 8012ee0:	b570      	push	{r4, r5, r6, lr}
 8012ee2:	460e      	mov	r6, r1
 8012ee4:	4605      	mov	r5, r0
 8012ee6:	b118      	cbz	r0, 8012ef0 <_puts_r+0x10>
 8012ee8:	6983      	ldr	r3, [r0, #24]
 8012eea:	b90b      	cbnz	r3, 8012ef0 <_puts_r+0x10>
 8012eec:	f000 faa4 	bl	8013438 <__sinit>
 8012ef0:	69ab      	ldr	r3, [r5, #24]
 8012ef2:	68ac      	ldr	r4, [r5, #8]
 8012ef4:	b913      	cbnz	r3, 8012efc <_puts_r+0x1c>
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	f000 fa9e 	bl	8013438 <__sinit>
 8012efc:	4b2c      	ldr	r3, [pc, #176]	; (8012fb0 <_puts_r+0xd0>)
 8012efe:	429c      	cmp	r4, r3
 8012f00:	d120      	bne.n	8012f44 <_puts_r+0x64>
 8012f02:	686c      	ldr	r4, [r5, #4]
 8012f04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f06:	07db      	lsls	r3, r3, #31
 8012f08:	d405      	bmi.n	8012f16 <_puts_r+0x36>
 8012f0a:	89a3      	ldrh	r3, [r4, #12]
 8012f0c:	0598      	lsls	r0, r3, #22
 8012f0e:	d402      	bmi.n	8012f16 <_puts_r+0x36>
 8012f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f12:	f000 fb41 	bl	8013598 <__retarget_lock_acquire_recursive>
 8012f16:	89a3      	ldrh	r3, [r4, #12]
 8012f18:	0719      	lsls	r1, r3, #28
 8012f1a:	d51d      	bpl.n	8012f58 <_puts_r+0x78>
 8012f1c:	6923      	ldr	r3, [r4, #16]
 8012f1e:	b1db      	cbz	r3, 8012f58 <_puts_r+0x78>
 8012f20:	3e01      	subs	r6, #1
 8012f22:	68a3      	ldr	r3, [r4, #8]
 8012f24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012f28:	3b01      	subs	r3, #1
 8012f2a:	60a3      	str	r3, [r4, #8]
 8012f2c:	bb39      	cbnz	r1, 8012f7e <_puts_r+0x9e>
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	da38      	bge.n	8012fa4 <_puts_r+0xc4>
 8012f32:	4622      	mov	r2, r4
 8012f34:	210a      	movs	r1, #10
 8012f36:	4628      	mov	r0, r5
 8012f38:	f000 f886 	bl	8013048 <__swbuf_r>
 8012f3c:	3001      	adds	r0, #1
 8012f3e:	d011      	beq.n	8012f64 <_puts_r+0x84>
 8012f40:	250a      	movs	r5, #10
 8012f42:	e011      	b.n	8012f68 <_puts_r+0x88>
 8012f44:	4b1b      	ldr	r3, [pc, #108]	; (8012fb4 <_puts_r+0xd4>)
 8012f46:	429c      	cmp	r4, r3
 8012f48:	d101      	bne.n	8012f4e <_puts_r+0x6e>
 8012f4a:	68ac      	ldr	r4, [r5, #8]
 8012f4c:	e7da      	b.n	8012f04 <_puts_r+0x24>
 8012f4e:	4b1a      	ldr	r3, [pc, #104]	; (8012fb8 <_puts_r+0xd8>)
 8012f50:	429c      	cmp	r4, r3
 8012f52:	bf08      	it	eq
 8012f54:	68ec      	ldreq	r4, [r5, #12]
 8012f56:	e7d5      	b.n	8012f04 <_puts_r+0x24>
 8012f58:	4621      	mov	r1, r4
 8012f5a:	4628      	mov	r0, r5
 8012f5c:	f000 f8c6 	bl	80130ec <__swsetup_r>
 8012f60:	2800      	cmp	r0, #0
 8012f62:	d0dd      	beq.n	8012f20 <_puts_r+0x40>
 8012f64:	f04f 35ff 	mov.w	r5, #4294967295
 8012f68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f6a:	07da      	lsls	r2, r3, #31
 8012f6c:	d405      	bmi.n	8012f7a <_puts_r+0x9a>
 8012f6e:	89a3      	ldrh	r3, [r4, #12]
 8012f70:	059b      	lsls	r3, r3, #22
 8012f72:	d402      	bmi.n	8012f7a <_puts_r+0x9a>
 8012f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f76:	f000 fb10 	bl	801359a <__retarget_lock_release_recursive>
 8012f7a:	4628      	mov	r0, r5
 8012f7c:	bd70      	pop	{r4, r5, r6, pc}
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	da04      	bge.n	8012f8c <_puts_r+0xac>
 8012f82:	69a2      	ldr	r2, [r4, #24]
 8012f84:	429a      	cmp	r2, r3
 8012f86:	dc06      	bgt.n	8012f96 <_puts_r+0xb6>
 8012f88:	290a      	cmp	r1, #10
 8012f8a:	d004      	beq.n	8012f96 <_puts_r+0xb6>
 8012f8c:	6823      	ldr	r3, [r4, #0]
 8012f8e:	1c5a      	adds	r2, r3, #1
 8012f90:	6022      	str	r2, [r4, #0]
 8012f92:	7019      	strb	r1, [r3, #0]
 8012f94:	e7c5      	b.n	8012f22 <_puts_r+0x42>
 8012f96:	4622      	mov	r2, r4
 8012f98:	4628      	mov	r0, r5
 8012f9a:	f000 f855 	bl	8013048 <__swbuf_r>
 8012f9e:	3001      	adds	r0, #1
 8012fa0:	d1bf      	bne.n	8012f22 <_puts_r+0x42>
 8012fa2:	e7df      	b.n	8012f64 <_puts_r+0x84>
 8012fa4:	6823      	ldr	r3, [r4, #0]
 8012fa6:	250a      	movs	r5, #10
 8012fa8:	1c5a      	adds	r2, r3, #1
 8012faa:	6022      	str	r2, [r4, #0]
 8012fac:	701d      	strb	r5, [r3, #0]
 8012fae:	e7db      	b.n	8012f68 <_puts_r+0x88>
 8012fb0:	08014384 	.word	0x08014384
 8012fb4:	080143a4 	.word	0x080143a4
 8012fb8:	08014364 	.word	0x08014364

08012fbc <puts>:
 8012fbc:	4b02      	ldr	r3, [pc, #8]	; (8012fc8 <puts+0xc>)
 8012fbe:	4601      	mov	r1, r0
 8012fc0:	6818      	ldr	r0, [r3, #0]
 8012fc2:	f7ff bf8d 	b.w	8012ee0 <_puts_r>
 8012fc6:	bf00      	nop
 8012fc8:	20000090 	.word	0x20000090

08012fcc <rand>:
 8012fcc:	4b16      	ldr	r3, [pc, #88]	; (8013028 <rand+0x5c>)
 8012fce:	b510      	push	{r4, lr}
 8012fd0:	681c      	ldr	r4, [r3, #0]
 8012fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012fd4:	b9b3      	cbnz	r3, 8013004 <rand+0x38>
 8012fd6:	2018      	movs	r0, #24
 8012fd8:	f000 fb46 	bl	8013668 <malloc>
 8012fdc:	63a0      	str	r0, [r4, #56]	; 0x38
 8012fde:	b928      	cbnz	r0, 8012fec <rand+0x20>
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	4b12      	ldr	r3, [pc, #72]	; (801302c <rand+0x60>)
 8012fe4:	4812      	ldr	r0, [pc, #72]	; (8013030 <rand+0x64>)
 8012fe6:	214e      	movs	r1, #78	; 0x4e
 8012fe8:	f000 f8ee 	bl	80131c8 <__assert_func>
 8012fec:	4a11      	ldr	r2, [pc, #68]	; (8013034 <rand+0x68>)
 8012fee:	4b12      	ldr	r3, [pc, #72]	; (8013038 <rand+0x6c>)
 8012ff0:	e9c0 2300 	strd	r2, r3, [r0]
 8012ff4:	4b11      	ldr	r3, [pc, #68]	; (801303c <rand+0x70>)
 8012ff6:	6083      	str	r3, [r0, #8]
 8012ff8:	230b      	movs	r3, #11
 8012ffa:	8183      	strh	r3, [r0, #12]
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	2300      	movs	r3, #0
 8013000:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013004:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013006:	4a0e      	ldr	r2, [pc, #56]	; (8013040 <rand+0x74>)
 8013008:	6920      	ldr	r0, [r4, #16]
 801300a:	6963      	ldr	r3, [r4, #20]
 801300c:	490d      	ldr	r1, [pc, #52]	; (8013044 <rand+0x78>)
 801300e:	4342      	muls	r2, r0
 8013010:	fb01 2203 	mla	r2, r1, r3, r2
 8013014:	fba0 0101 	umull	r0, r1, r0, r1
 8013018:	1c43      	adds	r3, r0, #1
 801301a:	eb42 0001 	adc.w	r0, r2, r1
 801301e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013022:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013026:	bd10      	pop	{r4, pc}
 8013028:	20000090 	.word	0x20000090
 801302c:	080142b4 	.word	0x080142b4
 8013030:	080142cb 	.word	0x080142cb
 8013034:	abcd330e 	.word	0xabcd330e
 8013038:	e66d1234 	.word	0xe66d1234
 801303c:	0005deec 	.word	0x0005deec
 8013040:	5851f42d 	.word	0x5851f42d
 8013044:	4c957f2d 	.word	0x4c957f2d

08013048 <__swbuf_r>:
 8013048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801304a:	460e      	mov	r6, r1
 801304c:	4614      	mov	r4, r2
 801304e:	4605      	mov	r5, r0
 8013050:	b118      	cbz	r0, 801305a <__swbuf_r+0x12>
 8013052:	6983      	ldr	r3, [r0, #24]
 8013054:	b90b      	cbnz	r3, 801305a <__swbuf_r+0x12>
 8013056:	f000 f9ef 	bl	8013438 <__sinit>
 801305a:	4b21      	ldr	r3, [pc, #132]	; (80130e0 <__swbuf_r+0x98>)
 801305c:	429c      	cmp	r4, r3
 801305e:	d12b      	bne.n	80130b8 <__swbuf_r+0x70>
 8013060:	686c      	ldr	r4, [r5, #4]
 8013062:	69a3      	ldr	r3, [r4, #24]
 8013064:	60a3      	str	r3, [r4, #8]
 8013066:	89a3      	ldrh	r3, [r4, #12]
 8013068:	071a      	lsls	r2, r3, #28
 801306a:	d52f      	bpl.n	80130cc <__swbuf_r+0x84>
 801306c:	6923      	ldr	r3, [r4, #16]
 801306e:	b36b      	cbz	r3, 80130cc <__swbuf_r+0x84>
 8013070:	6923      	ldr	r3, [r4, #16]
 8013072:	6820      	ldr	r0, [r4, #0]
 8013074:	1ac0      	subs	r0, r0, r3
 8013076:	6963      	ldr	r3, [r4, #20]
 8013078:	b2f6      	uxtb	r6, r6
 801307a:	4283      	cmp	r3, r0
 801307c:	4637      	mov	r7, r6
 801307e:	dc04      	bgt.n	801308a <__swbuf_r+0x42>
 8013080:	4621      	mov	r1, r4
 8013082:	4628      	mov	r0, r5
 8013084:	f000 f944 	bl	8013310 <_fflush_r>
 8013088:	bb30      	cbnz	r0, 80130d8 <__swbuf_r+0x90>
 801308a:	68a3      	ldr	r3, [r4, #8]
 801308c:	3b01      	subs	r3, #1
 801308e:	60a3      	str	r3, [r4, #8]
 8013090:	6823      	ldr	r3, [r4, #0]
 8013092:	1c5a      	adds	r2, r3, #1
 8013094:	6022      	str	r2, [r4, #0]
 8013096:	701e      	strb	r6, [r3, #0]
 8013098:	6963      	ldr	r3, [r4, #20]
 801309a:	3001      	adds	r0, #1
 801309c:	4283      	cmp	r3, r0
 801309e:	d004      	beq.n	80130aa <__swbuf_r+0x62>
 80130a0:	89a3      	ldrh	r3, [r4, #12]
 80130a2:	07db      	lsls	r3, r3, #31
 80130a4:	d506      	bpl.n	80130b4 <__swbuf_r+0x6c>
 80130a6:	2e0a      	cmp	r6, #10
 80130a8:	d104      	bne.n	80130b4 <__swbuf_r+0x6c>
 80130aa:	4621      	mov	r1, r4
 80130ac:	4628      	mov	r0, r5
 80130ae:	f000 f92f 	bl	8013310 <_fflush_r>
 80130b2:	b988      	cbnz	r0, 80130d8 <__swbuf_r+0x90>
 80130b4:	4638      	mov	r0, r7
 80130b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130b8:	4b0a      	ldr	r3, [pc, #40]	; (80130e4 <__swbuf_r+0x9c>)
 80130ba:	429c      	cmp	r4, r3
 80130bc:	d101      	bne.n	80130c2 <__swbuf_r+0x7a>
 80130be:	68ac      	ldr	r4, [r5, #8]
 80130c0:	e7cf      	b.n	8013062 <__swbuf_r+0x1a>
 80130c2:	4b09      	ldr	r3, [pc, #36]	; (80130e8 <__swbuf_r+0xa0>)
 80130c4:	429c      	cmp	r4, r3
 80130c6:	bf08      	it	eq
 80130c8:	68ec      	ldreq	r4, [r5, #12]
 80130ca:	e7ca      	b.n	8013062 <__swbuf_r+0x1a>
 80130cc:	4621      	mov	r1, r4
 80130ce:	4628      	mov	r0, r5
 80130d0:	f000 f80c 	bl	80130ec <__swsetup_r>
 80130d4:	2800      	cmp	r0, #0
 80130d6:	d0cb      	beq.n	8013070 <__swbuf_r+0x28>
 80130d8:	f04f 37ff 	mov.w	r7, #4294967295
 80130dc:	e7ea      	b.n	80130b4 <__swbuf_r+0x6c>
 80130de:	bf00      	nop
 80130e0:	08014384 	.word	0x08014384
 80130e4:	080143a4 	.word	0x080143a4
 80130e8:	08014364 	.word	0x08014364

080130ec <__swsetup_r>:
 80130ec:	4b32      	ldr	r3, [pc, #200]	; (80131b8 <__swsetup_r+0xcc>)
 80130ee:	b570      	push	{r4, r5, r6, lr}
 80130f0:	681d      	ldr	r5, [r3, #0]
 80130f2:	4606      	mov	r6, r0
 80130f4:	460c      	mov	r4, r1
 80130f6:	b125      	cbz	r5, 8013102 <__swsetup_r+0x16>
 80130f8:	69ab      	ldr	r3, [r5, #24]
 80130fa:	b913      	cbnz	r3, 8013102 <__swsetup_r+0x16>
 80130fc:	4628      	mov	r0, r5
 80130fe:	f000 f99b 	bl	8013438 <__sinit>
 8013102:	4b2e      	ldr	r3, [pc, #184]	; (80131bc <__swsetup_r+0xd0>)
 8013104:	429c      	cmp	r4, r3
 8013106:	d10f      	bne.n	8013128 <__swsetup_r+0x3c>
 8013108:	686c      	ldr	r4, [r5, #4]
 801310a:	89a3      	ldrh	r3, [r4, #12]
 801310c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013110:	0719      	lsls	r1, r3, #28
 8013112:	d42c      	bmi.n	801316e <__swsetup_r+0x82>
 8013114:	06dd      	lsls	r5, r3, #27
 8013116:	d411      	bmi.n	801313c <__swsetup_r+0x50>
 8013118:	2309      	movs	r3, #9
 801311a:	6033      	str	r3, [r6, #0]
 801311c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013120:	81a3      	strh	r3, [r4, #12]
 8013122:	f04f 30ff 	mov.w	r0, #4294967295
 8013126:	e03e      	b.n	80131a6 <__swsetup_r+0xba>
 8013128:	4b25      	ldr	r3, [pc, #148]	; (80131c0 <__swsetup_r+0xd4>)
 801312a:	429c      	cmp	r4, r3
 801312c:	d101      	bne.n	8013132 <__swsetup_r+0x46>
 801312e:	68ac      	ldr	r4, [r5, #8]
 8013130:	e7eb      	b.n	801310a <__swsetup_r+0x1e>
 8013132:	4b24      	ldr	r3, [pc, #144]	; (80131c4 <__swsetup_r+0xd8>)
 8013134:	429c      	cmp	r4, r3
 8013136:	bf08      	it	eq
 8013138:	68ec      	ldreq	r4, [r5, #12]
 801313a:	e7e6      	b.n	801310a <__swsetup_r+0x1e>
 801313c:	0758      	lsls	r0, r3, #29
 801313e:	d512      	bpl.n	8013166 <__swsetup_r+0x7a>
 8013140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013142:	b141      	cbz	r1, 8013156 <__swsetup_r+0x6a>
 8013144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013148:	4299      	cmp	r1, r3
 801314a:	d002      	beq.n	8013152 <__swsetup_r+0x66>
 801314c:	4630      	mov	r0, r6
 801314e:	f000 fa93 	bl	8013678 <_free_r>
 8013152:	2300      	movs	r3, #0
 8013154:	6363      	str	r3, [r4, #52]	; 0x34
 8013156:	89a3      	ldrh	r3, [r4, #12]
 8013158:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801315c:	81a3      	strh	r3, [r4, #12]
 801315e:	2300      	movs	r3, #0
 8013160:	6063      	str	r3, [r4, #4]
 8013162:	6923      	ldr	r3, [r4, #16]
 8013164:	6023      	str	r3, [r4, #0]
 8013166:	89a3      	ldrh	r3, [r4, #12]
 8013168:	f043 0308 	orr.w	r3, r3, #8
 801316c:	81a3      	strh	r3, [r4, #12]
 801316e:	6923      	ldr	r3, [r4, #16]
 8013170:	b94b      	cbnz	r3, 8013186 <__swsetup_r+0x9a>
 8013172:	89a3      	ldrh	r3, [r4, #12]
 8013174:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801317c:	d003      	beq.n	8013186 <__swsetup_r+0x9a>
 801317e:	4621      	mov	r1, r4
 8013180:	4630      	mov	r0, r6
 8013182:	f000 fa31 	bl	80135e8 <__smakebuf_r>
 8013186:	89a0      	ldrh	r0, [r4, #12]
 8013188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801318c:	f010 0301 	ands.w	r3, r0, #1
 8013190:	d00a      	beq.n	80131a8 <__swsetup_r+0xbc>
 8013192:	2300      	movs	r3, #0
 8013194:	60a3      	str	r3, [r4, #8]
 8013196:	6963      	ldr	r3, [r4, #20]
 8013198:	425b      	negs	r3, r3
 801319a:	61a3      	str	r3, [r4, #24]
 801319c:	6923      	ldr	r3, [r4, #16]
 801319e:	b943      	cbnz	r3, 80131b2 <__swsetup_r+0xc6>
 80131a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80131a4:	d1ba      	bne.n	801311c <__swsetup_r+0x30>
 80131a6:	bd70      	pop	{r4, r5, r6, pc}
 80131a8:	0781      	lsls	r1, r0, #30
 80131aa:	bf58      	it	pl
 80131ac:	6963      	ldrpl	r3, [r4, #20]
 80131ae:	60a3      	str	r3, [r4, #8]
 80131b0:	e7f4      	b.n	801319c <__swsetup_r+0xb0>
 80131b2:	2000      	movs	r0, #0
 80131b4:	e7f7      	b.n	80131a6 <__swsetup_r+0xba>
 80131b6:	bf00      	nop
 80131b8:	20000090 	.word	0x20000090
 80131bc:	08014384 	.word	0x08014384
 80131c0:	080143a4 	.word	0x080143a4
 80131c4:	08014364 	.word	0x08014364

080131c8 <__assert_func>:
 80131c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80131ca:	4614      	mov	r4, r2
 80131cc:	461a      	mov	r2, r3
 80131ce:	4b09      	ldr	r3, [pc, #36]	; (80131f4 <__assert_func+0x2c>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	4605      	mov	r5, r0
 80131d4:	68d8      	ldr	r0, [r3, #12]
 80131d6:	b14c      	cbz	r4, 80131ec <__assert_func+0x24>
 80131d8:	4b07      	ldr	r3, [pc, #28]	; (80131f8 <__assert_func+0x30>)
 80131da:	9100      	str	r1, [sp, #0]
 80131dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80131e0:	4906      	ldr	r1, [pc, #24]	; (80131fc <__assert_func+0x34>)
 80131e2:	462b      	mov	r3, r5
 80131e4:	f000 f9a6 	bl	8013534 <fiprintf>
 80131e8:	f000 fe7a 	bl	8013ee0 <abort>
 80131ec:	4b04      	ldr	r3, [pc, #16]	; (8013200 <__assert_func+0x38>)
 80131ee:	461c      	mov	r4, r3
 80131f0:	e7f3      	b.n	80131da <__assert_func+0x12>
 80131f2:	bf00      	nop
 80131f4:	20000090 	.word	0x20000090
 80131f8:	08014326 	.word	0x08014326
 80131fc:	08014333 	.word	0x08014333
 8013200:	08014361 	.word	0x08014361

08013204 <__sflush_r>:
 8013204:	898a      	ldrh	r2, [r1, #12]
 8013206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801320a:	4605      	mov	r5, r0
 801320c:	0710      	lsls	r0, r2, #28
 801320e:	460c      	mov	r4, r1
 8013210:	d458      	bmi.n	80132c4 <__sflush_r+0xc0>
 8013212:	684b      	ldr	r3, [r1, #4]
 8013214:	2b00      	cmp	r3, #0
 8013216:	dc05      	bgt.n	8013224 <__sflush_r+0x20>
 8013218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801321a:	2b00      	cmp	r3, #0
 801321c:	dc02      	bgt.n	8013224 <__sflush_r+0x20>
 801321e:	2000      	movs	r0, #0
 8013220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013226:	2e00      	cmp	r6, #0
 8013228:	d0f9      	beq.n	801321e <__sflush_r+0x1a>
 801322a:	2300      	movs	r3, #0
 801322c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013230:	682f      	ldr	r7, [r5, #0]
 8013232:	602b      	str	r3, [r5, #0]
 8013234:	d032      	beq.n	801329c <__sflush_r+0x98>
 8013236:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013238:	89a3      	ldrh	r3, [r4, #12]
 801323a:	075a      	lsls	r2, r3, #29
 801323c:	d505      	bpl.n	801324a <__sflush_r+0x46>
 801323e:	6863      	ldr	r3, [r4, #4]
 8013240:	1ac0      	subs	r0, r0, r3
 8013242:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013244:	b10b      	cbz	r3, 801324a <__sflush_r+0x46>
 8013246:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013248:	1ac0      	subs	r0, r0, r3
 801324a:	2300      	movs	r3, #0
 801324c:	4602      	mov	r2, r0
 801324e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013250:	6a21      	ldr	r1, [r4, #32]
 8013252:	4628      	mov	r0, r5
 8013254:	47b0      	blx	r6
 8013256:	1c43      	adds	r3, r0, #1
 8013258:	89a3      	ldrh	r3, [r4, #12]
 801325a:	d106      	bne.n	801326a <__sflush_r+0x66>
 801325c:	6829      	ldr	r1, [r5, #0]
 801325e:	291d      	cmp	r1, #29
 8013260:	d82c      	bhi.n	80132bc <__sflush_r+0xb8>
 8013262:	4a2a      	ldr	r2, [pc, #168]	; (801330c <__sflush_r+0x108>)
 8013264:	40ca      	lsrs	r2, r1
 8013266:	07d6      	lsls	r6, r2, #31
 8013268:	d528      	bpl.n	80132bc <__sflush_r+0xb8>
 801326a:	2200      	movs	r2, #0
 801326c:	6062      	str	r2, [r4, #4]
 801326e:	04d9      	lsls	r1, r3, #19
 8013270:	6922      	ldr	r2, [r4, #16]
 8013272:	6022      	str	r2, [r4, #0]
 8013274:	d504      	bpl.n	8013280 <__sflush_r+0x7c>
 8013276:	1c42      	adds	r2, r0, #1
 8013278:	d101      	bne.n	801327e <__sflush_r+0x7a>
 801327a:	682b      	ldr	r3, [r5, #0]
 801327c:	b903      	cbnz	r3, 8013280 <__sflush_r+0x7c>
 801327e:	6560      	str	r0, [r4, #84]	; 0x54
 8013280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013282:	602f      	str	r7, [r5, #0]
 8013284:	2900      	cmp	r1, #0
 8013286:	d0ca      	beq.n	801321e <__sflush_r+0x1a>
 8013288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801328c:	4299      	cmp	r1, r3
 801328e:	d002      	beq.n	8013296 <__sflush_r+0x92>
 8013290:	4628      	mov	r0, r5
 8013292:	f000 f9f1 	bl	8013678 <_free_r>
 8013296:	2000      	movs	r0, #0
 8013298:	6360      	str	r0, [r4, #52]	; 0x34
 801329a:	e7c1      	b.n	8013220 <__sflush_r+0x1c>
 801329c:	6a21      	ldr	r1, [r4, #32]
 801329e:	2301      	movs	r3, #1
 80132a0:	4628      	mov	r0, r5
 80132a2:	47b0      	blx	r6
 80132a4:	1c41      	adds	r1, r0, #1
 80132a6:	d1c7      	bne.n	8013238 <__sflush_r+0x34>
 80132a8:	682b      	ldr	r3, [r5, #0]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d0c4      	beq.n	8013238 <__sflush_r+0x34>
 80132ae:	2b1d      	cmp	r3, #29
 80132b0:	d001      	beq.n	80132b6 <__sflush_r+0xb2>
 80132b2:	2b16      	cmp	r3, #22
 80132b4:	d101      	bne.n	80132ba <__sflush_r+0xb6>
 80132b6:	602f      	str	r7, [r5, #0]
 80132b8:	e7b1      	b.n	801321e <__sflush_r+0x1a>
 80132ba:	89a3      	ldrh	r3, [r4, #12]
 80132bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132c0:	81a3      	strh	r3, [r4, #12]
 80132c2:	e7ad      	b.n	8013220 <__sflush_r+0x1c>
 80132c4:	690f      	ldr	r7, [r1, #16]
 80132c6:	2f00      	cmp	r7, #0
 80132c8:	d0a9      	beq.n	801321e <__sflush_r+0x1a>
 80132ca:	0793      	lsls	r3, r2, #30
 80132cc:	680e      	ldr	r6, [r1, #0]
 80132ce:	bf08      	it	eq
 80132d0:	694b      	ldreq	r3, [r1, #20]
 80132d2:	600f      	str	r7, [r1, #0]
 80132d4:	bf18      	it	ne
 80132d6:	2300      	movne	r3, #0
 80132d8:	eba6 0807 	sub.w	r8, r6, r7
 80132dc:	608b      	str	r3, [r1, #8]
 80132de:	f1b8 0f00 	cmp.w	r8, #0
 80132e2:	dd9c      	ble.n	801321e <__sflush_r+0x1a>
 80132e4:	6a21      	ldr	r1, [r4, #32]
 80132e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80132e8:	4643      	mov	r3, r8
 80132ea:	463a      	mov	r2, r7
 80132ec:	4628      	mov	r0, r5
 80132ee:	47b0      	blx	r6
 80132f0:	2800      	cmp	r0, #0
 80132f2:	dc06      	bgt.n	8013302 <__sflush_r+0xfe>
 80132f4:	89a3      	ldrh	r3, [r4, #12]
 80132f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132fa:	81a3      	strh	r3, [r4, #12]
 80132fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013300:	e78e      	b.n	8013220 <__sflush_r+0x1c>
 8013302:	4407      	add	r7, r0
 8013304:	eba8 0800 	sub.w	r8, r8, r0
 8013308:	e7e9      	b.n	80132de <__sflush_r+0xda>
 801330a:	bf00      	nop
 801330c:	20400001 	.word	0x20400001

08013310 <_fflush_r>:
 8013310:	b538      	push	{r3, r4, r5, lr}
 8013312:	690b      	ldr	r3, [r1, #16]
 8013314:	4605      	mov	r5, r0
 8013316:	460c      	mov	r4, r1
 8013318:	b913      	cbnz	r3, 8013320 <_fflush_r+0x10>
 801331a:	2500      	movs	r5, #0
 801331c:	4628      	mov	r0, r5
 801331e:	bd38      	pop	{r3, r4, r5, pc}
 8013320:	b118      	cbz	r0, 801332a <_fflush_r+0x1a>
 8013322:	6983      	ldr	r3, [r0, #24]
 8013324:	b90b      	cbnz	r3, 801332a <_fflush_r+0x1a>
 8013326:	f000 f887 	bl	8013438 <__sinit>
 801332a:	4b14      	ldr	r3, [pc, #80]	; (801337c <_fflush_r+0x6c>)
 801332c:	429c      	cmp	r4, r3
 801332e:	d11b      	bne.n	8013368 <_fflush_r+0x58>
 8013330:	686c      	ldr	r4, [r5, #4]
 8013332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d0ef      	beq.n	801331a <_fflush_r+0xa>
 801333a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801333c:	07d0      	lsls	r0, r2, #31
 801333e:	d404      	bmi.n	801334a <_fflush_r+0x3a>
 8013340:	0599      	lsls	r1, r3, #22
 8013342:	d402      	bmi.n	801334a <_fflush_r+0x3a>
 8013344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013346:	f000 f927 	bl	8013598 <__retarget_lock_acquire_recursive>
 801334a:	4628      	mov	r0, r5
 801334c:	4621      	mov	r1, r4
 801334e:	f7ff ff59 	bl	8013204 <__sflush_r>
 8013352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013354:	07da      	lsls	r2, r3, #31
 8013356:	4605      	mov	r5, r0
 8013358:	d4e0      	bmi.n	801331c <_fflush_r+0xc>
 801335a:	89a3      	ldrh	r3, [r4, #12]
 801335c:	059b      	lsls	r3, r3, #22
 801335e:	d4dd      	bmi.n	801331c <_fflush_r+0xc>
 8013360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013362:	f000 f91a 	bl	801359a <__retarget_lock_release_recursive>
 8013366:	e7d9      	b.n	801331c <_fflush_r+0xc>
 8013368:	4b05      	ldr	r3, [pc, #20]	; (8013380 <_fflush_r+0x70>)
 801336a:	429c      	cmp	r4, r3
 801336c:	d101      	bne.n	8013372 <_fflush_r+0x62>
 801336e:	68ac      	ldr	r4, [r5, #8]
 8013370:	e7df      	b.n	8013332 <_fflush_r+0x22>
 8013372:	4b04      	ldr	r3, [pc, #16]	; (8013384 <_fflush_r+0x74>)
 8013374:	429c      	cmp	r4, r3
 8013376:	bf08      	it	eq
 8013378:	68ec      	ldreq	r4, [r5, #12]
 801337a:	e7da      	b.n	8013332 <_fflush_r+0x22>
 801337c:	08014384 	.word	0x08014384
 8013380:	080143a4 	.word	0x080143a4
 8013384:	08014364 	.word	0x08014364

08013388 <std>:
 8013388:	2300      	movs	r3, #0
 801338a:	b510      	push	{r4, lr}
 801338c:	4604      	mov	r4, r0
 801338e:	e9c0 3300 	strd	r3, r3, [r0]
 8013392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013396:	6083      	str	r3, [r0, #8]
 8013398:	8181      	strh	r1, [r0, #12]
 801339a:	6643      	str	r3, [r0, #100]	; 0x64
 801339c:	81c2      	strh	r2, [r0, #14]
 801339e:	6183      	str	r3, [r0, #24]
 80133a0:	4619      	mov	r1, r3
 80133a2:	2208      	movs	r2, #8
 80133a4:	305c      	adds	r0, #92	; 0x5c
 80133a6:	f7ff fd7b 	bl	8012ea0 <memset>
 80133aa:	4b05      	ldr	r3, [pc, #20]	; (80133c0 <std+0x38>)
 80133ac:	6263      	str	r3, [r4, #36]	; 0x24
 80133ae:	4b05      	ldr	r3, [pc, #20]	; (80133c4 <std+0x3c>)
 80133b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80133b2:	4b05      	ldr	r3, [pc, #20]	; (80133c8 <std+0x40>)
 80133b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80133b6:	4b05      	ldr	r3, [pc, #20]	; (80133cc <std+0x44>)
 80133b8:	6224      	str	r4, [r4, #32]
 80133ba:	6323      	str	r3, [r4, #48]	; 0x30
 80133bc:	bd10      	pop	{r4, pc}
 80133be:	bf00      	nop
 80133c0:	08013e35 	.word	0x08013e35
 80133c4:	08013e57 	.word	0x08013e57
 80133c8:	08013e8f 	.word	0x08013e8f
 80133cc:	08013eb3 	.word	0x08013eb3

080133d0 <_cleanup_r>:
 80133d0:	4901      	ldr	r1, [pc, #4]	; (80133d8 <_cleanup_r+0x8>)
 80133d2:	f000 b8c1 	b.w	8013558 <_fwalk_reent>
 80133d6:	bf00      	nop
 80133d8:	08013311 	.word	0x08013311

080133dc <__sfmoreglue>:
 80133dc:	b570      	push	{r4, r5, r6, lr}
 80133de:	2268      	movs	r2, #104	; 0x68
 80133e0:	1e4d      	subs	r5, r1, #1
 80133e2:	4355      	muls	r5, r2
 80133e4:	460e      	mov	r6, r1
 80133e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80133ea:	f000 f9b1 	bl	8013750 <_malloc_r>
 80133ee:	4604      	mov	r4, r0
 80133f0:	b140      	cbz	r0, 8013404 <__sfmoreglue+0x28>
 80133f2:	2100      	movs	r1, #0
 80133f4:	e9c0 1600 	strd	r1, r6, [r0]
 80133f8:	300c      	adds	r0, #12
 80133fa:	60a0      	str	r0, [r4, #8]
 80133fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013400:	f7ff fd4e 	bl	8012ea0 <memset>
 8013404:	4620      	mov	r0, r4
 8013406:	bd70      	pop	{r4, r5, r6, pc}

08013408 <__sfp_lock_acquire>:
 8013408:	4801      	ldr	r0, [pc, #4]	; (8013410 <__sfp_lock_acquire+0x8>)
 801340a:	f000 b8c5 	b.w	8013598 <__retarget_lock_acquire_recursive>
 801340e:	bf00      	nop
 8013410:	2000b19d 	.word	0x2000b19d

08013414 <__sfp_lock_release>:
 8013414:	4801      	ldr	r0, [pc, #4]	; (801341c <__sfp_lock_release+0x8>)
 8013416:	f000 b8c0 	b.w	801359a <__retarget_lock_release_recursive>
 801341a:	bf00      	nop
 801341c:	2000b19d 	.word	0x2000b19d

08013420 <__sinit_lock_acquire>:
 8013420:	4801      	ldr	r0, [pc, #4]	; (8013428 <__sinit_lock_acquire+0x8>)
 8013422:	f000 b8b9 	b.w	8013598 <__retarget_lock_acquire_recursive>
 8013426:	bf00      	nop
 8013428:	2000b19e 	.word	0x2000b19e

0801342c <__sinit_lock_release>:
 801342c:	4801      	ldr	r0, [pc, #4]	; (8013434 <__sinit_lock_release+0x8>)
 801342e:	f000 b8b4 	b.w	801359a <__retarget_lock_release_recursive>
 8013432:	bf00      	nop
 8013434:	2000b19e 	.word	0x2000b19e

08013438 <__sinit>:
 8013438:	b510      	push	{r4, lr}
 801343a:	4604      	mov	r4, r0
 801343c:	f7ff fff0 	bl	8013420 <__sinit_lock_acquire>
 8013440:	69a3      	ldr	r3, [r4, #24]
 8013442:	b11b      	cbz	r3, 801344c <__sinit+0x14>
 8013444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013448:	f7ff bff0 	b.w	801342c <__sinit_lock_release>
 801344c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013450:	6523      	str	r3, [r4, #80]	; 0x50
 8013452:	4b13      	ldr	r3, [pc, #76]	; (80134a0 <__sinit+0x68>)
 8013454:	4a13      	ldr	r2, [pc, #76]	; (80134a4 <__sinit+0x6c>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	62a2      	str	r2, [r4, #40]	; 0x28
 801345a:	42a3      	cmp	r3, r4
 801345c:	bf04      	itt	eq
 801345e:	2301      	moveq	r3, #1
 8013460:	61a3      	streq	r3, [r4, #24]
 8013462:	4620      	mov	r0, r4
 8013464:	f000 f820 	bl	80134a8 <__sfp>
 8013468:	6060      	str	r0, [r4, #4]
 801346a:	4620      	mov	r0, r4
 801346c:	f000 f81c 	bl	80134a8 <__sfp>
 8013470:	60a0      	str	r0, [r4, #8]
 8013472:	4620      	mov	r0, r4
 8013474:	f000 f818 	bl	80134a8 <__sfp>
 8013478:	2200      	movs	r2, #0
 801347a:	60e0      	str	r0, [r4, #12]
 801347c:	2104      	movs	r1, #4
 801347e:	6860      	ldr	r0, [r4, #4]
 8013480:	f7ff ff82 	bl	8013388 <std>
 8013484:	68a0      	ldr	r0, [r4, #8]
 8013486:	2201      	movs	r2, #1
 8013488:	2109      	movs	r1, #9
 801348a:	f7ff ff7d 	bl	8013388 <std>
 801348e:	68e0      	ldr	r0, [r4, #12]
 8013490:	2202      	movs	r2, #2
 8013492:	2112      	movs	r1, #18
 8013494:	f7ff ff78 	bl	8013388 <std>
 8013498:	2301      	movs	r3, #1
 801349a:	61a3      	str	r3, [r4, #24]
 801349c:	e7d2      	b.n	8013444 <__sinit+0xc>
 801349e:	bf00      	nop
 80134a0:	080142b0 	.word	0x080142b0
 80134a4:	080133d1 	.word	0x080133d1

080134a8 <__sfp>:
 80134a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134aa:	4607      	mov	r7, r0
 80134ac:	f7ff ffac 	bl	8013408 <__sfp_lock_acquire>
 80134b0:	4b1e      	ldr	r3, [pc, #120]	; (801352c <__sfp+0x84>)
 80134b2:	681e      	ldr	r6, [r3, #0]
 80134b4:	69b3      	ldr	r3, [r6, #24]
 80134b6:	b913      	cbnz	r3, 80134be <__sfp+0x16>
 80134b8:	4630      	mov	r0, r6
 80134ba:	f7ff ffbd 	bl	8013438 <__sinit>
 80134be:	3648      	adds	r6, #72	; 0x48
 80134c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80134c4:	3b01      	subs	r3, #1
 80134c6:	d503      	bpl.n	80134d0 <__sfp+0x28>
 80134c8:	6833      	ldr	r3, [r6, #0]
 80134ca:	b30b      	cbz	r3, 8013510 <__sfp+0x68>
 80134cc:	6836      	ldr	r6, [r6, #0]
 80134ce:	e7f7      	b.n	80134c0 <__sfp+0x18>
 80134d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80134d4:	b9d5      	cbnz	r5, 801350c <__sfp+0x64>
 80134d6:	4b16      	ldr	r3, [pc, #88]	; (8013530 <__sfp+0x88>)
 80134d8:	60e3      	str	r3, [r4, #12]
 80134da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80134de:	6665      	str	r5, [r4, #100]	; 0x64
 80134e0:	f000 f859 	bl	8013596 <__retarget_lock_init_recursive>
 80134e4:	f7ff ff96 	bl	8013414 <__sfp_lock_release>
 80134e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80134ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80134f0:	6025      	str	r5, [r4, #0]
 80134f2:	61a5      	str	r5, [r4, #24]
 80134f4:	2208      	movs	r2, #8
 80134f6:	4629      	mov	r1, r5
 80134f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80134fc:	f7ff fcd0 	bl	8012ea0 <memset>
 8013500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013508:	4620      	mov	r0, r4
 801350a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801350c:	3468      	adds	r4, #104	; 0x68
 801350e:	e7d9      	b.n	80134c4 <__sfp+0x1c>
 8013510:	2104      	movs	r1, #4
 8013512:	4638      	mov	r0, r7
 8013514:	f7ff ff62 	bl	80133dc <__sfmoreglue>
 8013518:	4604      	mov	r4, r0
 801351a:	6030      	str	r0, [r6, #0]
 801351c:	2800      	cmp	r0, #0
 801351e:	d1d5      	bne.n	80134cc <__sfp+0x24>
 8013520:	f7ff ff78 	bl	8013414 <__sfp_lock_release>
 8013524:	230c      	movs	r3, #12
 8013526:	603b      	str	r3, [r7, #0]
 8013528:	e7ee      	b.n	8013508 <__sfp+0x60>
 801352a:	bf00      	nop
 801352c:	080142b0 	.word	0x080142b0
 8013530:	ffff0001 	.word	0xffff0001

08013534 <fiprintf>:
 8013534:	b40e      	push	{r1, r2, r3}
 8013536:	b503      	push	{r0, r1, lr}
 8013538:	4601      	mov	r1, r0
 801353a:	ab03      	add	r3, sp, #12
 801353c:	4805      	ldr	r0, [pc, #20]	; (8013554 <fiprintf+0x20>)
 801353e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013542:	6800      	ldr	r0, [r0, #0]
 8013544:	9301      	str	r3, [sp, #4]
 8013546:	f000 f9a1 	bl	801388c <_vfiprintf_r>
 801354a:	b002      	add	sp, #8
 801354c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013550:	b003      	add	sp, #12
 8013552:	4770      	bx	lr
 8013554:	20000090 	.word	0x20000090

08013558 <_fwalk_reent>:
 8013558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801355c:	4606      	mov	r6, r0
 801355e:	4688      	mov	r8, r1
 8013560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013564:	2700      	movs	r7, #0
 8013566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801356a:	f1b9 0901 	subs.w	r9, r9, #1
 801356e:	d505      	bpl.n	801357c <_fwalk_reent+0x24>
 8013570:	6824      	ldr	r4, [r4, #0]
 8013572:	2c00      	cmp	r4, #0
 8013574:	d1f7      	bne.n	8013566 <_fwalk_reent+0xe>
 8013576:	4638      	mov	r0, r7
 8013578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801357c:	89ab      	ldrh	r3, [r5, #12]
 801357e:	2b01      	cmp	r3, #1
 8013580:	d907      	bls.n	8013592 <_fwalk_reent+0x3a>
 8013582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013586:	3301      	adds	r3, #1
 8013588:	d003      	beq.n	8013592 <_fwalk_reent+0x3a>
 801358a:	4629      	mov	r1, r5
 801358c:	4630      	mov	r0, r6
 801358e:	47c0      	blx	r8
 8013590:	4307      	orrs	r7, r0
 8013592:	3568      	adds	r5, #104	; 0x68
 8013594:	e7e9      	b.n	801356a <_fwalk_reent+0x12>

08013596 <__retarget_lock_init_recursive>:
 8013596:	4770      	bx	lr

08013598 <__retarget_lock_acquire_recursive>:
 8013598:	4770      	bx	lr

0801359a <__retarget_lock_release_recursive>:
 801359a:	4770      	bx	lr

0801359c <__swhatbuf_r>:
 801359c:	b570      	push	{r4, r5, r6, lr}
 801359e:	460e      	mov	r6, r1
 80135a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135a4:	2900      	cmp	r1, #0
 80135a6:	b096      	sub	sp, #88	; 0x58
 80135a8:	4614      	mov	r4, r2
 80135aa:	461d      	mov	r5, r3
 80135ac:	da08      	bge.n	80135c0 <__swhatbuf_r+0x24>
 80135ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80135b2:	2200      	movs	r2, #0
 80135b4:	602a      	str	r2, [r5, #0]
 80135b6:	061a      	lsls	r2, r3, #24
 80135b8:	d410      	bmi.n	80135dc <__swhatbuf_r+0x40>
 80135ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80135be:	e00e      	b.n	80135de <__swhatbuf_r+0x42>
 80135c0:	466a      	mov	r2, sp
 80135c2:	f000 fca5 	bl	8013f10 <_fstat_r>
 80135c6:	2800      	cmp	r0, #0
 80135c8:	dbf1      	blt.n	80135ae <__swhatbuf_r+0x12>
 80135ca:	9a01      	ldr	r2, [sp, #4]
 80135cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80135d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80135d4:	425a      	negs	r2, r3
 80135d6:	415a      	adcs	r2, r3
 80135d8:	602a      	str	r2, [r5, #0]
 80135da:	e7ee      	b.n	80135ba <__swhatbuf_r+0x1e>
 80135dc:	2340      	movs	r3, #64	; 0x40
 80135de:	2000      	movs	r0, #0
 80135e0:	6023      	str	r3, [r4, #0]
 80135e2:	b016      	add	sp, #88	; 0x58
 80135e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080135e8 <__smakebuf_r>:
 80135e8:	898b      	ldrh	r3, [r1, #12]
 80135ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80135ec:	079d      	lsls	r5, r3, #30
 80135ee:	4606      	mov	r6, r0
 80135f0:	460c      	mov	r4, r1
 80135f2:	d507      	bpl.n	8013604 <__smakebuf_r+0x1c>
 80135f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80135f8:	6023      	str	r3, [r4, #0]
 80135fa:	6123      	str	r3, [r4, #16]
 80135fc:	2301      	movs	r3, #1
 80135fe:	6163      	str	r3, [r4, #20]
 8013600:	b002      	add	sp, #8
 8013602:	bd70      	pop	{r4, r5, r6, pc}
 8013604:	ab01      	add	r3, sp, #4
 8013606:	466a      	mov	r2, sp
 8013608:	f7ff ffc8 	bl	801359c <__swhatbuf_r>
 801360c:	9900      	ldr	r1, [sp, #0]
 801360e:	4605      	mov	r5, r0
 8013610:	4630      	mov	r0, r6
 8013612:	f000 f89d 	bl	8013750 <_malloc_r>
 8013616:	b948      	cbnz	r0, 801362c <__smakebuf_r+0x44>
 8013618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801361c:	059a      	lsls	r2, r3, #22
 801361e:	d4ef      	bmi.n	8013600 <__smakebuf_r+0x18>
 8013620:	f023 0303 	bic.w	r3, r3, #3
 8013624:	f043 0302 	orr.w	r3, r3, #2
 8013628:	81a3      	strh	r3, [r4, #12]
 801362a:	e7e3      	b.n	80135f4 <__smakebuf_r+0xc>
 801362c:	4b0d      	ldr	r3, [pc, #52]	; (8013664 <__smakebuf_r+0x7c>)
 801362e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013630:	89a3      	ldrh	r3, [r4, #12]
 8013632:	6020      	str	r0, [r4, #0]
 8013634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013638:	81a3      	strh	r3, [r4, #12]
 801363a:	9b00      	ldr	r3, [sp, #0]
 801363c:	6163      	str	r3, [r4, #20]
 801363e:	9b01      	ldr	r3, [sp, #4]
 8013640:	6120      	str	r0, [r4, #16]
 8013642:	b15b      	cbz	r3, 801365c <__smakebuf_r+0x74>
 8013644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013648:	4630      	mov	r0, r6
 801364a:	f000 fc73 	bl	8013f34 <_isatty_r>
 801364e:	b128      	cbz	r0, 801365c <__smakebuf_r+0x74>
 8013650:	89a3      	ldrh	r3, [r4, #12]
 8013652:	f023 0303 	bic.w	r3, r3, #3
 8013656:	f043 0301 	orr.w	r3, r3, #1
 801365a:	81a3      	strh	r3, [r4, #12]
 801365c:	89a0      	ldrh	r0, [r4, #12]
 801365e:	4305      	orrs	r5, r0
 8013660:	81a5      	strh	r5, [r4, #12]
 8013662:	e7cd      	b.n	8013600 <__smakebuf_r+0x18>
 8013664:	080133d1 	.word	0x080133d1

08013668 <malloc>:
 8013668:	4b02      	ldr	r3, [pc, #8]	; (8013674 <malloc+0xc>)
 801366a:	4601      	mov	r1, r0
 801366c:	6818      	ldr	r0, [r3, #0]
 801366e:	f000 b86f 	b.w	8013750 <_malloc_r>
 8013672:	bf00      	nop
 8013674:	20000090 	.word	0x20000090

08013678 <_free_r>:
 8013678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801367a:	2900      	cmp	r1, #0
 801367c:	d044      	beq.n	8013708 <_free_r+0x90>
 801367e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013682:	9001      	str	r0, [sp, #4]
 8013684:	2b00      	cmp	r3, #0
 8013686:	f1a1 0404 	sub.w	r4, r1, #4
 801368a:	bfb8      	it	lt
 801368c:	18e4      	addlt	r4, r4, r3
 801368e:	f000 fc73 	bl	8013f78 <__malloc_lock>
 8013692:	4a1e      	ldr	r2, [pc, #120]	; (801370c <_free_r+0x94>)
 8013694:	9801      	ldr	r0, [sp, #4]
 8013696:	6813      	ldr	r3, [r2, #0]
 8013698:	b933      	cbnz	r3, 80136a8 <_free_r+0x30>
 801369a:	6063      	str	r3, [r4, #4]
 801369c:	6014      	str	r4, [r2, #0]
 801369e:	b003      	add	sp, #12
 80136a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136a4:	f000 bc6e 	b.w	8013f84 <__malloc_unlock>
 80136a8:	42a3      	cmp	r3, r4
 80136aa:	d908      	bls.n	80136be <_free_r+0x46>
 80136ac:	6825      	ldr	r5, [r4, #0]
 80136ae:	1961      	adds	r1, r4, r5
 80136b0:	428b      	cmp	r3, r1
 80136b2:	bf01      	itttt	eq
 80136b4:	6819      	ldreq	r1, [r3, #0]
 80136b6:	685b      	ldreq	r3, [r3, #4]
 80136b8:	1949      	addeq	r1, r1, r5
 80136ba:	6021      	streq	r1, [r4, #0]
 80136bc:	e7ed      	b.n	801369a <_free_r+0x22>
 80136be:	461a      	mov	r2, r3
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	b10b      	cbz	r3, 80136c8 <_free_r+0x50>
 80136c4:	42a3      	cmp	r3, r4
 80136c6:	d9fa      	bls.n	80136be <_free_r+0x46>
 80136c8:	6811      	ldr	r1, [r2, #0]
 80136ca:	1855      	adds	r5, r2, r1
 80136cc:	42a5      	cmp	r5, r4
 80136ce:	d10b      	bne.n	80136e8 <_free_r+0x70>
 80136d0:	6824      	ldr	r4, [r4, #0]
 80136d2:	4421      	add	r1, r4
 80136d4:	1854      	adds	r4, r2, r1
 80136d6:	42a3      	cmp	r3, r4
 80136d8:	6011      	str	r1, [r2, #0]
 80136da:	d1e0      	bne.n	801369e <_free_r+0x26>
 80136dc:	681c      	ldr	r4, [r3, #0]
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	6053      	str	r3, [r2, #4]
 80136e2:	4421      	add	r1, r4
 80136e4:	6011      	str	r1, [r2, #0]
 80136e6:	e7da      	b.n	801369e <_free_r+0x26>
 80136e8:	d902      	bls.n	80136f0 <_free_r+0x78>
 80136ea:	230c      	movs	r3, #12
 80136ec:	6003      	str	r3, [r0, #0]
 80136ee:	e7d6      	b.n	801369e <_free_r+0x26>
 80136f0:	6825      	ldr	r5, [r4, #0]
 80136f2:	1961      	adds	r1, r4, r5
 80136f4:	428b      	cmp	r3, r1
 80136f6:	bf04      	itt	eq
 80136f8:	6819      	ldreq	r1, [r3, #0]
 80136fa:	685b      	ldreq	r3, [r3, #4]
 80136fc:	6063      	str	r3, [r4, #4]
 80136fe:	bf04      	itt	eq
 8013700:	1949      	addeq	r1, r1, r5
 8013702:	6021      	streq	r1, [r4, #0]
 8013704:	6054      	str	r4, [r2, #4]
 8013706:	e7ca      	b.n	801369e <_free_r+0x26>
 8013708:	b003      	add	sp, #12
 801370a:	bd30      	pop	{r4, r5, pc}
 801370c:	2000b1a0 	.word	0x2000b1a0

08013710 <sbrk_aligned>:
 8013710:	b570      	push	{r4, r5, r6, lr}
 8013712:	4e0e      	ldr	r6, [pc, #56]	; (801374c <sbrk_aligned+0x3c>)
 8013714:	460c      	mov	r4, r1
 8013716:	6831      	ldr	r1, [r6, #0]
 8013718:	4605      	mov	r5, r0
 801371a:	b911      	cbnz	r1, 8013722 <sbrk_aligned+0x12>
 801371c:	f000 fb7a 	bl	8013e14 <_sbrk_r>
 8013720:	6030      	str	r0, [r6, #0]
 8013722:	4621      	mov	r1, r4
 8013724:	4628      	mov	r0, r5
 8013726:	f000 fb75 	bl	8013e14 <_sbrk_r>
 801372a:	1c43      	adds	r3, r0, #1
 801372c:	d00a      	beq.n	8013744 <sbrk_aligned+0x34>
 801372e:	1cc4      	adds	r4, r0, #3
 8013730:	f024 0403 	bic.w	r4, r4, #3
 8013734:	42a0      	cmp	r0, r4
 8013736:	d007      	beq.n	8013748 <sbrk_aligned+0x38>
 8013738:	1a21      	subs	r1, r4, r0
 801373a:	4628      	mov	r0, r5
 801373c:	f000 fb6a 	bl	8013e14 <_sbrk_r>
 8013740:	3001      	adds	r0, #1
 8013742:	d101      	bne.n	8013748 <sbrk_aligned+0x38>
 8013744:	f04f 34ff 	mov.w	r4, #4294967295
 8013748:	4620      	mov	r0, r4
 801374a:	bd70      	pop	{r4, r5, r6, pc}
 801374c:	2000b1a4 	.word	0x2000b1a4

08013750 <_malloc_r>:
 8013750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013754:	1ccd      	adds	r5, r1, #3
 8013756:	f025 0503 	bic.w	r5, r5, #3
 801375a:	3508      	adds	r5, #8
 801375c:	2d0c      	cmp	r5, #12
 801375e:	bf38      	it	cc
 8013760:	250c      	movcc	r5, #12
 8013762:	2d00      	cmp	r5, #0
 8013764:	4607      	mov	r7, r0
 8013766:	db01      	blt.n	801376c <_malloc_r+0x1c>
 8013768:	42a9      	cmp	r1, r5
 801376a:	d905      	bls.n	8013778 <_malloc_r+0x28>
 801376c:	230c      	movs	r3, #12
 801376e:	603b      	str	r3, [r7, #0]
 8013770:	2600      	movs	r6, #0
 8013772:	4630      	mov	r0, r6
 8013774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013778:	4e2e      	ldr	r6, [pc, #184]	; (8013834 <_malloc_r+0xe4>)
 801377a:	f000 fbfd 	bl	8013f78 <__malloc_lock>
 801377e:	6833      	ldr	r3, [r6, #0]
 8013780:	461c      	mov	r4, r3
 8013782:	bb34      	cbnz	r4, 80137d2 <_malloc_r+0x82>
 8013784:	4629      	mov	r1, r5
 8013786:	4638      	mov	r0, r7
 8013788:	f7ff ffc2 	bl	8013710 <sbrk_aligned>
 801378c:	1c43      	adds	r3, r0, #1
 801378e:	4604      	mov	r4, r0
 8013790:	d14d      	bne.n	801382e <_malloc_r+0xde>
 8013792:	6834      	ldr	r4, [r6, #0]
 8013794:	4626      	mov	r6, r4
 8013796:	2e00      	cmp	r6, #0
 8013798:	d140      	bne.n	801381c <_malloc_r+0xcc>
 801379a:	6823      	ldr	r3, [r4, #0]
 801379c:	4631      	mov	r1, r6
 801379e:	4638      	mov	r0, r7
 80137a0:	eb04 0803 	add.w	r8, r4, r3
 80137a4:	f000 fb36 	bl	8013e14 <_sbrk_r>
 80137a8:	4580      	cmp	r8, r0
 80137aa:	d13a      	bne.n	8013822 <_malloc_r+0xd2>
 80137ac:	6821      	ldr	r1, [r4, #0]
 80137ae:	3503      	adds	r5, #3
 80137b0:	1a6d      	subs	r5, r5, r1
 80137b2:	f025 0503 	bic.w	r5, r5, #3
 80137b6:	3508      	adds	r5, #8
 80137b8:	2d0c      	cmp	r5, #12
 80137ba:	bf38      	it	cc
 80137bc:	250c      	movcc	r5, #12
 80137be:	4629      	mov	r1, r5
 80137c0:	4638      	mov	r0, r7
 80137c2:	f7ff ffa5 	bl	8013710 <sbrk_aligned>
 80137c6:	3001      	adds	r0, #1
 80137c8:	d02b      	beq.n	8013822 <_malloc_r+0xd2>
 80137ca:	6823      	ldr	r3, [r4, #0]
 80137cc:	442b      	add	r3, r5
 80137ce:	6023      	str	r3, [r4, #0]
 80137d0:	e00e      	b.n	80137f0 <_malloc_r+0xa0>
 80137d2:	6822      	ldr	r2, [r4, #0]
 80137d4:	1b52      	subs	r2, r2, r5
 80137d6:	d41e      	bmi.n	8013816 <_malloc_r+0xc6>
 80137d8:	2a0b      	cmp	r2, #11
 80137da:	d916      	bls.n	801380a <_malloc_r+0xba>
 80137dc:	1961      	adds	r1, r4, r5
 80137de:	42a3      	cmp	r3, r4
 80137e0:	6025      	str	r5, [r4, #0]
 80137e2:	bf18      	it	ne
 80137e4:	6059      	strne	r1, [r3, #4]
 80137e6:	6863      	ldr	r3, [r4, #4]
 80137e8:	bf08      	it	eq
 80137ea:	6031      	streq	r1, [r6, #0]
 80137ec:	5162      	str	r2, [r4, r5]
 80137ee:	604b      	str	r3, [r1, #4]
 80137f0:	4638      	mov	r0, r7
 80137f2:	f104 060b 	add.w	r6, r4, #11
 80137f6:	f000 fbc5 	bl	8013f84 <__malloc_unlock>
 80137fa:	f026 0607 	bic.w	r6, r6, #7
 80137fe:	1d23      	adds	r3, r4, #4
 8013800:	1af2      	subs	r2, r6, r3
 8013802:	d0b6      	beq.n	8013772 <_malloc_r+0x22>
 8013804:	1b9b      	subs	r3, r3, r6
 8013806:	50a3      	str	r3, [r4, r2]
 8013808:	e7b3      	b.n	8013772 <_malloc_r+0x22>
 801380a:	6862      	ldr	r2, [r4, #4]
 801380c:	42a3      	cmp	r3, r4
 801380e:	bf0c      	ite	eq
 8013810:	6032      	streq	r2, [r6, #0]
 8013812:	605a      	strne	r2, [r3, #4]
 8013814:	e7ec      	b.n	80137f0 <_malloc_r+0xa0>
 8013816:	4623      	mov	r3, r4
 8013818:	6864      	ldr	r4, [r4, #4]
 801381a:	e7b2      	b.n	8013782 <_malloc_r+0x32>
 801381c:	4634      	mov	r4, r6
 801381e:	6876      	ldr	r6, [r6, #4]
 8013820:	e7b9      	b.n	8013796 <_malloc_r+0x46>
 8013822:	230c      	movs	r3, #12
 8013824:	603b      	str	r3, [r7, #0]
 8013826:	4638      	mov	r0, r7
 8013828:	f000 fbac 	bl	8013f84 <__malloc_unlock>
 801382c:	e7a1      	b.n	8013772 <_malloc_r+0x22>
 801382e:	6025      	str	r5, [r4, #0]
 8013830:	e7de      	b.n	80137f0 <_malloc_r+0xa0>
 8013832:	bf00      	nop
 8013834:	2000b1a0 	.word	0x2000b1a0

08013838 <__sfputc_r>:
 8013838:	6893      	ldr	r3, [r2, #8]
 801383a:	3b01      	subs	r3, #1
 801383c:	2b00      	cmp	r3, #0
 801383e:	b410      	push	{r4}
 8013840:	6093      	str	r3, [r2, #8]
 8013842:	da08      	bge.n	8013856 <__sfputc_r+0x1e>
 8013844:	6994      	ldr	r4, [r2, #24]
 8013846:	42a3      	cmp	r3, r4
 8013848:	db01      	blt.n	801384e <__sfputc_r+0x16>
 801384a:	290a      	cmp	r1, #10
 801384c:	d103      	bne.n	8013856 <__sfputc_r+0x1e>
 801384e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013852:	f7ff bbf9 	b.w	8013048 <__swbuf_r>
 8013856:	6813      	ldr	r3, [r2, #0]
 8013858:	1c58      	adds	r0, r3, #1
 801385a:	6010      	str	r0, [r2, #0]
 801385c:	7019      	strb	r1, [r3, #0]
 801385e:	4608      	mov	r0, r1
 8013860:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013864:	4770      	bx	lr

08013866 <__sfputs_r>:
 8013866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013868:	4606      	mov	r6, r0
 801386a:	460f      	mov	r7, r1
 801386c:	4614      	mov	r4, r2
 801386e:	18d5      	adds	r5, r2, r3
 8013870:	42ac      	cmp	r4, r5
 8013872:	d101      	bne.n	8013878 <__sfputs_r+0x12>
 8013874:	2000      	movs	r0, #0
 8013876:	e007      	b.n	8013888 <__sfputs_r+0x22>
 8013878:	f814 1b01 	ldrb.w	r1, [r4], #1
 801387c:	463a      	mov	r2, r7
 801387e:	4630      	mov	r0, r6
 8013880:	f7ff ffda 	bl	8013838 <__sfputc_r>
 8013884:	1c43      	adds	r3, r0, #1
 8013886:	d1f3      	bne.n	8013870 <__sfputs_r+0xa>
 8013888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801388c <_vfiprintf_r>:
 801388c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013890:	460d      	mov	r5, r1
 8013892:	b09d      	sub	sp, #116	; 0x74
 8013894:	4614      	mov	r4, r2
 8013896:	4698      	mov	r8, r3
 8013898:	4606      	mov	r6, r0
 801389a:	b118      	cbz	r0, 80138a4 <_vfiprintf_r+0x18>
 801389c:	6983      	ldr	r3, [r0, #24]
 801389e:	b90b      	cbnz	r3, 80138a4 <_vfiprintf_r+0x18>
 80138a0:	f7ff fdca 	bl	8013438 <__sinit>
 80138a4:	4b89      	ldr	r3, [pc, #548]	; (8013acc <_vfiprintf_r+0x240>)
 80138a6:	429d      	cmp	r5, r3
 80138a8:	d11b      	bne.n	80138e2 <_vfiprintf_r+0x56>
 80138aa:	6875      	ldr	r5, [r6, #4]
 80138ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138ae:	07d9      	lsls	r1, r3, #31
 80138b0:	d405      	bmi.n	80138be <_vfiprintf_r+0x32>
 80138b2:	89ab      	ldrh	r3, [r5, #12]
 80138b4:	059a      	lsls	r2, r3, #22
 80138b6:	d402      	bmi.n	80138be <_vfiprintf_r+0x32>
 80138b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138ba:	f7ff fe6d 	bl	8013598 <__retarget_lock_acquire_recursive>
 80138be:	89ab      	ldrh	r3, [r5, #12]
 80138c0:	071b      	lsls	r3, r3, #28
 80138c2:	d501      	bpl.n	80138c8 <_vfiprintf_r+0x3c>
 80138c4:	692b      	ldr	r3, [r5, #16]
 80138c6:	b9eb      	cbnz	r3, 8013904 <_vfiprintf_r+0x78>
 80138c8:	4629      	mov	r1, r5
 80138ca:	4630      	mov	r0, r6
 80138cc:	f7ff fc0e 	bl	80130ec <__swsetup_r>
 80138d0:	b1c0      	cbz	r0, 8013904 <_vfiprintf_r+0x78>
 80138d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138d4:	07dc      	lsls	r4, r3, #31
 80138d6:	d50e      	bpl.n	80138f6 <_vfiprintf_r+0x6a>
 80138d8:	f04f 30ff 	mov.w	r0, #4294967295
 80138dc:	b01d      	add	sp, #116	; 0x74
 80138de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e2:	4b7b      	ldr	r3, [pc, #492]	; (8013ad0 <_vfiprintf_r+0x244>)
 80138e4:	429d      	cmp	r5, r3
 80138e6:	d101      	bne.n	80138ec <_vfiprintf_r+0x60>
 80138e8:	68b5      	ldr	r5, [r6, #8]
 80138ea:	e7df      	b.n	80138ac <_vfiprintf_r+0x20>
 80138ec:	4b79      	ldr	r3, [pc, #484]	; (8013ad4 <_vfiprintf_r+0x248>)
 80138ee:	429d      	cmp	r5, r3
 80138f0:	bf08      	it	eq
 80138f2:	68f5      	ldreq	r5, [r6, #12]
 80138f4:	e7da      	b.n	80138ac <_vfiprintf_r+0x20>
 80138f6:	89ab      	ldrh	r3, [r5, #12]
 80138f8:	0598      	lsls	r0, r3, #22
 80138fa:	d4ed      	bmi.n	80138d8 <_vfiprintf_r+0x4c>
 80138fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138fe:	f7ff fe4c 	bl	801359a <__retarget_lock_release_recursive>
 8013902:	e7e9      	b.n	80138d8 <_vfiprintf_r+0x4c>
 8013904:	2300      	movs	r3, #0
 8013906:	9309      	str	r3, [sp, #36]	; 0x24
 8013908:	2320      	movs	r3, #32
 801390a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801390e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013912:	2330      	movs	r3, #48	; 0x30
 8013914:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013ad8 <_vfiprintf_r+0x24c>
 8013918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801391c:	f04f 0901 	mov.w	r9, #1
 8013920:	4623      	mov	r3, r4
 8013922:	469a      	mov	sl, r3
 8013924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013928:	b10a      	cbz	r2, 801392e <_vfiprintf_r+0xa2>
 801392a:	2a25      	cmp	r2, #37	; 0x25
 801392c:	d1f9      	bne.n	8013922 <_vfiprintf_r+0x96>
 801392e:	ebba 0b04 	subs.w	fp, sl, r4
 8013932:	d00b      	beq.n	801394c <_vfiprintf_r+0xc0>
 8013934:	465b      	mov	r3, fp
 8013936:	4622      	mov	r2, r4
 8013938:	4629      	mov	r1, r5
 801393a:	4630      	mov	r0, r6
 801393c:	f7ff ff93 	bl	8013866 <__sfputs_r>
 8013940:	3001      	adds	r0, #1
 8013942:	f000 80aa 	beq.w	8013a9a <_vfiprintf_r+0x20e>
 8013946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013948:	445a      	add	r2, fp
 801394a:	9209      	str	r2, [sp, #36]	; 0x24
 801394c:	f89a 3000 	ldrb.w	r3, [sl]
 8013950:	2b00      	cmp	r3, #0
 8013952:	f000 80a2 	beq.w	8013a9a <_vfiprintf_r+0x20e>
 8013956:	2300      	movs	r3, #0
 8013958:	f04f 32ff 	mov.w	r2, #4294967295
 801395c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013960:	f10a 0a01 	add.w	sl, sl, #1
 8013964:	9304      	str	r3, [sp, #16]
 8013966:	9307      	str	r3, [sp, #28]
 8013968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801396c:	931a      	str	r3, [sp, #104]	; 0x68
 801396e:	4654      	mov	r4, sl
 8013970:	2205      	movs	r2, #5
 8013972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013976:	4858      	ldr	r0, [pc, #352]	; (8013ad8 <_vfiprintf_r+0x24c>)
 8013978:	f7ec fd82 	bl	8000480 <memchr>
 801397c:	9a04      	ldr	r2, [sp, #16]
 801397e:	b9d8      	cbnz	r0, 80139b8 <_vfiprintf_r+0x12c>
 8013980:	06d1      	lsls	r1, r2, #27
 8013982:	bf44      	itt	mi
 8013984:	2320      	movmi	r3, #32
 8013986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801398a:	0713      	lsls	r3, r2, #28
 801398c:	bf44      	itt	mi
 801398e:	232b      	movmi	r3, #43	; 0x2b
 8013990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013994:	f89a 3000 	ldrb.w	r3, [sl]
 8013998:	2b2a      	cmp	r3, #42	; 0x2a
 801399a:	d015      	beq.n	80139c8 <_vfiprintf_r+0x13c>
 801399c:	9a07      	ldr	r2, [sp, #28]
 801399e:	4654      	mov	r4, sl
 80139a0:	2000      	movs	r0, #0
 80139a2:	f04f 0c0a 	mov.w	ip, #10
 80139a6:	4621      	mov	r1, r4
 80139a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139ac:	3b30      	subs	r3, #48	; 0x30
 80139ae:	2b09      	cmp	r3, #9
 80139b0:	d94e      	bls.n	8013a50 <_vfiprintf_r+0x1c4>
 80139b2:	b1b0      	cbz	r0, 80139e2 <_vfiprintf_r+0x156>
 80139b4:	9207      	str	r2, [sp, #28]
 80139b6:	e014      	b.n	80139e2 <_vfiprintf_r+0x156>
 80139b8:	eba0 0308 	sub.w	r3, r0, r8
 80139bc:	fa09 f303 	lsl.w	r3, r9, r3
 80139c0:	4313      	orrs	r3, r2
 80139c2:	9304      	str	r3, [sp, #16]
 80139c4:	46a2      	mov	sl, r4
 80139c6:	e7d2      	b.n	801396e <_vfiprintf_r+0xe2>
 80139c8:	9b03      	ldr	r3, [sp, #12]
 80139ca:	1d19      	adds	r1, r3, #4
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	9103      	str	r1, [sp, #12]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	bfbb      	ittet	lt
 80139d4:	425b      	neglt	r3, r3
 80139d6:	f042 0202 	orrlt.w	r2, r2, #2
 80139da:	9307      	strge	r3, [sp, #28]
 80139dc:	9307      	strlt	r3, [sp, #28]
 80139de:	bfb8      	it	lt
 80139e0:	9204      	strlt	r2, [sp, #16]
 80139e2:	7823      	ldrb	r3, [r4, #0]
 80139e4:	2b2e      	cmp	r3, #46	; 0x2e
 80139e6:	d10c      	bne.n	8013a02 <_vfiprintf_r+0x176>
 80139e8:	7863      	ldrb	r3, [r4, #1]
 80139ea:	2b2a      	cmp	r3, #42	; 0x2a
 80139ec:	d135      	bne.n	8013a5a <_vfiprintf_r+0x1ce>
 80139ee:	9b03      	ldr	r3, [sp, #12]
 80139f0:	1d1a      	adds	r2, r3, #4
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	9203      	str	r2, [sp, #12]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	bfb8      	it	lt
 80139fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80139fe:	3402      	adds	r4, #2
 8013a00:	9305      	str	r3, [sp, #20]
 8013a02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013ae8 <_vfiprintf_r+0x25c>
 8013a06:	7821      	ldrb	r1, [r4, #0]
 8013a08:	2203      	movs	r2, #3
 8013a0a:	4650      	mov	r0, sl
 8013a0c:	f7ec fd38 	bl	8000480 <memchr>
 8013a10:	b140      	cbz	r0, 8013a24 <_vfiprintf_r+0x198>
 8013a12:	2340      	movs	r3, #64	; 0x40
 8013a14:	eba0 000a 	sub.w	r0, r0, sl
 8013a18:	fa03 f000 	lsl.w	r0, r3, r0
 8013a1c:	9b04      	ldr	r3, [sp, #16]
 8013a1e:	4303      	orrs	r3, r0
 8013a20:	3401      	adds	r4, #1
 8013a22:	9304      	str	r3, [sp, #16]
 8013a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a28:	482c      	ldr	r0, [pc, #176]	; (8013adc <_vfiprintf_r+0x250>)
 8013a2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a2e:	2206      	movs	r2, #6
 8013a30:	f7ec fd26 	bl	8000480 <memchr>
 8013a34:	2800      	cmp	r0, #0
 8013a36:	d03f      	beq.n	8013ab8 <_vfiprintf_r+0x22c>
 8013a38:	4b29      	ldr	r3, [pc, #164]	; (8013ae0 <_vfiprintf_r+0x254>)
 8013a3a:	bb1b      	cbnz	r3, 8013a84 <_vfiprintf_r+0x1f8>
 8013a3c:	9b03      	ldr	r3, [sp, #12]
 8013a3e:	3307      	adds	r3, #7
 8013a40:	f023 0307 	bic.w	r3, r3, #7
 8013a44:	3308      	adds	r3, #8
 8013a46:	9303      	str	r3, [sp, #12]
 8013a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a4a:	443b      	add	r3, r7
 8013a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8013a4e:	e767      	b.n	8013920 <_vfiprintf_r+0x94>
 8013a50:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a54:	460c      	mov	r4, r1
 8013a56:	2001      	movs	r0, #1
 8013a58:	e7a5      	b.n	80139a6 <_vfiprintf_r+0x11a>
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	3401      	adds	r4, #1
 8013a5e:	9305      	str	r3, [sp, #20]
 8013a60:	4619      	mov	r1, r3
 8013a62:	f04f 0c0a 	mov.w	ip, #10
 8013a66:	4620      	mov	r0, r4
 8013a68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a6c:	3a30      	subs	r2, #48	; 0x30
 8013a6e:	2a09      	cmp	r2, #9
 8013a70:	d903      	bls.n	8013a7a <_vfiprintf_r+0x1ee>
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d0c5      	beq.n	8013a02 <_vfiprintf_r+0x176>
 8013a76:	9105      	str	r1, [sp, #20]
 8013a78:	e7c3      	b.n	8013a02 <_vfiprintf_r+0x176>
 8013a7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a7e:	4604      	mov	r4, r0
 8013a80:	2301      	movs	r3, #1
 8013a82:	e7f0      	b.n	8013a66 <_vfiprintf_r+0x1da>
 8013a84:	ab03      	add	r3, sp, #12
 8013a86:	9300      	str	r3, [sp, #0]
 8013a88:	462a      	mov	r2, r5
 8013a8a:	4b16      	ldr	r3, [pc, #88]	; (8013ae4 <_vfiprintf_r+0x258>)
 8013a8c:	a904      	add	r1, sp, #16
 8013a8e:	4630      	mov	r0, r6
 8013a90:	f3af 8000 	nop.w
 8013a94:	4607      	mov	r7, r0
 8013a96:	1c78      	adds	r0, r7, #1
 8013a98:	d1d6      	bne.n	8013a48 <_vfiprintf_r+0x1bc>
 8013a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a9c:	07d9      	lsls	r1, r3, #31
 8013a9e:	d405      	bmi.n	8013aac <_vfiprintf_r+0x220>
 8013aa0:	89ab      	ldrh	r3, [r5, #12]
 8013aa2:	059a      	lsls	r2, r3, #22
 8013aa4:	d402      	bmi.n	8013aac <_vfiprintf_r+0x220>
 8013aa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013aa8:	f7ff fd77 	bl	801359a <__retarget_lock_release_recursive>
 8013aac:	89ab      	ldrh	r3, [r5, #12]
 8013aae:	065b      	lsls	r3, r3, #25
 8013ab0:	f53f af12 	bmi.w	80138d8 <_vfiprintf_r+0x4c>
 8013ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ab6:	e711      	b.n	80138dc <_vfiprintf_r+0x50>
 8013ab8:	ab03      	add	r3, sp, #12
 8013aba:	9300      	str	r3, [sp, #0]
 8013abc:	462a      	mov	r2, r5
 8013abe:	4b09      	ldr	r3, [pc, #36]	; (8013ae4 <_vfiprintf_r+0x258>)
 8013ac0:	a904      	add	r1, sp, #16
 8013ac2:	4630      	mov	r0, r6
 8013ac4:	f000 f880 	bl	8013bc8 <_printf_i>
 8013ac8:	e7e4      	b.n	8013a94 <_vfiprintf_r+0x208>
 8013aca:	bf00      	nop
 8013acc:	08014384 	.word	0x08014384
 8013ad0:	080143a4 	.word	0x080143a4
 8013ad4:	08014364 	.word	0x08014364
 8013ad8:	080143c4 	.word	0x080143c4
 8013adc:	080143ce 	.word	0x080143ce
 8013ae0:	00000000 	.word	0x00000000
 8013ae4:	08013867 	.word	0x08013867
 8013ae8:	080143ca 	.word	0x080143ca

08013aec <_printf_common>:
 8013aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013af0:	4616      	mov	r6, r2
 8013af2:	4699      	mov	r9, r3
 8013af4:	688a      	ldr	r2, [r1, #8]
 8013af6:	690b      	ldr	r3, [r1, #16]
 8013af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013afc:	4293      	cmp	r3, r2
 8013afe:	bfb8      	it	lt
 8013b00:	4613      	movlt	r3, r2
 8013b02:	6033      	str	r3, [r6, #0]
 8013b04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b08:	4607      	mov	r7, r0
 8013b0a:	460c      	mov	r4, r1
 8013b0c:	b10a      	cbz	r2, 8013b12 <_printf_common+0x26>
 8013b0e:	3301      	adds	r3, #1
 8013b10:	6033      	str	r3, [r6, #0]
 8013b12:	6823      	ldr	r3, [r4, #0]
 8013b14:	0699      	lsls	r1, r3, #26
 8013b16:	bf42      	ittt	mi
 8013b18:	6833      	ldrmi	r3, [r6, #0]
 8013b1a:	3302      	addmi	r3, #2
 8013b1c:	6033      	strmi	r3, [r6, #0]
 8013b1e:	6825      	ldr	r5, [r4, #0]
 8013b20:	f015 0506 	ands.w	r5, r5, #6
 8013b24:	d106      	bne.n	8013b34 <_printf_common+0x48>
 8013b26:	f104 0a19 	add.w	sl, r4, #25
 8013b2a:	68e3      	ldr	r3, [r4, #12]
 8013b2c:	6832      	ldr	r2, [r6, #0]
 8013b2e:	1a9b      	subs	r3, r3, r2
 8013b30:	42ab      	cmp	r3, r5
 8013b32:	dc26      	bgt.n	8013b82 <_printf_common+0x96>
 8013b34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013b38:	1e13      	subs	r3, r2, #0
 8013b3a:	6822      	ldr	r2, [r4, #0]
 8013b3c:	bf18      	it	ne
 8013b3e:	2301      	movne	r3, #1
 8013b40:	0692      	lsls	r2, r2, #26
 8013b42:	d42b      	bmi.n	8013b9c <_printf_common+0xb0>
 8013b44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b48:	4649      	mov	r1, r9
 8013b4a:	4638      	mov	r0, r7
 8013b4c:	47c0      	blx	r8
 8013b4e:	3001      	adds	r0, #1
 8013b50:	d01e      	beq.n	8013b90 <_printf_common+0xa4>
 8013b52:	6823      	ldr	r3, [r4, #0]
 8013b54:	68e5      	ldr	r5, [r4, #12]
 8013b56:	6832      	ldr	r2, [r6, #0]
 8013b58:	f003 0306 	and.w	r3, r3, #6
 8013b5c:	2b04      	cmp	r3, #4
 8013b5e:	bf08      	it	eq
 8013b60:	1aad      	subeq	r5, r5, r2
 8013b62:	68a3      	ldr	r3, [r4, #8]
 8013b64:	6922      	ldr	r2, [r4, #16]
 8013b66:	bf0c      	ite	eq
 8013b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b6c:	2500      	movne	r5, #0
 8013b6e:	4293      	cmp	r3, r2
 8013b70:	bfc4      	itt	gt
 8013b72:	1a9b      	subgt	r3, r3, r2
 8013b74:	18ed      	addgt	r5, r5, r3
 8013b76:	2600      	movs	r6, #0
 8013b78:	341a      	adds	r4, #26
 8013b7a:	42b5      	cmp	r5, r6
 8013b7c:	d11a      	bne.n	8013bb4 <_printf_common+0xc8>
 8013b7e:	2000      	movs	r0, #0
 8013b80:	e008      	b.n	8013b94 <_printf_common+0xa8>
 8013b82:	2301      	movs	r3, #1
 8013b84:	4652      	mov	r2, sl
 8013b86:	4649      	mov	r1, r9
 8013b88:	4638      	mov	r0, r7
 8013b8a:	47c0      	blx	r8
 8013b8c:	3001      	adds	r0, #1
 8013b8e:	d103      	bne.n	8013b98 <_printf_common+0xac>
 8013b90:	f04f 30ff 	mov.w	r0, #4294967295
 8013b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b98:	3501      	adds	r5, #1
 8013b9a:	e7c6      	b.n	8013b2a <_printf_common+0x3e>
 8013b9c:	18e1      	adds	r1, r4, r3
 8013b9e:	1c5a      	adds	r2, r3, #1
 8013ba0:	2030      	movs	r0, #48	; 0x30
 8013ba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013ba6:	4422      	add	r2, r4
 8013ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013bac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013bb0:	3302      	adds	r3, #2
 8013bb2:	e7c7      	b.n	8013b44 <_printf_common+0x58>
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	4622      	mov	r2, r4
 8013bb8:	4649      	mov	r1, r9
 8013bba:	4638      	mov	r0, r7
 8013bbc:	47c0      	blx	r8
 8013bbe:	3001      	adds	r0, #1
 8013bc0:	d0e6      	beq.n	8013b90 <_printf_common+0xa4>
 8013bc2:	3601      	adds	r6, #1
 8013bc4:	e7d9      	b.n	8013b7a <_printf_common+0x8e>
	...

08013bc8 <_printf_i>:
 8013bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013bcc:	7e0f      	ldrb	r7, [r1, #24]
 8013bce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013bd0:	2f78      	cmp	r7, #120	; 0x78
 8013bd2:	4691      	mov	r9, r2
 8013bd4:	4680      	mov	r8, r0
 8013bd6:	460c      	mov	r4, r1
 8013bd8:	469a      	mov	sl, r3
 8013bda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013bde:	d807      	bhi.n	8013bf0 <_printf_i+0x28>
 8013be0:	2f62      	cmp	r7, #98	; 0x62
 8013be2:	d80a      	bhi.n	8013bfa <_printf_i+0x32>
 8013be4:	2f00      	cmp	r7, #0
 8013be6:	f000 80d8 	beq.w	8013d9a <_printf_i+0x1d2>
 8013bea:	2f58      	cmp	r7, #88	; 0x58
 8013bec:	f000 80a3 	beq.w	8013d36 <_printf_i+0x16e>
 8013bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013bf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013bf8:	e03a      	b.n	8013c70 <_printf_i+0xa8>
 8013bfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013bfe:	2b15      	cmp	r3, #21
 8013c00:	d8f6      	bhi.n	8013bf0 <_printf_i+0x28>
 8013c02:	a101      	add	r1, pc, #4	; (adr r1, 8013c08 <_printf_i+0x40>)
 8013c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c08:	08013c61 	.word	0x08013c61
 8013c0c:	08013c75 	.word	0x08013c75
 8013c10:	08013bf1 	.word	0x08013bf1
 8013c14:	08013bf1 	.word	0x08013bf1
 8013c18:	08013bf1 	.word	0x08013bf1
 8013c1c:	08013bf1 	.word	0x08013bf1
 8013c20:	08013c75 	.word	0x08013c75
 8013c24:	08013bf1 	.word	0x08013bf1
 8013c28:	08013bf1 	.word	0x08013bf1
 8013c2c:	08013bf1 	.word	0x08013bf1
 8013c30:	08013bf1 	.word	0x08013bf1
 8013c34:	08013d81 	.word	0x08013d81
 8013c38:	08013ca5 	.word	0x08013ca5
 8013c3c:	08013d63 	.word	0x08013d63
 8013c40:	08013bf1 	.word	0x08013bf1
 8013c44:	08013bf1 	.word	0x08013bf1
 8013c48:	08013da3 	.word	0x08013da3
 8013c4c:	08013bf1 	.word	0x08013bf1
 8013c50:	08013ca5 	.word	0x08013ca5
 8013c54:	08013bf1 	.word	0x08013bf1
 8013c58:	08013bf1 	.word	0x08013bf1
 8013c5c:	08013d6b 	.word	0x08013d6b
 8013c60:	682b      	ldr	r3, [r5, #0]
 8013c62:	1d1a      	adds	r2, r3, #4
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	602a      	str	r2, [r5, #0]
 8013c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c70:	2301      	movs	r3, #1
 8013c72:	e0a3      	b.n	8013dbc <_printf_i+0x1f4>
 8013c74:	6820      	ldr	r0, [r4, #0]
 8013c76:	6829      	ldr	r1, [r5, #0]
 8013c78:	0606      	lsls	r6, r0, #24
 8013c7a:	f101 0304 	add.w	r3, r1, #4
 8013c7e:	d50a      	bpl.n	8013c96 <_printf_i+0xce>
 8013c80:	680e      	ldr	r6, [r1, #0]
 8013c82:	602b      	str	r3, [r5, #0]
 8013c84:	2e00      	cmp	r6, #0
 8013c86:	da03      	bge.n	8013c90 <_printf_i+0xc8>
 8013c88:	232d      	movs	r3, #45	; 0x2d
 8013c8a:	4276      	negs	r6, r6
 8013c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c90:	485e      	ldr	r0, [pc, #376]	; (8013e0c <_printf_i+0x244>)
 8013c92:	230a      	movs	r3, #10
 8013c94:	e019      	b.n	8013cca <_printf_i+0x102>
 8013c96:	680e      	ldr	r6, [r1, #0]
 8013c98:	602b      	str	r3, [r5, #0]
 8013c9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013c9e:	bf18      	it	ne
 8013ca0:	b236      	sxthne	r6, r6
 8013ca2:	e7ef      	b.n	8013c84 <_printf_i+0xbc>
 8013ca4:	682b      	ldr	r3, [r5, #0]
 8013ca6:	6820      	ldr	r0, [r4, #0]
 8013ca8:	1d19      	adds	r1, r3, #4
 8013caa:	6029      	str	r1, [r5, #0]
 8013cac:	0601      	lsls	r1, r0, #24
 8013cae:	d501      	bpl.n	8013cb4 <_printf_i+0xec>
 8013cb0:	681e      	ldr	r6, [r3, #0]
 8013cb2:	e002      	b.n	8013cba <_printf_i+0xf2>
 8013cb4:	0646      	lsls	r6, r0, #25
 8013cb6:	d5fb      	bpl.n	8013cb0 <_printf_i+0xe8>
 8013cb8:	881e      	ldrh	r6, [r3, #0]
 8013cba:	4854      	ldr	r0, [pc, #336]	; (8013e0c <_printf_i+0x244>)
 8013cbc:	2f6f      	cmp	r7, #111	; 0x6f
 8013cbe:	bf0c      	ite	eq
 8013cc0:	2308      	moveq	r3, #8
 8013cc2:	230a      	movne	r3, #10
 8013cc4:	2100      	movs	r1, #0
 8013cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013cca:	6865      	ldr	r5, [r4, #4]
 8013ccc:	60a5      	str	r5, [r4, #8]
 8013cce:	2d00      	cmp	r5, #0
 8013cd0:	bfa2      	ittt	ge
 8013cd2:	6821      	ldrge	r1, [r4, #0]
 8013cd4:	f021 0104 	bicge.w	r1, r1, #4
 8013cd8:	6021      	strge	r1, [r4, #0]
 8013cda:	b90e      	cbnz	r6, 8013ce0 <_printf_i+0x118>
 8013cdc:	2d00      	cmp	r5, #0
 8013cde:	d04d      	beq.n	8013d7c <_printf_i+0x1b4>
 8013ce0:	4615      	mov	r5, r2
 8013ce2:	fbb6 f1f3 	udiv	r1, r6, r3
 8013ce6:	fb03 6711 	mls	r7, r3, r1, r6
 8013cea:	5dc7      	ldrb	r7, [r0, r7]
 8013cec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013cf0:	4637      	mov	r7, r6
 8013cf2:	42bb      	cmp	r3, r7
 8013cf4:	460e      	mov	r6, r1
 8013cf6:	d9f4      	bls.n	8013ce2 <_printf_i+0x11a>
 8013cf8:	2b08      	cmp	r3, #8
 8013cfa:	d10b      	bne.n	8013d14 <_printf_i+0x14c>
 8013cfc:	6823      	ldr	r3, [r4, #0]
 8013cfe:	07de      	lsls	r6, r3, #31
 8013d00:	d508      	bpl.n	8013d14 <_printf_i+0x14c>
 8013d02:	6923      	ldr	r3, [r4, #16]
 8013d04:	6861      	ldr	r1, [r4, #4]
 8013d06:	4299      	cmp	r1, r3
 8013d08:	bfde      	ittt	le
 8013d0a:	2330      	movle	r3, #48	; 0x30
 8013d0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013d10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013d14:	1b52      	subs	r2, r2, r5
 8013d16:	6122      	str	r2, [r4, #16]
 8013d18:	f8cd a000 	str.w	sl, [sp]
 8013d1c:	464b      	mov	r3, r9
 8013d1e:	aa03      	add	r2, sp, #12
 8013d20:	4621      	mov	r1, r4
 8013d22:	4640      	mov	r0, r8
 8013d24:	f7ff fee2 	bl	8013aec <_printf_common>
 8013d28:	3001      	adds	r0, #1
 8013d2a:	d14c      	bne.n	8013dc6 <_printf_i+0x1fe>
 8013d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d30:	b004      	add	sp, #16
 8013d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d36:	4835      	ldr	r0, [pc, #212]	; (8013e0c <_printf_i+0x244>)
 8013d38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013d3c:	6829      	ldr	r1, [r5, #0]
 8013d3e:	6823      	ldr	r3, [r4, #0]
 8013d40:	f851 6b04 	ldr.w	r6, [r1], #4
 8013d44:	6029      	str	r1, [r5, #0]
 8013d46:	061d      	lsls	r5, r3, #24
 8013d48:	d514      	bpl.n	8013d74 <_printf_i+0x1ac>
 8013d4a:	07df      	lsls	r7, r3, #31
 8013d4c:	bf44      	itt	mi
 8013d4e:	f043 0320 	orrmi.w	r3, r3, #32
 8013d52:	6023      	strmi	r3, [r4, #0]
 8013d54:	b91e      	cbnz	r6, 8013d5e <_printf_i+0x196>
 8013d56:	6823      	ldr	r3, [r4, #0]
 8013d58:	f023 0320 	bic.w	r3, r3, #32
 8013d5c:	6023      	str	r3, [r4, #0]
 8013d5e:	2310      	movs	r3, #16
 8013d60:	e7b0      	b.n	8013cc4 <_printf_i+0xfc>
 8013d62:	6823      	ldr	r3, [r4, #0]
 8013d64:	f043 0320 	orr.w	r3, r3, #32
 8013d68:	6023      	str	r3, [r4, #0]
 8013d6a:	2378      	movs	r3, #120	; 0x78
 8013d6c:	4828      	ldr	r0, [pc, #160]	; (8013e10 <_printf_i+0x248>)
 8013d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013d72:	e7e3      	b.n	8013d3c <_printf_i+0x174>
 8013d74:	0659      	lsls	r1, r3, #25
 8013d76:	bf48      	it	mi
 8013d78:	b2b6      	uxthmi	r6, r6
 8013d7a:	e7e6      	b.n	8013d4a <_printf_i+0x182>
 8013d7c:	4615      	mov	r5, r2
 8013d7e:	e7bb      	b.n	8013cf8 <_printf_i+0x130>
 8013d80:	682b      	ldr	r3, [r5, #0]
 8013d82:	6826      	ldr	r6, [r4, #0]
 8013d84:	6961      	ldr	r1, [r4, #20]
 8013d86:	1d18      	adds	r0, r3, #4
 8013d88:	6028      	str	r0, [r5, #0]
 8013d8a:	0635      	lsls	r5, r6, #24
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	d501      	bpl.n	8013d94 <_printf_i+0x1cc>
 8013d90:	6019      	str	r1, [r3, #0]
 8013d92:	e002      	b.n	8013d9a <_printf_i+0x1d2>
 8013d94:	0670      	lsls	r0, r6, #25
 8013d96:	d5fb      	bpl.n	8013d90 <_printf_i+0x1c8>
 8013d98:	8019      	strh	r1, [r3, #0]
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	6123      	str	r3, [r4, #16]
 8013d9e:	4615      	mov	r5, r2
 8013da0:	e7ba      	b.n	8013d18 <_printf_i+0x150>
 8013da2:	682b      	ldr	r3, [r5, #0]
 8013da4:	1d1a      	adds	r2, r3, #4
 8013da6:	602a      	str	r2, [r5, #0]
 8013da8:	681d      	ldr	r5, [r3, #0]
 8013daa:	6862      	ldr	r2, [r4, #4]
 8013dac:	2100      	movs	r1, #0
 8013dae:	4628      	mov	r0, r5
 8013db0:	f7ec fb66 	bl	8000480 <memchr>
 8013db4:	b108      	cbz	r0, 8013dba <_printf_i+0x1f2>
 8013db6:	1b40      	subs	r0, r0, r5
 8013db8:	6060      	str	r0, [r4, #4]
 8013dba:	6863      	ldr	r3, [r4, #4]
 8013dbc:	6123      	str	r3, [r4, #16]
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013dc4:	e7a8      	b.n	8013d18 <_printf_i+0x150>
 8013dc6:	6923      	ldr	r3, [r4, #16]
 8013dc8:	462a      	mov	r2, r5
 8013dca:	4649      	mov	r1, r9
 8013dcc:	4640      	mov	r0, r8
 8013dce:	47d0      	blx	sl
 8013dd0:	3001      	adds	r0, #1
 8013dd2:	d0ab      	beq.n	8013d2c <_printf_i+0x164>
 8013dd4:	6823      	ldr	r3, [r4, #0]
 8013dd6:	079b      	lsls	r3, r3, #30
 8013dd8:	d413      	bmi.n	8013e02 <_printf_i+0x23a>
 8013dda:	68e0      	ldr	r0, [r4, #12]
 8013ddc:	9b03      	ldr	r3, [sp, #12]
 8013dde:	4298      	cmp	r0, r3
 8013de0:	bfb8      	it	lt
 8013de2:	4618      	movlt	r0, r3
 8013de4:	e7a4      	b.n	8013d30 <_printf_i+0x168>
 8013de6:	2301      	movs	r3, #1
 8013de8:	4632      	mov	r2, r6
 8013dea:	4649      	mov	r1, r9
 8013dec:	4640      	mov	r0, r8
 8013dee:	47d0      	blx	sl
 8013df0:	3001      	adds	r0, #1
 8013df2:	d09b      	beq.n	8013d2c <_printf_i+0x164>
 8013df4:	3501      	adds	r5, #1
 8013df6:	68e3      	ldr	r3, [r4, #12]
 8013df8:	9903      	ldr	r1, [sp, #12]
 8013dfa:	1a5b      	subs	r3, r3, r1
 8013dfc:	42ab      	cmp	r3, r5
 8013dfe:	dcf2      	bgt.n	8013de6 <_printf_i+0x21e>
 8013e00:	e7eb      	b.n	8013dda <_printf_i+0x212>
 8013e02:	2500      	movs	r5, #0
 8013e04:	f104 0619 	add.w	r6, r4, #25
 8013e08:	e7f5      	b.n	8013df6 <_printf_i+0x22e>
 8013e0a:	bf00      	nop
 8013e0c:	080143d5 	.word	0x080143d5
 8013e10:	080143e6 	.word	0x080143e6

08013e14 <_sbrk_r>:
 8013e14:	b538      	push	{r3, r4, r5, lr}
 8013e16:	4d06      	ldr	r5, [pc, #24]	; (8013e30 <_sbrk_r+0x1c>)
 8013e18:	2300      	movs	r3, #0
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	4608      	mov	r0, r1
 8013e1e:	602b      	str	r3, [r5, #0]
 8013e20:	f7ed fa1c 	bl	800125c <_sbrk>
 8013e24:	1c43      	adds	r3, r0, #1
 8013e26:	d102      	bne.n	8013e2e <_sbrk_r+0x1a>
 8013e28:	682b      	ldr	r3, [r5, #0]
 8013e2a:	b103      	cbz	r3, 8013e2e <_sbrk_r+0x1a>
 8013e2c:	6023      	str	r3, [r4, #0]
 8013e2e:	bd38      	pop	{r3, r4, r5, pc}
 8013e30:	2000b1a8 	.word	0x2000b1a8

08013e34 <__sread>:
 8013e34:	b510      	push	{r4, lr}
 8013e36:	460c      	mov	r4, r1
 8013e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e3c:	f000 f8a8 	bl	8013f90 <_read_r>
 8013e40:	2800      	cmp	r0, #0
 8013e42:	bfab      	itete	ge
 8013e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013e46:	89a3      	ldrhlt	r3, [r4, #12]
 8013e48:	181b      	addge	r3, r3, r0
 8013e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013e4e:	bfac      	ite	ge
 8013e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8013e52:	81a3      	strhlt	r3, [r4, #12]
 8013e54:	bd10      	pop	{r4, pc}

08013e56 <__swrite>:
 8013e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e5a:	461f      	mov	r7, r3
 8013e5c:	898b      	ldrh	r3, [r1, #12]
 8013e5e:	05db      	lsls	r3, r3, #23
 8013e60:	4605      	mov	r5, r0
 8013e62:	460c      	mov	r4, r1
 8013e64:	4616      	mov	r6, r2
 8013e66:	d505      	bpl.n	8013e74 <__swrite+0x1e>
 8013e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e6c:	2302      	movs	r3, #2
 8013e6e:	2200      	movs	r2, #0
 8013e70:	f000 f870 	bl	8013f54 <_lseek_r>
 8013e74:	89a3      	ldrh	r3, [r4, #12]
 8013e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e7e:	81a3      	strh	r3, [r4, #12]
 8013e80:	4632      	mov	r2, r6
 8013e82:	463b      	mov	r3, r7
 8013e84:	4628      	mov	r0, r5
 8013e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e8a:	f000 b817 	b.w	8013ebc <_write_r>

08013e8e <__sseek>:
 8013e8e:	b510      	push	{r4, lr}
 8013e90:	460c      	mov	r4, r1
 8013e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e96:	f000 f85d 	bl	8013f54 <_lseek_r>
 8013e9a:	1c43      	adds	r3, r0, #1
 8013e9c:	89a3      	ldrh	r3, [r4, #12]
 8013e9e:	bf15      	itete	ne
 8013ea0:	6560      	strne	r0, [r4, #84]	; 0x54
 8013ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013eaa:	81a3      	strheq	r3, [r4, #12]
 8013eac:	bf18      	it	ne
 8013eae:	81a3      	strhne	r3, [r4, #12]
 8013eb0:	bd10      	pop	{r4, pc}

08013eb2 <__sclose>:
 8013eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eb6:	f000 b81b 	b.w	8013ef0 <_close_r>
	...

08013ebc <_write_r>:
 8013ebc:	b538      	push	{r3, r4, r5, lr}
 8013ebe:	4d07      	ldr	r5, [pc, #28]	; (8013edc <_write_r+0x20>)
 8013ec0:	4604      	mov	r4, r0
 8013ec2:	4608      	mov	r0, r1
 8013ec4:	4611      	mov	r1, r2
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	602a      	str	r2, [r5, #0]
 8013eca:	461a      	mov	r2, r3
 8013ecc:	f7ed f975 	bl	80011ba <_write>
 8013ed0:	1c43      	adds	r3, r0, #1
 8013ed2:	d102      	bne.n	8013eda <_write_r+0x1e>
 8013ed4:	682b      	ldr	r3, [r5, #0]
 8013ed6:	b103      	cbz	r3, 8013eda <_write_r+0x1e>
 8013ed8:	6023      	str	r3, [r4, #0]
 8013eda:	bd38      	pop	{r3, r4, r5, pc}
 8013edc:	2000b1a8 	.word	0x2000b1a8

08013ee0 <abort>:
 8013ee0:	b508      	push	{r3, lr}
 8013ee2:	2006      	movs	r0, #6
 8013ee4:	f000 f88e 	bl	8014004 <raise>
 8013ee8:	2001      	movs	r0, #1
 8013eea:	f7ed f93f 	bl	800116c <_exit>
	...

08013ef0 <_close_r>:
 8013ef0:	b538      	push	{r3, r4, r5, lr}
 8013ef2:	4d06      	ldr	r5, [pc, #24]	; (8013f0c <_close_r+0x1c>)
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	4604      	mov	r4, r0
 8013ef8:	4608      	mov	r0, r1
 8013efa:	602b      	str	r3, [r5, #0]
 8013efc:	f7ed f979 	bl	80011f2 <_close>
 8013f00:	1c43      	adds	r3, r0, #1
 8013f02:	d102      	bne.n	8013f0a <_close_r+0x1a>
 8013f04:	682b      	ldr	r3, [r5, #0]
 8013f06:	b103      	cbz	r3, 8013f0a <_close_r+0x1a>
 8013f08:	6023      	str	r3, [r4, #0]
 8013f0a:	bd38      	pop	{r3, r4, r5, pc}
 8013f0c:	2000b1a8 	.word	0x2000b1a8

08013f10 <_fstat_r>:
 8013f10:	b538      	push	{r3, r4, r5, lr}
 8013f12:	4d07      	ldr	r5, [pc, #28]	; (8013f30 <_fstat_r+0x20>)
 8013f14:	2300      	movs	r3, #0
 8013f16:	4604      	mov	r4, r0
 8013f18:	4608      	mov	r0, r1
 8013f1a:	4611      	mov	r1, r2
 8013f1c:	602b      	str	r3, [r5, #0]
 8013f1e:	f7ed f974 	bl	800120a <_fstat>
 8013f22:	1c43      	adds	r3, r0, #1
 8013f24:	d102      	bne.n	8013f2c <_fstat_r+0x1c>
 8013f26:	682b      	ldr	r3, [r5, #0]
 8013f28:	b103      	cbz	r3, 8013f2c <_fstat_r+0x1c>
 8013f2a:	6023      	str	r3, [r4, #0]
 8013f2c:	bd38      	pop	{r3, r4, r5, pc}
 8013f2e:	bf00      	nop
 8013f30:	2000b1a8 	.word	0x2000b1a8

08013f34 <_isatty_r>:
 8013f34:	b538      	push	{r3, r4, r5, lr}
 8013f36:	4d06      	ldr	r5, [pc, #24]	; (8013f50 <_isatty_r+0x1c>)
 8013f38:	2300      	movs	r3, #0
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	4608      	mov	r0, r1
 8013f3e:	602b      	str	r3, [r5, #0]
 8013f40:	f7ed f973 	bl	800122a <_isatty>
 8013f44:	1c43      	adds	r3, r0, #1
 8013f46:	d102      	bne.n	8013f4e <_isatty_r+0x1a>
 8013f48:	682b      	ldr	r3, [r5, #0]
 8013f4a:	b103      	cbz	r3, 8013f4e <_isatty_r+0x1a>
 8013f4c:	6023      	str	r3, [r4, #0]
 8013f4e:	bd38      	pop	{r3, r4, r5, pc}
 8013f50:	2000b1a8 	.word	0x2000b1a8

08013f54 <_lseek_r>:
 8013f54:	b538      	push	{r3, r4, r5, lr}
 8013f56:	4d07      	ldr	r5, [pc, #28]	; (8013f74 <_lseek_r+0x20>)
 8013f58:	4604      	mov	r4, r0
 8013f5a:	4608      	mov	r0, r1
 8013f5c:	4611      	mov	r1, r2
 8013f5e:	2200      	movs	r2, #0
 8013f60:	602a      	str	r2, [r5, #0]
 8013f62:	461a      	mov	r2, r3
 8013f64:	f7ed f96c 	bl	8001240 <_lseek>
 8013f68:	1c43      	adds	r3, r0, #1
 8013f6a:	d102      	bne.n	8013f72 <_lseek_r+0x1e>
 8013f6c:	682b      	ldr	r3, [r5, #0]
 8013f6e:	b103      	cbz	r3, 8013f72 <_lseek_r+0x1e>
 8013f70:	6023      	str	r3, [r4, #0]
 8013f72:	bd38      	pop	{r3, r4, r5, pc}
 8013f74:	2000b1a8 	.word	0x2000b1a8

08013f78 <__malloc_lock>:
 8013f78:	4801      	ldr	r0, [pc, #4]	; (8013f80 <__malloc_lock+0x8>)
 8013f7a:	f7ff bb0d 	b.w	8013598 <__retarget_lock_acquire_recursive>
 8013f7e:	bf00      	nop
 8013f80:	2000b19c 	.word	0x2000b19c

08013f84 <__malloc_unlock>:
 8013f84:	4801      	ldr	r0, [pc, #4]	; (8013f8c <__malloc_unlock+0x8>)
 8013f86:	f7ff bb08 	b.w	801359a <__retarget_lock_release_recursive>
 8013f8a:	bf00      	nop
 8013f8c:	2000b19c 	.word	0x2000b19c

08013f90 <_read_r>:
 8013f90:	b538      	push	{r3, r4, r5, lr}
 8013f92:	4d07      	ldr	r5, [pc, #28]	; (8013fb0 <_read_r+0x20>)
 8013f94:	4604      	mov	r4, r0
 8013f96:	4608      	mov	r0, r1
 8013f98:	4611      	mov	r1, r2
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	602a      	str	r2, [r5, #0]
 8013f9e:	461a      	mov	r2, r3
 8013fa0:	f7ed f8ee 	bl	8001180 <_read>
 8013fa4:	1c43      	adds	r3, r0, #1
 8013fa6:	d102      	bne.n	8013fae <_read_r+0x1e>
 8013fa8:	682b      	ldr	r3, [r5, #0]
 8013faa:	b103      	cbz	r3, 8013fae <_read_r+0x1e>
 8013fac:	6023      	str	r3, [r4, #0]
 8013fae:	bd38      	pop	{r3, r4, r5, pc}
 8013fb0:	2000b1a8 	.word	0x2000b1a8

08013fb4 <_raise_r>:
 8013fb4:	291f      	cmp	r1, #31
 8013fb6:	b538      	push	{r3, r4, r5, lr}
 8013fb8:	4604      	mov	r4, r0
 8013fba:	460d      	mov	r5, r1
 8013fbc:	d904      	bls.n	8013fc8 <_raise_r+0x14>
 8013fbe:	2316      	movs	r3, #22
 8013fc0:	6003      	str	r3, [r0, #0]
 8013fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8013fc6:	bd38      	pop	{r3, r4, r5, pc}
 8013fc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013fca:	b112      	cbz	r2, 8013fd2 <_raise_r+0x1e>
 8013fcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013fd0:	b94b      	cbnz	r3, 8013fe6 <_raise_r+0x32>
 8013fd2:	4620      	mov	r0, r4
 8013fd4:	f000 f830 	bl	8014038 <_getpid_r>
 8013fd8:	462a      	mov	r2, r5
 8013fda:	4601      	mov	r1, r0
 8013fdc:	4620      	mov	r0, r4
 8013fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013fe2:	f000 b817 	b.w	8014014 <_kill_r>
 8013fe6:	2b01      	cmp	r3, #1
 8013fe8:	d00a      	beq.n	8014000 <_raise_r+0x4c>
 8013fea:	1c59      	adds	r1, r3, #1
 8013fec:	d103      	bne.n	8013ff6 <_raise_r+0x42>
 8013fee:	2316      	movs	r3, #22
 8013ff0:	6003      	str	r3, [r0, #0]
 8013ff2:	2001      	movs	r0, #1
 8013ff4:	e7e7      	b.n	8013fc6 <_raise_r+0x12>
 8013ff6:	2400      	movs	r4, #0
 8013ff8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013ffc:	4628      	mov	r0, r5
 8013ffe:	4798      	blx	r3
 8014000:	2000      	movs	r0, #0
 8014002:	e7e0      	b.n	8013fc6 <_raise_r+0x12>

08014004 <raise>:
 8014004:	4b02      	ldr	r3, [pc, #8]	; (8014010 <raise+0xc>)
 8014006:	4601      	mov	r1, r0
 8014008:	6818      	ldr	r0, [r3, #0]
 801400a:	f7ff bfd3 	b.w	8013fb4 <_raise_r>
 801400e:	bf00      	nop
 8014010:	20000090 	.word	0x20000090

08014014 <_kill_r>:
 8014014:	b538      	push	{r3, r4, r5, lr}
 8014016:	4d07      	ldr	r5, [pc, #28]	; (8014034 <_kill_r+0x20>)
 8014018:	2300      	movs	r3, #0
 801401a:	4604      	mov	r4, r0
 801401c:	4608      	mov	r0, r1
 801401e:	4611      	mov	r1, r2
 8014020:	602b      	str	r3, [r5, #0]
 8014022:	f7ed f893 	bl	800114c <_kill>
 8014026:	1c43      	adds	r3, r0, #1
 8014028:	d102      	bne.n	8014030 <_kill_r+0x1c>
 801402a:	682b      	ldr	r3, [r5, #0]
 801402c:	b103      	cbz	r3, 8014030 <_kill_r+0x1c>
 801402e:	6023      	str	r3, [r4, #0]
 8014030:	bd38      	pop	{r3, r4, r5, pc}
 8014032:	bf00      	nop
 8014034:	2000b1a8 	.word	0x2000b1a8

08014038 <_getpid_r>:
 8014038:	f7ed b880 	b.w	800113c <_getpid>

0801403c <_init>:
 801403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801403e:	bf00      	nop
 8014040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014042:	bc08      	pop	{r3}
 8014044:	469e      	mov	lr, r3
 8014046:	4770      	bx	lr

08014048 <_fini>:
 8014048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801404a:	bf00      	nop
 801404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801404e:	bc08      	pop	{r3}
 8014050:	469e      	mov	lr, r3
 8014052:	4770      	bx	lr
